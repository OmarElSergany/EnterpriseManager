/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  Enterprise Manager is distributed under the GNU General Public License version 3 and  
 *  is also available under alternative licenses negotiated directly with Simon Carter.  
 *  If you obtained Enterprise Manager under the GPL, then the GPL applies to all loadable 
 *  Enterprise Manager modules used on your system as well. The GPL (version 3) is 
 *  available at https://opensource.org/licenses/GPL-3.0
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  The Original Code was created by Simon Carter (s1cart3r@gmail.com)
 *
 *  Copyright (c) 2010 - 2017 Simon Carter.  All Rights Reserved.
 *
 *  Product:  Enterprise Manager
 *  
 *  File: FirebirdDB.cs
 *
 *  Purpose:  
 *
 *  Date        Name                Reason
 *  
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Threading;

using FirebirdSql.Data.FirebirdClient;
using FirebirdSql.Data.Isql;

using Library.BOL.Accounts;
using Library.BOL.Affiliate;
using Library.BOL.Appointments;
using Library.BOL.Basket;
using Library.BOL.Campaigns;
using Library.BOL.CashDrawer;
using Library.BOL.Celebrities;
using Library.BOL.Countries;
using Library.BOL.Coupons;
using Library.BOL.ContactDetails;
using Library.BOL.CustomWebPages;
using Library.BOL.DatabaseUpdates;
using Library.BOL.DeliveryAddress;
using Library.BOL.Distributors;
using Library.BOL.Downloads;
using Library.BOL.Export;
using Library.BOL.FileBackup;
using Library.BOL.HashTags;
using Library.BOL.Helpdesk;
using Library.BOL.Hooks;
using Library.BOL.Invoices;
using Library.BOL.IPAddresses;
using Library.BOL.Licencing;
using Library.BOL.Locations;
using Library.BOL.Mail;
using Library.BOL.MissingLinks;
using Library.BOL.ModuleDocumentation;
using Library.BOL.News;
using Library.BOL.Orders;
using Library.BOL.POSInstall;
using Library.BOL.Products;
using Library.BOL.Refunds;
using Library.BOL.RSS;
using Library.BOL.Salons;
using Library.BOL.Search;
using Library.BOL.SEO;
using Library.BOL.Staff;
using Library.BOL.Statistics;
using Library.BOL.StockControl;
using Library.BOL.Suppliers;
using Library.BOL.TagLines;
using Library.BOL.Therapists;
using Library.BOL.TipsTricks;
using Library.BOL.Trade;
using Library.BOL.Training;
using Library.BOL.Treatments;
using Library.BOL.USAStates;
using Library.BOL.Users;
using Library.BOL.Video;
using Library.BOL.Vouchers;
using Library.BOL.Websites;
using Library.BOLEvents;
using Library.Utils;

using Shared;
using Shared.Classes;

#pragma warning disable IDE0018 // Variable declaration can be inlined
#pragma warning disable IDE0029 // Null check can be simplified
#pragma warning disable IDE0017 // Object initialization can be simplified
#pragma warning disable IDE0028 // Collection initialization can be simplified
#pragma warning disable IDE1006 // Naming rule violation: These words must begin with upper case characters

namespace Library.DAL
{
    internal static class FirebirdDB
    {
        #region Internal Static Members

        /// <summary>
        /// Database connection string
        /// </summary>
        private static string[] _connectionString;
        private static string _roleName = String.Empty;
        private static User _User;

        /// <summary>
        /// If true, then the connection string will as provided will be used, 
        /// otherwise the connection string provided will be substituted for a
        /// standard build connection string
        /// </summary>
        internal static bool StandardConnection = false;

        #endregion Internal Static Members

        #region private static Members

        /// <summary>
        /// Pass code used for encrypting / decrypting passwords
        /// </summary>
        private const string PASSWORD_ENCRYPTION_KEY = "LK63hhfoi{asdfnklw;oaiulk/kafd";


        //// if a user calls InitialiseConnection() a global database connection and global
        //// transaction will be used until FinaliseConnection() is called
        //private static object _globalLockObject = new object();
        //private static bool _globalConnection = false;
        //private static FbConnection _globalDatabase = null;
        //private static FbTransaction _globalTransaction = null;

        #endregion private static Members

        #region Properties

        /// <summary>
        /// ConnString property, get/set the database connection string
        /// </summary>
        public static void ConnectionStringSet(DatabaseType dbType, string value)
        {
            if (value == null || value.Length <= 0)
                throw new ArgumentException("Invalid ConnectionString Param");

            // set the connection string
            StandardConnection = !value.ToLower().Contains("type=custom");

            if (_connectionString == null)
                _connectionString = new string[Enum.GetNames(typeof(DatabaseType)).Length];

            _connectionString[(int)dbType] = value;
        }

        public static string ConnectionStringGet(DatabaseType dbType)
        {
            return (_connectionString[(int)dbType]);
        }

        public static string LocalDatabase
        {
            get
            {
                return (GetLocalDatabase());
            }
        }

        public static User User
        {
            get
            {
                return (_User);
            }

            set
            {
                if (_User != null && value != null)
                {
                    if (_User.ID != value.ID)
                    {
                        _User = value;
                    }
                }
                else
                {
                    _User = value;
                }
            }
        }

        public static string RoleName
        {
            get
            {
                return (_roleName);
            }

            set
            {
                _roleName = value;
            }
        }

        #endregion Properties

        #region Internal Methods

        #region Internal Website methods

        /// <summary>
        /// Select individual record from  table WEBSITES
        /// </summary>
        internal static Website WebsiteSelect(int ID)
        {
            Website Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opDESCRIPTION, opFTP_HOST, opFTP_PORT, opFTP_USERNAME, " +
                    "opFTP_PASSWORD, opFTP_ROOT FROM spWEBSITES_GET(@ipID);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipID", FbDbType.Integer, ID);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Website(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), 
                            rdr.GetInt32(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.IsDBNull(6) ? "/" : rdr.GetString(6));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table WEBSITES
        /// </summary>
        internal static Website WebsiteInsert(string description, string ftpHost, int ftpPort, 
            string ftpUsername, string ftpPassword, string ftpRoot)
        {
            Website Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWEBSITES_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipdescription", FbDbType.VarChar, description);
                    AddParam(cmd, "@ipftp_Host", FbDbType.VarChar, ftpHost);
                    AddParam(cmd, "@ipftp_Port", FbDbType.Integer, ftpPort);
                    AddParam(cmd, "@ipftp_Username", FbDbType.VarChar, ftpUsername);
                    AddParam(cmd, "@ipftp_Password", FbDbType.VarChar, ftpPassword);
                    AddParam(cmd, "@ipFTP_ROOT", FbDbType.VarChar, 150, ftpRoot);
                    AddParam(cmd, "@opiD", FbDbType.Integer);
                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    tran.Commit();
                    Result = new Website(newID, description, ftpHost, ftpPort, ftpUsername, ftpPassword, ftpRoot);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table WEBSITES
        /// </summary>
        internal static bool WebsiteUpdate(Website item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWEBSITES_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);
                    AddParam(cmd, "@ipDescription", FbDbType.VarChar, item.URL);
                    AddParam(cmd, "@ipFtpHost", FbDbType.VarChar, item.FtpHost);
                    AddParam(cmd, "@ipFtpPort", FbDbType.Integer, item.FtpPort);
                    AddParam(cmd, "@ipFtpUsername", FbDbType.VarChar, item.FtpUserName);
                    AddParam(cmd, "@ipFtpPassword", FbDbType.VarChar, item.FtpPassword);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table WEBSITES
        /// </summary>
        internal static bool WebsiteDelete(Website item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWEBSITES_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);
                    cmd.ExecuteNonQuery();
                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table WEBSITES
        /// </summary>
        internal static Websites WebsiteSelectAll()
        {
            Websites Result = new Websites();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opDESCRIPTION, opFTP_HOST, opFTP_PORT, opFTP_USERNAME, " +
                        "opFTP_PASSWORD, opFTP_ROOT FROM spWEBSITES_ALL;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Website(rdr.GetInt32(0), rdr.GetString(1), 
                            rdr.IsDBNull(2) ? String.Empty : rdr.GetString(2),
                            rdr.IsDBNull(3) ? 21 : rdr.GetInt32(3),
                            rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.IsDBNull(5) ? String.Empty : rdr.GetString(5),
                            rdr.IsDBNull(6) ? "/" : rdr.GetString(6)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Website WebsiteSelectPrimary()
        {
            Website Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT FIRST 1 opID, opDESCRIPTION, opFTP_HOST, opFTP_PORT, opFTP_USERNAME, " +
                        "opFTP_PASSWORD, opFTP_ROOT FROM spWEBSITES_ALL ORDER BY opID;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Website(rdr.GetInt32(0), rdr.GetString(1),
                            rdr.IsDBNull(2) ? String.Empty : rdr.GetString(2),
                            rdr.IsDBNull(3) ? 21 : rdr.GetInt32(3),
                            rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.IsDBNull(5) ? String.Empty : rdr.GetString(5),
                            rdr.IsDBNull(6) ? "/" : rdr.GetString(6));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table WEBSITES
        /// </summary>
        internal static Website WebsiteInsertUpdate(Website item)
        {
            Website Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWEBSITES_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);
                    AddParam(cmd, "@ipDescription", FbDbType.VarChar, item.URL);
                    AddParam(cmd, "@ipFtpHost", FbDbType.VarChar, item.FtpHost);
                    AddParam(cmd, "@ipFtpPort", FbDbType.Integer, item.FtpPort);
                    AddParam(cmd, "@ipFtpUsername", FbDbType.VarChar, item.FtpUserName);
                    AddParam(cmd, "@ipFtpPassword", FbDbType.VarChar, item.FtpPassword);
                    AddParam(cmd, "@opiD", FbDbType.Integer);
                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal Website methods

        #region Contact Details

        internal static Contacts ContactDetailsGet(Supplier supplier)
        {
            Contacts Result = new Contacts();
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT cd.ID, cd.CONTACT_NAME, cd.CONTACT_TYPE, cd.CONTACT_VALUE " +
                    "FROM CONTACT_DETAILS cd JOIN SUPPLIER_TO_CONTACT stc ON(stc.CONTACT_ID = cd.ID) " +
                    "WHERE stc.SUPPLIER_ID = @SUPPLIER_ID";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SUPPLIER_ID", FbDbType.BigInt, supplier.ID);
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Contact(rdr.GetInt64(0), rdr.GetString(1),
                            (ContactDetailsType)rdr.GetInt32(2), rdr.GetString(3)));
                    }
                }
                finally
                {
                    tran.Rollback();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Deletes an individual record into table CONTACT_DETAILS
        /// </summary>
        internal static bool ContactDelete(Contact contact)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM CONTACT_DETAILS WHERE ID = @CONTACT_ID;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@CONTACT_ID", FbDbType.BigInt, contact.ID);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (true);
        }

        /// <summary>
        /// Inserts an individual record into table CONTACT_DETAILS
        /// </summary>
        internal static Contact ContactInsert(string contactName, ContactDetailsType contactType, string contactValue)
        {
            Contact Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spCONTACT_DETAILS_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipcontactName", FbDbType.VarChar, contactName);
                    AddParam(cmd, "@ipcontactType", FbDbType.Integer, (int)contactType);
                    AddParam(cmd, "@ipcontactValue", FbDbType.VarChar, contactValue);
                    AddParam(cmd, "@opiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    tran.Commit();
                    Result = new Contact(newID, contactName, contactType, contactValue);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table CONTACT_DETAILS
        /// </summary>
        internal static bool ContactUpdate(Contact item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spCONTACT_DETAILS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipContactName", FbDbType.VarChar, item.ContactName);
                    AddParam(cmd, "@ipContactType", FbDbType.Integer, item.ContactType);
                    AddParam(cmd, "@ipContactValue", FbDbType.VarChar, item.ContactValue);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Contact Details

        #region Internal SupplierProduct methods

        /// <summary>
        /// Select individual record from  table SUPPLIER_PRODUCTS
        /// </summary>
        internal static SupplierProduct SupplierProductSelect(Int64 Id)
        {
            SupplierProduct Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opSUPPLIER_ID, opNAME, opMAKE, opMODEL, opSKU, " +
                    "opNOTES, opIMAGE_ID, opASSET_TYPE, OPNET_COST " +
                    "FROM spSUPPLIER_PRODUCTS_GET(@ipId);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SupplierProduct(rdr.GetInt64(0),
                            SupplierSelect(rdr.GetInt64(1), db, tran), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetInt64(7), rdr.GetDecimal(9),
                            (AssetType)rdr.GetInt32(8));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static bool SupplierProductDelete(SupplierProduct product)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM SUPPLIER_PRODUCTS WHERE ID = @PRODUCT;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PRODUCT", FbDbType.BigInt, product.ID);
                    cmd.ExecuteNonQuery();
                    Result = true;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table SUPPLIER_PRODUCTS
        /// </summary>
        internal static SupplierProducts SupplierProductSelectAll(Supplier supplier)
        {
            SupplierProducts Result = new SupplierProducts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opSUPPLIER_ID, opNAME, opMAKE, opMODEL, opSKU, " +
                    "opNOTES, opIMAGE_ID, opASSET_TYPE, OPNET_COST " +
                    "FROM spSUPPLIER_PRODUCTS_ALL WHERE opSUPPLIER_ID = @SUPPLIER;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SUPPLIER", FbDbType.BigInt, supplier.ID);
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SupplierProduct(rdr.GetInt64(0), supplier,
                            rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                            rdr.GetString(5), rdr.GetString(6), rdr.GetInt64(7),
                            rdr.GetDecimal(9), (AssetType)rdr.GetInt32(8)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table SUPPLIER_PRODUCTS
        /// </summary>
        internal static SupplierProduct SupplierProductInsertUpdate(SupplierProduct item)
        {
            SupplierProduct Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSUPPLIER_PRODUCTS_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipSupplierId", FbDbType.BigInt, item.Supplier.ID);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipMake", FbDbType.VarChar, item.Make);
                    AddParam(cmd, "@ipModel", FbDbType.VarChar, item.Model);
                    AddParam(cmd, "@ipSku", FbDbType.VarChar, item.SKU);
                    AddParam(cmd, "@ipNotes", FbDbType.VarChar, item.Notes);
                    AddParam(cmd, "@IPNET_COST", FbDbType.Decimal, item.NetCost);
                    AddParam(cmd, "@ipImageId", FbDbType.BigInt, item.ImageId);
                    AddParam(cmd, "@ipAssetType", FbDbType.Integer, (int)item.AssetType);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal SupplierProduct methods

        #region Internal Supplier methods

        internal static void SupplierAddContactDetails(Supplier supplier, Contact contact)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSUPPLIER_TO_CONTACT_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipSUPPLIER_ID", FbDbType.BigInt, supplier.ID);
                    AddParam(cmd, "@ipCONTACT_ID", FbDbType.BigInt, contact.ID);
                    AddParam(cmd, "@OPNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@OPNEWID"].Value;

                    tran.Commit();
                    supplier.ClearContacts();
                }
                catch (Exception err)
                {
                    tran.Rollback();

                    if (!err.Message.Contains("store duplicate value (visible to active transactions) " +
                        "in unique index \"IDX_SUPPLIER_TO_CONTACT_UNQ"))
                        throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Select individual record from  table SUPPLIERS
        /// </summary>
        internal static Supplier SupplierSelect(Int64 Id)
        {
            Supplier Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opBUSINESS_NAME, opADDRESSLINE1, opADDRESSLINE2, opADDRESSLINE3, opCITY, " +
                    "opCOUNTY, opPOSTCODE, opCOUNTRY_ID, opSTATUS, opRELIABILITY, " +
                    "opAVERAGE_TURNAROUND, opWEBSITE " +
                        "FROM spSUPPLIERS_GET(@ipId);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Supplier(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetString(7), CountryGet(rdr.GetInt32(8), db, tran),
                            rdr.GetString(12), (SupplierStatus)rdr.GetInt32(9), rdr.GetInt32(10),
                            rdr.GetDouble(11));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Select individual record from  table SUPPLIERS
        /// </summary>
        internal static Supplier SupplierSelect(Int64 Id, FbConnection conn, FbTransaction tran)
        {
            Supplier Result = null;

            string SQL = "SELECT opID, opBUSINESS_NAME, opADDRESSLINE1, opADDRESSLINE2, opADDRESSLINE3, opCITY, " +
                "opCOUNTY, opPOSTCODE, opCOUNTRY_ID, opSTATUS, opRELIABILITY, " +
                "opAVERAGE_TURNAROUND, opWEBSITE " +
                    "FROM spSUPPLIERS_GET(@ipId);";
            FbDataReader rdr = null;
            FbCommand cmd = new FbCommand(SQL, conn, tran);
            try
            {
                AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    Result = new Supplier(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                        rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                        rdr.GetString(6), rdr.GetString(7), CountryGet(rdr.GetInt32(8), conn, tran),
                        rdr.GetString(12), (SupplierStatus)rdr.GetInt32(9), rdr.GetInt32(10),
                        rdr.GetDouble(11));
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table SUPPLIERS
        /// </summary>
        internal static Supplier SupplierInsert(string businessName, string addresslineOne,
            string addresslineTwo, string addresslineThree, string city, string county,
            string postcode, Country country, string website, SupplierStatus status,
            int reliability, double averageTurnaround)
        {
            Supplier Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSUPPLIERS_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipbusinessName", FbDbType.VarChar, 150, businessName);
                    AddParam(cmd, "@ipaddressline1", FbDbType.VarChar, 50, addresslineOne);
                    AddParam(cmd, "@ipaddressline2", FbDbType.VarChar, 50, addresslineTwo);
                    AddParam(cmd, "@ipaddressline3", FbDbType.VarChar, 50, addresslineThree);
                    AddParam(cmd, "@ipcity", FbDbType.VarChar, 50, city);
                    AddParam(cmd, "@ipcounty", FbDbType.VarChar, 50, county);
                    AddParam(cmd, "@ippostcode", FbDbType.VarChar, 15, postcode);
                    AddParam(cmd, "@ipcountryId", FbDbType.Integer, country.ID);
                    AddParam(cmd, "@ipWEBSITE", FbDbType.VarChar, 150, website);
                    AddParam(cmd, "@ipstatus", FbDbType.Integer, (int)status);
                    AddParam(cmd, "@ipreliability", FbDbType.Integer, reliability);
                    AddParam(cmd, "@ipaverageTurnaround", FbDbType.Numeric, averageTurnaround);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    tran.Commit();
                    Result = new Supplier(newID, businessName, addresslineOne, addresslineTwo,
                        addresslineThree, city, county, postcode, country, website, status,
                        reliability, averageTurnaround);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table SUPPLIERS
        /// </summary>
        internal static bool SupplierUpdate(Supplier item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSUPPLIERS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipBusinessName", FbDbType.VarChar, 150, item.BusinessName);
                    AddParam(cmd, "@ipAddressline1", FbDbType.VarChar, 50, item.Addressline1);
                    AddParam(cmd, "@ipAddressline2", FbDbType.VarChar, 50, item.Addressline2);
                    AddParam(cmd, "@ipAddressline3", FbDbType.VarChar, 50, item.Addressline3);
                    AddParam(cmd, "@ipCity", FbDbType.VarChar, 50, item.City);
                    AddParam(cmd, "@ipCounty", FbDbType.VarChar, 50, item.County);
                    AddParam(cmd, "@ipPostcode", FbDbType.VarChar, 15, item.Postcode);
                    AddParam(cmd, "@ipWEBSITE", FbDbType.VarChar, 150, item.Website);
                    AddParam(cmd, "@ipCountryId", FbDbType.Integer, item.Country);
                    AddParam(cmd, "@ipStatus", FbDbType.Integer, (int)item.Status);
                    AddParam(cmd, "@ipReliability", FbDbType.Integer, item.Reliability);
                    AddParam(cmd, "@ipAverageTurnaround", FbDbType.Numeric, item.AverageTurnaround);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table SUPPLIERS
        /// </summary>
        internal static Suppliers SupplierSelectAll()
        {
            Suppliers Result = new Suppliers();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opBUSINESS_NAME, opADDRESSLINE1, opADDRESSLINE2, opADDRESSLINE3, opCITY, " +
                        "opCOUNTY, opPOSTCODE, opCOUNTRY_ID, opWEBSITE, opSTATUS, opRELIABILITY, " +
                        "opAVERAGE_TURNAROUND " +
                        "FROM spSUPPLIERS_ALL;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Supplier(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6),
                            rdr.GetString(7), CountryGet(rdr.GetInt32(8), db, tran),
                            rdr.GetString(9), (SupplierStatus)rdr.GetInt32(10), rdr.GetInt32(11),
                            rdr.GetDouble(12)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal Supplier methods

        #region Internal StaffExpense methods

        /// <summary>
        /// Select individual record from  table STAFF_EXPENSES
        /// </summary>
        internal static StaffExpense StaffExpenseSelect(Int64 Id)
        {
            StaffExpense Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opSTAFF_ID, opDATE_CREATED, opEXPENSE_DATE, opLOCATION, opREASON, " +
                    "opEXPENSE_TYPE, opEXPENSE_AMOUNT, opEXPENSE_QUANTITY, opRECEIPT_IMAGE, opSTATUS, " +
                    "opAPPROVED_BY, opAPPROVED_DATE, opTAXPAID " +
                    "FROM spSTAFF_EXPENSES_GET(@ipId);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StaffExpense(rdr.GetInt64(0), rdr.GetInt64(1),
                            rdr.GetDateTime(2), rdr.GetDateTime(3), rdr.GetString(4),
                            rdr.GetString(5), (EmployeeExpenseType)rdr.GetInt32(6),
                            rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.GetString(9),
                            rdr.IsDBNull(13) ? 0 : rdr.GetDecimal(13),
                            (EmployeeExpenseStatus)rdr.GetInt64(10),
                            rdr.IsDBNull(11) ? -1 : rdr.GetInt64(11),
                            rdr.IsDBNull(12) ? DateTime.MinValue : rdr.GetDateTime(12));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void StaffExpenseChangeStatus(User approver,
            StaffExpense item, EmployeeExpenseStatus status)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE STAFF_EXPENSES SET APPROVED_BY = @APPROVED_STAFF, " +
                    "APPROVED_DATE = CURRENT_TIMESTAMP, STATUS = @STATUS WHERE ID = @EXPENSE_ID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@EXPENSE_ID", FbDbType.BigInt, item.Id);
                    AddParam(cmd, "@STATUS", FbDbType.Integer, (int)status);
                    AddParam(cmd, "@APPROVED_STAFF", FbDbType.BigInt, approver.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Updates/Saves individual record in table STAFF_EXPENSES
        /// </summary>
        internal static bool StaffExpenseUpdate(StaffExpense item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_EXPENSES_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.Id);
                    AddParam(cmd, "@ipStaffId", FbDbType.BigInt, item.StaffId);
                    AddParam(cmd, "@ipDateCreated", FbDbType.Date, item.DateCreated);
                    AddParam(cmd, "@ipExpenseDate", FbDbType.Date, item.ExpenseDate);
                    AddParam(cmd, "@ipLocation", FbDbType.VarChar, item.Location);
                    AddParam(cmd, "@ipReason", FbDbType.VarChar, item.Reason);
                    AddParam(cmd, "@ipExpenseType", FbDbType.Integer, item.ExpenseType);
                    AddParam(cmd, "@ipExpenseAmount", FbDbType.Decimal, item.ExpenseAmount);
                    AddParam(cmd, "@ipExpenseQuantity", FbDbType.Decimal, item.ExpenseQuantity);
                    AddParam(cmd, "@ipReceiptImage", FbDbType.Text, item.ReceiptImage);
                    AddParam(cmd, "@ipStatus", FbDbType.BigInt, item.Status);
                    AddParam(cmd, "@ipTaxPaid", FbDbType.Decimal, item.TaxPaid);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table STAFF_EXPENSES
        /// </summary>
        internal static bool StaffExpenseDelete(StaffExpense item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_EXPENSES_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.Id);
                    cmd.ExecuteNonQuery();
                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves total miles completed for a staff member since beginning of account year
        /// </summary>
        internal static decimal StaffExpenseTotalMileage(User user, DateTime accountYearStart)
        {
            decimal Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COALESCE(SUM(a.EXPENSE_QUANTITY), 0) FROM STAFF_EXPENSES a " +
                    "WHERE a.EXPENSE_TYPE = 8 AND a.EXPENSE_DATE >= @DATE AND " +
                    "a.STAFF_ID = @STAFF";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DATE", FbDbType.TimeStamp, accountYearStart);
                    AddParam(cmd, "@STAFF", FbDbType.BigInt, user.ID);

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetDecimal(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table STAFF_EXPENSES
        /// </summary>
        internal static StaffExpenses StaffExpenseSelectAll(User user)
        {
            StaffExpenses Result = new StaffExpenses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opSTAFF_ID, opDATE_CREATED, opEXPENSE_DATE, opLOCATION, opREASON, " +
                        "opEXPENSE_TYPE, opEXPENSE_AMOUNT, opEXPENSE_QUANTITY, opRECEIPT_IMAGE, opSTATUS, " +
                        "opAPPROVED_BY, opAPPROVED_DATE, opTAXPAID " +
                        "FROM spSTAFF_EXPENSES_ALL ";

                if (user != null)
                {
                    SQL += String.Format("WHERE opSTAFF_ID = {0}", user.ID);
                }

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffExpense(rdr.GetInt64(0), rdr.GetInt64(1),
                            rdr.GetDateTime(2), rdr.GetDateTime(3), rdr.GetString(4),
                            rdr.GetString(5), (EmployeeExpenseType)rdr.GetInt32(6),
                            rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.GetString(9),
                            rdr.IsDBNull(13) ? 0 : rdr.GetDecimal(13),
                            (EmployeeExpenseStatus)rdr.GetInt64(10),
                            rdr.IsDBNull(11) ? -1 : rdr.GetInt64(11),
                            rdr.IsDBNull(12) ? DateTime.MinValue : rdr.GetDateTime(12)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table STAFF_EXPENSES
        /// </summary>
        internal static StaffExpense StaffExpenseInsertUpdate(StaffExpense item)
        {
            StaffExpense Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_EXPENSES_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.Id);
                    AddParam(cmd, "@ipStaffId", FbDbType.BigInt, item.StaffId);
                    AddParam(cmd, "@ipDateCreated", FbDbType.Date, item.DateCreated);
                    AddParam(cmd, "@ipExpenseDate", FbDbType.Date, item.ExpenseDate);
                    AddParam(cmd, "@ipLocation", FbDbType.VarChar, item.Location);
                    AddParam(cmd, "@ipReason", FbDbType.VarChar, item.Reason);
                    AddParam(cmd, "@ipExpenseType", FbDbType.Integer, item.ExpenseType);
                    AddParam(cmd, "@ipExpenseAmount", FbDbType.Decimal, item.ExpenseAmount);
                    AddParam(cmd, "@ipExpenseQuantity", FbDbType.Decimal, item.ExpenseQuantity);
                    AddParam(cmd, "@ipReceiptImage", FbDbType.Text, item.ReceiptImage);
                    AddParam(cmd, "@ipStatus", FbDbType.BigInt, item.Status);
                    AddParam(cmd, "@ipTaxPaid", FbDbType.Decimal, item.TaxPaid);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    Result = item;
                    Result.Id = newID;
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal StaffExpense methods

        #region Shared Connections

        /// <summary>
        /// Initialises a connection
        /// </summary>
        //internal static void InitialiseConnection()
        //{
        //    _globalDatabase = ConnectToDatabase(ref _globalTransaction, DatabaseType.Standard);

        //    using (TimedLock.Lock(_globalLockObject))
        //    {
        //        _globalConnection = true;
        //    }
        //}

        /// <summary>
        /// Finalises a connection
        /// </summary>
        //internal static void FinaliseConnection()
        //{
        //    if (_globalTransaction == null)
        //        return;

        //    using (TimedLock.Lock(_globalLockObject))
        //    {
        //        _globalConnection = false;
        //    }

        //    _globalTransaction.Commit();
        //    CloseAndDispose(ref _globalDatabase, ref _globalTransaction);
        //}

        #endregion Shared Connections

        #region Hooks

        internal static Hooks HooksGet(User user)
        {
            Hooks Result = new Hooks();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.HOOK_ID FROM SYSTEM_HOOK_NOTIFICATIONS a " +
                    "WHERE a.USER_ID = @USER_ID";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Hook((HookEvent)rdr.GetInt32(0), user.ID));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void HookAdd(HookEvent eventName, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO SYSTEM_HOOK_NOTIFICATIONS (HOOK_ID, USER_ID) " +
                    "VALUES (@HOOK_ID, @USER_ID)";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@HOOK_ID", FbDbType.Integer, (int)eventName);
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void HookRemove(HookEvent eventName, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM SYSTEM_HOOK_NOTIFICATIONS WHERE HOOK_ID = @HOOK_ID " +
                    "AND USER_ID = @USER_ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@HOOK_ID", FbDbType.Integer, (int)eventName);
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void HookNotify(Users userNotificationList, string fromName, string fromEmail,
            string title, string message)
        {

        }

        #endregion Hooks

        #region Affiliated Sites

        internal static AffiliateProducts AffiliatedProductsGet(string countryCode, string affiliateID,
            int imageSize, string website)
        {
            AffiliateProducts Result = new AffiliateProducts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opSKU, opTITLE, opPRICE, opDISCOUNTPRICE, opDESCRIPTION, opSTOCKAVAILABILITY, " +
                    "opIMAGELINK, opPRODUCTLINK FROM WSP_AFFILIATE_PRODUCTS(@COUNTRY, @AFFILIATE_ID, @IMAGE_SIZE, @WEBSITE)";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@COUNTRY", FbDbType.VarChar, 2, countryCode);
                    AddParam(cmd, "@AFFILIATE_ID", FbDbType.VarChar, 50, affiliateID);
                    AddParam(cmd, "@IMAGE_SIZE", FbDbType.Integer, imageSize);
                    AddParam(cmd, "@WEBSITE", FbDbType.VarChar, 300, website);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AffiliateProduct(rdr.GetString(0), rdr.GetString(1), rdr.GetDecimal(2),
                            rdr.GetDecimal(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Saves a commission item to a member of staff's allocation
        /// </summary>
        /// <param name="splitCommission"></param>
        internal static void AffiliatedCommissionSave(User authorisingUser,
            PayAffiliateCommissionSettings commissionSettings, CommissionPaymentType paymentType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO AFFILIATE_COMMISSION_PAYMENTS (MEMBER_ID, PAYMENT_AMOUNT, DATE_PAID, " +
                    "EMPLOYEE_PAYING, PAYMENT_TYPE) VALUES (@MEMBER_ID, @PAYMENT_AMOUNT, @DATE_PAID, @EMPLOYEE_PAYING, " +
                    "@PAYMENT_TYPE)";

                foreach (AffiliateCommissionItem item in commissionSettings.CommissionItems)
                {
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, item.User.ID);
                        AddParam(cmd, "@PAYMENT_AMOUNT", FbDbType.Decimal, item.CommissionDue);
                        AddParam(cmd, "@DATE_PAID", FbDbType.TimeStamp, DateTime.Now);
                        AddParam(cmd, "@EMPLOYEE_PAYING", FbDbType.BigInt, authorisingUser.ID);
                        AddParam(cmd, "@PAYMENT_TYPE", FbDbType.Integer, (int)paymentType);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves commission for an invoice
        /// </summary>
        /// <param name="invoice"></param>
        /// <returns></returns>
        internal static AffiliateCommission AffiliatedCommissionGet(Invoice invoice)
        {
            AffiliateCommission Result = new AffiliateCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.COMMISSION_POOL_ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM STAFF_POOL_COMMISSION a WHERE a.INVOICE_ID = @INVOICE_ID ";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@INVOICE_ID", FbDbType.Integer, invoice.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AffiliateCommissionItem(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt32(2),
                            rdr.GetDateTime(3), rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6),
                            rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9),
                            rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves commission for a date range
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="isPaid"></param>
        /// <param name="isNotPaid"></param>
        /// <returns></returns>
        internal static AffiliateCommission AffiliatedCommissionGet(User user, DateTime from, DateTime to, bool isPaid,
            bool isNotPaid)
        {
            AffiliateCommission Result = new AffiliateCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, m.ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM AFFILIATE_COMMISSION a JOIN AFFILIATED_SITES afs ON (afs.ID = a.AFFILIATE_ID) " +
                    "JOIN WS_MEMBERS m ON (m.ID = afs.STAFF_ID) " +
                    "WHERE a.DATE_ALLOCATED >= @FROM_DATE AND a.DATE_ALLOCATED <= @TO_DATE ";

                if (isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID iN ('Y', 'N') ";
                else if (isPaid && !isNotPaid)
                    SQL += "AND a.IS_PAID = 'Y' ";
                else if (!isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID = 'N' ";

                if (user != null)
                    SQL += String.Format("AND afs.STAFF_ID = {0} ", user.ID);

                SQL += "ORDER BY a.DATE_ALLOCATED ";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@FROM_DATE", FbDbType.TimeStamp, from);
                    AddParam(cmd, "@TO_DATE", FbDbType.TimeStamp, to);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AffiliateCommissionItem(rdr.GetInt64(0), UserGet(rdr.GetInt64(1), db, tran),
                            rdr.GetInt32(2), rdr.GetDateTime(3), rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6),
                            rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9),
                            rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the user for an affiliate ID
        /// </summary>
        /// <param name="affiliateID"></param>
        /// <returns></returns>
        internal static User AffiliatedUserGet(string affiliateID)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT DISTINCT a.STAFF_ID FROM AFFILIATED_SITES a " +
                    "WHERE a.IS_DELETED = 'N' AND a.AFFILIATE_ID = @AFFILIATEID";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@AFFILIATEID", FbDbType.VarChar, 50, affiliateID);

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        return (UserGet(rdr.GetInt64(0), db, tran));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (null);
        }

        /// <summary>
        /// Get Users who can earn commission on affiliation
        /// </summary>
        /// <returns></returns>
        internal static Users AffiliatedGetUsers()
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT DISTINCT a.STAFF_ID FROM AFFILIATED_SITES a WHERE a.IS_DELETED = 'N'";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(UserGet(rdr.GetInt64(0), db, tran));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        internal static void AffiliateCommissionUpdate(AffiliateCommissionItem item, User authorising,
            Library.CommissionPaymentType paymentType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE AFFILIATE_COMMISSION SET IS_PAID = @PAID, DATE_PAID = @DATE_PAID WHERE ID = @ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PAID", FbDbType.Char, 1, item.IsPaid ? "Y" : "N");
                    AddParam(cmd, "@DATE_PAID", FbDbType.Date, item.DatePaid);
                    AddParam(cmd, "@ID", FbDbType.Integer, item.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "INSERT INTO AFFILIATE_COMMISSION_PAYMENTS (AFFILIATE_ID, PAYMENT_AMOUNT, DATE_PAID, EMPLOYEE_PAYING, " +
                    "PAYMENT_TYPE) VALUES (@AFFILIATE_ID, @PAYMENT_AMOUNT, @DATE_PAID, @EMPLOYEE_PAYING, @PAYMENT_TYPE)";

                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@AFFILIATE_ID", FbDbType.BigInt, item.User.ID);
                    AddParam(cmd, "@PAYMENT_AMOUNT", FbDbType.Decimal, item.CommissionDue);
                    AddParam(cmd, "@DATE_PAID", FbDbType.Date, item.DatePaid);
                    AddParam(cmd, "@EMPLOYEE_PAYING", FbDbType.BigInt, authorising.ID);
                    AddParam(cmd, "@PAYMENT_TYPE", FbDbType.Integer, (int)paymentType);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Adds a web click for an affiliate site
        /// </summary>
        /// <param name="affiliate"></param>
        /// <param name="?"></param>
        internal static void AffiliatedSiteWebClick(AffiliatedItem affiliate, string ipAddress)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO AFFILIATE_CLICKS (AFFILIATED_SITE_ID, CLICK_DATE, IP_ADDRESS) " +
                    "VALUES (@AFFILIATE_ID, CURRENT_TIMESTAMP, @IP_ADDRESS)";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@AFFILIATE_ID", FbDbType.BigInt, affiliate.ID);
                    AddParam(cmd, "@IP_ADDRESS", FbDbType.VarChar, 15, ipAddress);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Gets the affiliated item for the website
        /// </summary>
        /// <param name="urlReferrer"></param>
        /// <returns></returns>
        internal static AffiliatedItem AffiliatedSiteGet(string urlReferrer)
        {
            AffiliatedItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.STAFF_ID, a.AFFILIATE_ID, a.AFFILIATE_URL, a.AFFILIATE_PERCENTAGE, " +
                    "a.PRICE_PER_CLICK, a.IS_ACTIVE FROM AFFILIATED_SITES a WHERE (LOWER(a.AFFILIATE_URL) = @URL " +
                    "OR UPPER(a.AFFILIATE_ID) = @AFFILIATEID) AND a.IS_DELETED = 'N' AND a.IS_ACTIVE = 'Y'";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@URL", FbDbType.BigInt, urlReferrer.ToLower());
                    AddParam(cmd, "@AFFILIATEID", FbDbType.VarChar, 50, urlReferrer.ToUpper());

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new AffiliatedItem(rdr.GetInt64(0), UserGet(rdr.GetInt64(1), db, tran), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetDecimal(4), rdr.GetDecimal(5), rdr.GetString(6) == "Y" ? true : false);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Determines wether the affiliate id is unique or not
        /// </summary>
        /// <param name="affiliateID"></param>
        /// <returns></returns>
        internal static bool AffiliateIDIsUnique(AffiliatedItem affiliate, string affiliateID)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(a.AFFILIATE_ID) FROM AFFILIATED_SITES a WHERE a.ID <> @ID " +
                    "AND UPPER(a.AFFILIATE_ID) = @AFF_ID";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, affiliate.ID);
                    AddParam(cmd, "@AFF_ID", FbDbType.BigInt, affiliateID.ToUpper());

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0) == 0;
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves a list of affiliated sites for a user
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        internal static AffiliatedItems AffiliatedSitesGet(User user)
        {
            AffiliatedItems Result = new AffiliatedItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.STAFF_ID, a.AFFILIATE_ID, a.AFFILIATE_URL, a.AFFILIATE_PERCENTAGE, " +
                    "a.PRICE_PER_CLICK, a.IS_ACTIVE FROM AFFILIATED_SITES a WHERE a.STAFF_ID = @USER_ID AND a.IS_DELETED = 'N'";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AffiliatedItem(rdr.GetInt64(0), UserGet(rdr.GetInt64(1), db, tran), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetDecimal(4), rdr.GetDecimal(5), rdr.GetString(6) == "Y" ? true : false));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Creates an affiliated site
        /// </summary>
        /// <param name="affiliate"></param>
        internal static void AffiliatedSiteCreate(AffiliatedItem affiliate)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_AFFILIATED_SITE_CREATE";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipUSER_ID", FbDbType.BigInt, affiliate.User.ID);
                    AddParam(cmd, "@ipAFFILIATEID", FbDbType.VarChar, 50, affiliate.AffiliateID);
                    AddParam(cmd, "@ipAFFILIATE_URL", FbDbType.VarChar, 200, affiliate.Url);
                    AddParam(cmd, "@ipPERCENTAGE", FbDbType.Decimal, affiliate.Percentage);
                    AddParam(cmd, "@ipPER_CLICK", FbDbType.Decimal, affiliate.PricePerClick);
                    AddParam(cmd, "@opID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    affiliate.ID = (Int64)cmd.Parameters["@opID"].Value;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Updates an affiliated site details
        /// </summary>
        /// <param name="affiliate"></param>
        internal static void AffiliatedSiteUpdate(AffiliatedItem affiliate)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE AFFILIATED_SITES SET STAFF_ID = @STAFF_ID, AFFILIATE_ID = @AFF_ID, " +
                    "AFFILIATE_URL = @AFF_URL, AFFILIATE_PERCENTAGE = @PERCENTAGE, PRICE_PER_CLICK = @CLICK_PRICE, " +
                    "IS_ACTIVE = @ISACTIVE WHERE ID = @ID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@STAFF_ID", FbDbType.BigInt, affiliate.User.ID);
                    AddParam(cmd, "@AFF_ID", FbDbType.VarChar, 50, affiliate.AffiliateID);
                    AddParam(cmd, "@AFF_URL", FbDbType.VarChar, 200, affiliate.Url);
                    AddParam(cmd, "@PERCENTAGE", FbDbType.Decimal, affiliate.Percentage);
                    AddParam(cmd, "@CLICK_PRICE", FbDbType.Decimal, affiliate.PricePerClick);
                    AddParam(cmd, "@ISACTIVE", FbDbType.Char, 1, affiliate.Active ? "Y" : "N");
                    AddParam(cmd, "@ID", FbDbType.BigInt, affiliate.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Deletes an affilaite site, delete is soft delete by turning active to false
        /// </summary>
        /// <param name="affiliate"></param>
        internal static void AffiliatedSiteDelete(AffiliatedItem affiliate)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE AFFILIATED_SITES SET IS_DELETED = 'Y' WHERE ID = @ID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, affiliate.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Affiliated Sites

        #region Auto Update

        /// <summary>
        /// Executes all user defined updates based on rules
        /// </summary>
        internal static int AutoUpdateExecute(AutoUpdateRule rule, bool testOnly)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = testOnly ? rule.SQL : "SP_AUTO_UPDATE_EXECUTE";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    if (!testOnly)
                    {
                        PrepareCommand(cmd);
                    }

                    Result = cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    if (testOnly)
                        tran.Rollback();
                    else
                        tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns an individual user defined auto update item
        /// </summary>
        /// <param name="id"></param>
        internal static AutoUpdate AutoUpdateGet(Int64 id)
        {
            AutoUpdate Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.NAME, a.EXECUTE_SQL, a.EXEUTE_RUN_TIME, a.EXECUTE_COMPLETE, " +
                    "a.CREATED_BY, a.CREATED_DATE FROM AUTO_UPDATE_DATA a WHERE a.ID = @ID";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, id);

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new AutoUpdate(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetDateTime(3),
                            rdr.GetString(4) == "Y", UserGet(rdr.GetInt64(5), db, tran), rdr.GetDateTime(6));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves all auto update items
        /// </summary>
        /// <returns></returns>
        internal static AutoUpdates AutoUpdateGet()
        {
            AutoUpdates Result = new AutoUpdates();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.NAME, a.EXECUTE_SQL, a.EXEUTE_RUN_TIME, a.EXECUTE_COMPLETE, " +
                    "a.CREATED_BY, a.CREATED_DATE FROM AUTO_UPDATE_DATA a";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AutoUpdate(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetDateTime(3),
                            rdr.GetString(4) == "Y", UserGet(rdr.GetInt64(5), db, tran), rdr.GetDateTime(6)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Saves an auto update item
        /// </summary>
        /// <param name="autoUpdate"></param>
        internal static void AutoUpdateCreate(AutoUpdate autoUpdate)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spAUTO_UPDATE_DATA_INS";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 100, autoUpdate.Name);
                    AddParam(cmd, "@ipEXECUTE_SQL", FbDbType.VarChar, 8100, autoUpdate.SQL);
                    AddParam(cmd, "@ipEXEUTE_RUN_TIME", FbDbType.TimeStamp, autoUpdate.RunDate);
                    AddParam(cmd, "@EXECUTE_COMPLETE", FbDbType.Char, 1, "N");
                    AddParam(cmd, "@CREATED_BY", FbDbType.BigInt, autoUpdate.CreatedBy.ID);
                    AddParam(cmd, "@ipCREATED_DATE", FbDbType.Date, DateTime.Now);

                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    autoUpdate.ID = (Int64)cmd.Parameters["@opNEWID"].Value;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Deletes an auto update item
        /// </summary>
        /// <param name="autoUpdate"></param>
        internal static void AutoUpdateDelete(AutoUpdate autoUpdate)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM AUTO_UPDATE_DATA WHERE ID = @ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, autoUpdate.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Auto Update

        #region Auto Update Rules


        /// <summary>
        /// Returns all the items for a rule
        /// </summary>
        /// <param name="rule"></param>
        /// <returns></returns>
        internal static AutoUpdateItems AutoUpdateItemsGet(AutoUpdateRule rule)
        {
            AutoUpdateItems Result = new AutoUpdateItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = rule.Select;
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AutoUpdateItem(rdr.GetInt64(0), rdr.GetString(1)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves all auto update rules
        /// </summary>
        /// <returns></returns>
        internal static AutoUpdateRules AutoUpdateRulesGet()
        {
            AutoUpdateRules Result = new AutoUpdateRules();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.RULE_NAME, a.RULE_DESCRIPTION, a.SQL_SELECT, a.SQL_COLUMN_NAMES, " +
                    "a.SQL_COLUMN_PRIMARY, a.SQL_UPDATE, a.SQL_UPDATE_COLUMN_NAMES, a.SQL_UPDATE_COLUMN_DESCRIPTIONS, " +
                    "a.USE_MEMBER_LEVEL FROM AUTO_UPDATE_RULES a";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AutoUpdateRule(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8),
                            rdr.GetString(9) == "Y"));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates a saved rule
        /// </summary>
        /// <param name="rule"></param>
        internal static void AutoUpdateRulesSave(AutoUpdateRule rule)
        {
            throw new NotImplementedException();
        }

        #endregion Auto Update Rules

        #region Export / Import

        /// <summary>
        /// Returns import / export items for a specific table
        /// </summary>
        /// <returns></returns>
        internal static ExportableItems ImportExportGetConfig()
        {
            ExportableItems Result = new ExportableItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.TABLE_NAME, a.COLUMN_NAME, a.DESCRIPTION, a.OPTIONS " +
                    "FROM EXPORTABLE_CONTENT a";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ExportItem(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), (ImportExportOptions)rdr.GetInt64(4)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns import / export items for a specific table
        /// </summary>
        /// <param name="tableName"></param>
        /// <returns></returns>
        internal static ExportableItems ImportExportGetConfig(string tableName)
        {
            ExportableItems Result = new ExportableItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.TABLE_NAME, a.COLUMN_NAME, a.DESCRIPTION, a.OPTIONS " +
                    "FROM EXPORTABLE_CONTENT a WHERE a.TABLE_NAME = @TABLENAME";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TABLENAME", FbDbType.VarChar, 31, tableName);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ExportItem(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), (ImportExportOptions)rdr.GetInt64(4)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Export / Import

        #region Staff Commission

        internal static PaidCommission StaffCommissionPaymentsGet(User staffMember)
        {
            PaidCommission Result = new PaidCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.STAFF_MEMBER_ID, a.PAYMENT_AMOUNT, a.DATE_PAID, a.EMPLOYEE_PAYING, " +
                    "a.PAYMENT_TYPE, M.USERNAME FROM STAFF_COMMISSION_PAYMENTS a JOIN WS_MEMBERS M ON " +
                    "(M.ID = a.EMPLOYEE_PAYING) Where a.STAFF_MEMBER_ID = @STAFF";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@STAFF", FbDbType.BigInt, staffMember.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new PaidCommissionItem(rdr.GetInt64(0), staffMember, rdr.GetDecimal(2),
                            rdr.GetDateTime(3), rdr.GetInt64(4), (CommissionPaymentType)rdr.GetInt32(5), rdr.GetString(6)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves commission for an invoice
        /// </summary>
        /// <param name="invoice"></param>
        /// <returns></returns>
        internal static StaffCommission StaffCommissionClientGet(Invoice invoice)
        {
            StaffCommission Result = new StaffCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.STAFF_ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM STAFF_COMMISSION a WHERE a.INVOICE_ID = @INVOICE_ID ";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@INVOICE_ID", FbDbType.Integer, invoice.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffCommissionItem(rdr.GetInt64(0), UserGet(rdr.GetInt64(1), db, tran), rdr.GetInt32(2),
                            rdr.GetDateTime(3), rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6),
                            rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9),
                            rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves commission for a date range
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="isPaid"></param>
        /// <param name="isNotPaid"></param>
        /// <returns></returns>
        internal static StaffCommission StaffCommissionClientGet(StaffMember staff, DateTime from, DateTime to,
            bool isPaid, bool isNotPaid)
        {
            StaffCommission Result = new StaffCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.STAFF_ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM STAFF_COMMISSION a WHERE a.DATE_ALLOCATED >= @FROM_DATE AND a.DATE_ALLOCATED <= @TO_DATE ";

                if (isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID iN ('Y', 'N') ";
                else if (isPaid && !isNotPaid)
                    SQL += "AND a.IS_PAID = 'Y' ";
                else if (!isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID = 'N' ";

                if (staff != null)
                    SQL += String.Format("AND a.STAFF_ID = {0} ", staff.UserID);

                SQL += "ORDER BY a.DATE_ALLOCATED ";
                FbDataReader rdr = null;

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@FROM_DATE", FbDbType.TimeStamp, from);
                    AddParam(cmd, "@TO_DATE", FbDbType.TimeStamp, to);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffCommissionItem(rdr.GetInt64(0), UserGet(rdr.GetInt64(1), db, tran), rdr.GetInt32(2),
                            rdr.GetDateTime(3), rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6), rdr.GetDecimal(7),
                            rdr.GetDecimal(8), rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9), rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void StaffCommissionRebuildClientData(DateTime dateFrom, DateTime dateTo, bool replace)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_STAFF_ALLOCATE_COMM_DATE";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPDATEFROM", FbDbType.TimeStamp, dateFrom);
                    AddParam(cmd, "@IPTIMETO", FbDbType.TimeStamp, dateTo);
                    AddParam(cmd, "@IPREPLACE", FbDbType.Char, 1, replace ? "Y" : "N");

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="item"></param>
        internal static void StaffCommissionUpdate(StaffCommissionItem item, User authorising,
            Library.CommissionPaymentType paymentType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE STAFF_COMMISSION SET IS_PAID = @PAID, DATE_PAID = @DATE_PAID WHERE ID = @ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PAID", FbDbType.Char, 1, item.IsPaid ? "Y" : "N");
                    AddParam(cmd, "@DATE_PAID", FbDbType.Date, item.DatePaid);
                    AddParam(cmd, "@ID", FbDbType.Integer, item.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "INSERT INTO STAFF_COMMISSION_PAYMENTS (STAFF_MEMBER_ID, PAYMENT_AMOUNT, DATE_PAID, EMPLOYEE_PAYING, PAYMENT_TYPE) " +
                    "VALUES (@STAFF_MEMBER_ID, @PAYMENT_AMOUNT, @DATE_PAID, @EMPLOYEE_PAYING, @PAYMENT_TYPE)";

                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@STAFF_MEMBER_ID", FbDbType.BigInt, item.StaffMember.ID);
                    AddParam(cmd, "@PAYMENT_AMOUNT", FbDbType.Decimal, item.CommissionDue);
                    AddParam(cmd, "@DATE_PAID", FbDbType.Date, item.DatePaid);
                    AddParam(cmd, "@EMPLOYEE_PAYING", FbDbType.BigInt, authorising.ID);
                    AddParam(cmd, "@PAYMENT_TYPE", FbDbType.Integer, (int)paymentType);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves commission for an invoice
        /// </summary>
        /// <param name="invoice"></param>
        /// <returns></returns>
        internal static StaffCommission StaffCommissionPoolGet(Invoice invoice)
        {
            StaffCommission Result = new StaffCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.COMMISSION_POOL_ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM STAFF_POOL_COMMISSION a WHERE a.INVOICE_ID = @INVOICE_ID ";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@INVOICE_ID", FbDbType.Integer, invoice.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffCommissionItem(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt32(2), rdr.GetDateTime(3),
                            rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6), rdr.GetDecimal(7), rdr.GetDecimal(8),
                            rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9), rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves commission for a date range
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="isPaid"></param>
        /// <param name="isNotPaid"></param>
        /// <returns></returns>
        internal static StaffCommission StaffCommissionPoolGet(CommissionPool pool, DateTime from, DateTime to,
            bool isPaid, bool isNotPaid)
        {
            StaffCommission Result = new StaffCommission();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.COMMISSION_POOL_ID, a.INVOICE_ID, a.DATE_ALLOCATED, a.IS_PAID, " +
                    "a.PERCENTAGE_GIVEN, a.INVOICE_TOTAL, a.COMMISIONABLE_AMOUNT, a.COMMISSION_DUE, a.DATE_PAID, " +
                    "a.DATE_PAYMENT_DUE " +
                    "FROM STAFF_POOL_COMMISSION a WHERE a.DATE_ALLOCATED >= @FROM_DATE AND a.DATE_ALLOCATED <= @TO_DATE ";

                if (isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID iN ('Y', 'N') ";
                else if (isPaid && !isNotPaid)
                    SQL += "AND a.IS_PAID = 'Y' ";
                else if (!isPaid && isNotPaid)
                    SQL += "AND a.IS_PAID = 'N' ";

                if (pool != null)
                    SQL += String.Format("AND a.COMMISSION_POOL_ID = {0} ", pool.ID);

                SQL += "ORDER BY a.DATE_ALLOCATED ";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@FROM_DATE", FbDbType.TimeStamp, from);
                    AddParam(cmd, "@TO_DATE", FbDbType.TimeStamp, to);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffCommissionItem(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt32(2), rdr.GetDateTime(3),
                            rdr.GetString(4) == "Y", rdr.GetDecimal(5), rdr.GetDecimal(6), rdr.GetDecimal(7), rdr.GetDecimal(8),
                            rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9), rdr.GetDateTime(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Rebuilds all statistics for a given date range
        /// </summary>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="replace"></param>
        internal static void StaffCommissionRebuildPoolData(DateTime dateFrom, DateTime dateTo, bool replace)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_CALCULATE_POOL_COMM_DATES";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPDATEFROM", FbDbType.TimeStamp, dateFrom);
                    AddParam(cmd, "@IPTIMETO", FbDbType.TimeStamp, dateTo);
                    AddParam(cmd, "@IPREPLACE", FbDbType.Char, 1, replace ? "Y" : "N");

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Saves a commission item to a member of staff's allocation
        /// </summary>
        /// <param name="splitCommission"></param>
        internal static void StaffCommissionSave(User authorisingUser,
            PayCommissionSettings commissionSettings, CommissionPaymentType paymentType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO STAFF_COMMISSION_PAYMENTS (STAFF_MEMBER_ID, PAYMENT_AMOUNT, DATE_PAID, " +
                    "EMPLOYEE_PAYING, PAYMENT_TYPE) " +
                    "VALUES (@STAFF_MEMBER_ID, @PAYMENT_AMOUNT, @DATE_PAID, @EMPLOYEE_PAYING, @PAYMENT_TYPE)";
                FbCommand cmd;

                foreach (CommissionSplit splitItem in commissionSettings.SplitAllStaff)
                {
                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@STAFF_MEMBER_ID", FbDbType.BigInt, splitItem.Staff.UserID);
                        AddParam(cmd, "@PAYMENT_AMOUNT", FbDbType.Decimal, splitItem.CurrentAllocation);
                        AddParam(cmd, "@DATE_PAID", FbDbType.TimeStamp, DateTime.Now);
                        AddParam(cmd, "@EMPLOYEE_PAYING", FbDbType.BigInt, authorisingUser.ID);
                        AddParam(cmd, "@PAYMENT_TYPE", FbDbType.Integer, (int)paymentType);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }

                if (paymentType != CommissionPaymentType.Bonus)
                {
                    SQL = "UPDATE STAFF_POOL_COMMISSION SET IS_PAID = @PAID, DATE_PAID = @DATE_PAID WHERE ID = @ID;";

                    foreach (StaffCommissionItem item in commissionSettings.CommissionItems)
                    {
                        cmd = new FbCommand(SQL, db, tran);
                        try
                        {
                            AddParam(cmd, "@PAID", FbDbType.Char, 1, "Y");
                            AddParam(cmd, "@DATE_PAID", FbDbType.Date, DateTime.Now);
                            AddParam(cmd, "@ID", FbDbType.Integer, item.ID);

                            cmd.ExecuteNonQuery();
                        }
                        finally
                        {
                            CloseAndDispose(ref cmd);
                        }
                    }
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Staff Commission

        #region Staff Commission Pools

        /// <summary>
        /// Returns a collection of commission pools
        /// </summary>
        /// <returns>CommissionPools</returns>
        internal static CommissionPools StaffCommissionPoolsGet()
        {
            CommissionPools Result = new CommissionPools();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.ID, a.POOL_NAME, a.COMMISSION_RATE, a.LOCATION FROM COMMISSION_POOLS a";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        PaymentStatuses statuses = new PaymentStatuses();

                        string SQLStatuses = "SELECT a.ID, a.DESCRIPTION, a.INITIAL_PROCESS_STATUS, a.IS_PAID, " +
                            "a.PROVIDER_NAMESPACE, a.STATUS_TILL, a.STATUS_OFFICE, a.STATUS_ONLINE, a.CREATE_INVOICE, " +
                            "a.MEMBER_LEVEL " +
                            "FROM WS_PAYMENT_STATUS a JOIN PAYMENT_TO_POOL_TYPE ptpt ON (ptpt.PAYMENT_STATUS_ID = a.ID) " +
                            "WHERE ptpt.COMMISSION_POOL_ID = @POOL_ID";
                        FbDataReader rdrStatuses = null;
                        FbCommand cmdStatuses = new FbCommand(SQLStatuses, db, tran);
                        try
                        {
                            AddParam(cmdStatuses, "@POOL_ID", FbDbType.BigInt, rdr.GetInt64(0));

                            rdrStatuses = cmdStatuses.ExecuteReader();

                            while (rdrStatuses.Read())
                            {
                                statuses.Add(new PaymentStatus(rdrStatuses.GetInt32(0), rdrStatuses.GetString(1),
                                    rdrStatuses.GetInt32(2), rdrStatuses.GetString(3) == "Y",
                                    rdrStatuses.IsDBNull(4) ? String.Empty : rdrStatuses.GetString(4),
                                    rdrStatuses.GetString(5) == "Y", rdrStatuses.GetString(6) == "Y",
                                    rdrStatuses.GetString(7) == "Y",
                                    rdrStatuses.GetString(8) == "Y", (MemberLevel)rdr.GetInt32(9)));
                            }
                        }
                        finally
                        {
                            CloseAndDispose(ref cmdStatuses, ref rdrStatuses);
                        }

                        Result.Add(new CommissionPool(rdr.GetInt64(0), rdr.GetString(1), rdr.GetDecimal(2), statuses,
                            rdr.IsDBNull(3) ? null : StoreLocationGet(rdr.GetInt32(3), db, tran)));
                    }

                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Deletes a commission pool
        /// </summary>
        /// <param name="pool">pool to be deleted</param>
        internal static void StaffCommissionPoolsDelete(CommissionPool pool)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM COMMISSION_POOLS a WHERE a.ID = @ID;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, pool.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Creates a new commission pool
        /// </summary>
        /// <param name="pool">pool to be created</param>
        internal static void StaffCommissionPoolCreate(CommissionPool pool)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SPCOMMISSION_POOL_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 100, pool.Name);
                    AddParam(cmd, "@ipRATE", FbDbType.Decimal, pool.CommissionRate);
                    AddParam(cmd, "@ipLOCATION", FbDbType.Integer, pool.Location == null ||
                        pool.Location.ID == -1 ? DBNull.Value : (object)pool.Location.ID);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    pool.ID = (Int64)cmd.Parameters["@opNEWID"].Value;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Saves an existing commission pool
        /// </summary>
        /// <param name="pool"></param>
        internal static void StaffCommissionPoolSave(CommissionPool pool)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE COMMISSION_POOLS a SET a.POOL_NAME = @POOLNAME, a.COMMISSION_RATE = @RATE, " +
                    "a.LOCATION = @LOCATION WHERE a.ID = @ID;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@POOLNAME", FbDbType.VarChar, 100, pool.Name);
                    AddParam(cmd, "@RATE", FbDbType.Decimal, pool.CommissionRate);
                    AddParam(cmd, "@LOCATION", FbDbType.Integer, pool.Location == null ||
                        pool.Location.ID == -1 ? DBNull.Value : (object)pool.Location.ID);
                    AddParam(cmd, "@ID", FbDbType.BigInt, pool.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                if (pool.PaymentStatus.Count > 0)
                {
                    string currentIndexes = String.Empty;
                    bool first = true;

                    foreach (PaymentStatus status in pool.PaymentStatus)
                    {
                        if (first)
                        {
                            currentIndexes += status.ID.ToString();
                            first = false;
                        }
                        else
                        {
                            currentIndexes += String.Format(",{0}", status.ID.ToString());
                        }
                    }

                    SQL = String.Format("DELETE FROM PAYMENT_TO_POOL_TYPE a WHERE a.COMMISSION_POOL_ID = @POOL AND " +
                        "a.PAYMENT_STATUS_ID NOT IN ({0});", currentIndexes);

                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@POOL", FbDbType.BigInt, pool.ID);
                        AddParam(cmd, "@LIST", FbDbType.VarChar, currentIndexes);
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    SQL = "INSERT INTO PAYMENT_TO_POOL_TYPE (COMMISSION_POOL_ID, PAYMENT_STATUS_ID) " +
                        "VALUES (@COMMISSION_POOL_ID, @PAYMENT_STATUS_ID)";

                    foreach (PaymentStatus status in pool.PaymentStatus)
                    {
                        try
                        {
                            cmd = new FbCommand(SQL, db, tran);
                            try
                            {
                                AddParam(cmd, "@COMMISSION_POOL_ID", FbDbType.BigInt, pool.ID);
                                AddParam(cmd, "@PAYMENT_STATUS_ID", FbDbType.BigInt, status.ID);
                                cmd.ExecuteNonQuery();
                            }
                            finally
                            {
                                CloseAndDispose(ref cmd);
                            }
                        }
                        catch (Exception err)
                        {
                            if (!err.Message.Contains("attempt to store duplicate value"))
                                throw;
                        }

                    }
                }

                // if all successful then commit changes
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Staff Commission Pools

        #region Staff Members

        /// <summary>
        /// Gets the staff members manager
        /// </summary>
        /// <param name="user">User who's manager is requested</param>
        /// <returns>User object of manager, if there is one, otherwise null</returns>
        internal static User StaffMemberManagerGet(User staffMember)
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.MANAGER_ID FROM STAFF_REPORTING a WHERE a.STAFF_MEMBER_ID = @STAFF_ID";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);

                AddParam(cmd, "@STAFF_ID", FbDbType.BigInt, staffMember.ID);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = UserGet(rdr.GetInt64(0), db, tran);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Sets the manager for a member of staff
        /// </summary>
        /// <param name="staffMember"></param>
        /// <param name="manager"></param>
        internal static void StaffMemberManagerSet(User staffMember, User manager)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "UPDATE OR INSERT INTO STAFF_REPORTING (STAFF_MEMBER_ID, MANAGER_ID) " +
                        "VALUES (@STAFF_MEMBER, @MANAGER) MATCHING (STAFF_MEMBER_ID);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@STAFF_MEMBER", FbDbType.BigInt, staffMember.ID);
                        AddParam(cmd, "@MANAGER", FbDbType.BigInt, manager.ID);

                        cmd.ExecuteNonQuery();
                        tran.Commit();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Removes the staff members manager
        /// </summary>
        /// <param name="staffMember">Member of staff</param>
        internal static void StaffMemberManagerRemove(User staffMember)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "DELETE FROM STAFF_REPORTING WHERE STAFF_MEMBER_ID = @STAFF_MEMBER_ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@STAFF_MEMBER_ID", FbDbType.BigInt, staffMember.ID);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Returns a collection of users that report to the manager
        /// </summary>
        /// <param name="manager"></param>
        /// <returns>Users collection</returns>
        internal static Users StaffMemberManagerSubStaff(StaffMember manager)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.STAFF_MEMBER_ID FROM STAFF_REPORTING a WHERE a.MANAGER_ID = @MANAGER_ID";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@MANAGER_ID", FbDbType.BigInt, manager.UserID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(UserGet(rdr.GetInt64(0), db, tran));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Staff Members

        #region Internal StaffLeaveRequest methods

        /// <summary>
        /// Select individual record from  table STAFF_LEAVE
        /// </summary>
        internal static StaffLeaveRequest StaffLeaveRequestSelect(Int64 ID)
        {
            StaffLeaveRequest Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_REQUESTED, opDATE_FROM, opDATE_TO, opTOTAL_TIME, " +
                    "opAUTHORISED_BY, opGRANTED_BY, opNOTES, OPAPPROVED_DATE, opAUTHORISED_DATE, opSTATUS " +
                    "FROM spSTAFF_LEAVE_GET(@ipID);";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipID", FbDbType.BigInt, ID);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StaffLeaveRequest(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2),
                            rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetInt32(5),
                            rdr.GetInt64(6), rdr.GetInt64(7), rdr.GetString(8),
                            rdr.IsDBNull(9) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(9),
                            rdr.IsDBNull(10) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(10),
                            (LeaveOptions)rdr.GetInt64(11));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table STAFF_LEAVE
        /// </summary>
        internal static StaffLeaveRequest StaffLeaveRequestInsert(Int64 userID, DateTime dateRequested,
            DateTime dateFrom, DateTime dateTo, double totalTime, Int64 authorisedBy, Int64 grantedBy, string notes)
        {
            StaffLeaveRequest Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_LEAVE_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipuserID", FbDbType.BigInt, userID);
                    AddParam(cmd, "@ipdateRequested", FbDbType.Date, dateRequested);
                    AddParam(cmd, "@ipdateFrom", FbDbType.Date, dateFrom);
                    AddParam(cmd, "@ipdateTo", FbDbType.Date, dateTo);
                    AddParam(cmd, "@iptotalTime", FbDbType.Double, totalTime);
                    AddParam(cmd, "@ipauthorisedBy", FbDbType.BigInt, authorisedBy);
                    AddParam(cmd, "@ipgrantedBy", FbDbType.BigInt, grantedBy);
                    AddParam(cmd, "@ipnotes", FbDbType.VarChar, notes);
                    AddParam(cmd, "@opiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    Result = new StaffLeaveRequest(newID, userID, dateRequested, dateFrom, dateTo, totalTime,
                        authorisedBy, grantedBy, notes, DateTime.Now.AddYears(-10), DateTime.Now.AddYears(-1),
                        LeaveOptions.None);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table STAFF_LEAVE
        /// </summary>
        internal static bool StaffLeaveRequestUpdate(StaffLeaveRequest item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_LEAVE_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipDateRequested", FbDbType.Date, item.DateRequested);
                    AddParam(cmd, "@ipDateFrom", FbDbType.Date, item.DateFrom);
                    AddParam(cmd, "@ipDateTo", FbDbType.Date, item.DateTo);
                    AddParam(cmd, "@ipTotalTime", FbDbType.Double, item.TotalTime);
                    AddParam(cmd, "@ipAuthorisedBy", FbDbType.BigInt, item.AuthorisedBy);
                    AddParam(cmd, "@ipGrantedBy", FbDbType.BigInt, item.ApprovedBy);
                    AddParam(cmd, "@ipNotes", FbDbType.VarChar, item.Notes);
                    AddParam(cmd, "@ipSTATUS", FbDbType.BigInt, (Int64)item.Status);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table STAFF_LEAVE
        /// </summary>
        internal static bool StaffLeaveRequestDelete(StaffLeaveRequest item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_LEAVE_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table STAFF_LEAVE
        /// </summary>
        internal static StaffLeave StaffLeaveRequestSelectAll(User staffMember)
        {
            StaffLeave Result = new StaffLeave();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_REQUESTED, opDATE_FROM, opDATE_TO, opTOTAL_TIME, " +
                    "opAUTHORISED_BY, opGRANTED_BY, opNOTES, OPAPPROVED_DATE, opAUTHORISED_DATE, opSTATUS " +
                    "FROM spSTAFF_LEAVE_ALL WHERE opUSER_ID = @USER_ID;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, staffMember.ID);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffLeaveRequest(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2),
                            rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetDouble(5),
                            rdr.IsDBNull(6) ? -1 : rdr.GetInt64(6), rdr.IsDBNull(7) ? -1 : rdr.GetInt64(7), rdr.GetString(8),
                            rdr.IsDBNull(9) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(9),
                            rdr.IsDBNull(10) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(10),
                            (LeaveOptions)rdr.GetInt64(11)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static StaffLeave StaffLeaveRequestSelectAllApproval()
        {
            StaffLeave Result = new StaffLeave();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_REQUESTED, opDATE_FROM, opDATE_TO, opTOTAL_TIME, " +
                    "opAUTHORISED_BY, opGRANTED_BY, opNOTES, OPAPPROVED_DATE, opAUTHORISED_DATE, opSTATUS " +
                    "FROM spSTAFF_LEAVE_ALL WHERE opGRANTED_BY IS NULL OR opGRANTED_BY = -1;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffLeaveRequest(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2), rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetDouble(5),
                            rdr.IsDBNull(6) ? -1 : rdr.GetInt64(6), rdr.IsDBNull(7) ? -1 : rdr.GetInt64(7), rdr.GetString(8),
                            rdr.IsDBNull(9) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(9),
                            rdr.IsDBNull(10) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(10), (LeaveOptions)rdr.GetInt64(11)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static StaffLeave StaffLeaveRequestSelectAllAuthorisation()
        {
            StaffLeave Result = new StaffLeave();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_REQUESTED, opDATE_FROM, opDATE_TO, opTOTAL_TIME, " +
                    "opAUTHORISED_BY, opGRANTED_BY, opNOTES, OPAPPROVED_DATE, opAUTHORISED_DATE, opSTATUS " +
                    "FROM spSTAFF_LEAVE_ALL WHERE opAUTHORISED_BY IS NULL OR opAUTHORISED_BY = -1;";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffLeaveRequest(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2), rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetDouble(5),
                            rdr.IsDBNull(6) ? -1 : rdr.GetInt64(6), rdr.IsDBNull(7) ? -1 : rdr.GetInt64(7), rdr.GetString(8),
                            rdr.IsDBNull(9) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(9),
                            rdr.IsDBNull(10) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(10), (LeaveOptions)rdr.GetInt64(11)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table STAFF_LEAVE
        /// </summary>
        internal static int StaffLeaveRequestCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opCOUNT FROM spSTAFF_LEAVE_CNT;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table STAFF_LEAVE
        /// </summary>
        internal static StaffLeaveRequest StaffLeaveRequestInsertUpdate(StaffLeaveRequest item)
        {
            StaffLeaveRequest Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_LEAVE_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipDateRequested", FbDbType.Date, item.DateRequested);
                    AddParam(cmd, "@ipDateFrom", FbDbType.Date, item.DateFrom);
                    AddParam(cmd, "@ipDateTo", FbDbType.Date, item.DateTo);
                    AddParam(cmd, "@ipTotalTime", FbDbType.Double, item.TotalTime);
                    AddParam(cmd, "@ipAuthorisedBy", FbDbType.BigInt, item.AuthorisedBy);
                    AddParam(cmd, "@ipGrantedBy", FbDbType.BigInt, item.ApprovedBy);
                    AddParam(cmd, "@ipNotes", FbDbType.VarChar, item.Notes);
                    AddParam(cmd, "@opiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal StaffLeaveRequest methods

        #region Internal StaffMember methods

        /// <summary>
        /// Select individual record from  table STAFF_MEMBERS
        /// </summary>
        internal static StaffMember StaffMemberSelect(User staffMember)
        {
            StaffMember Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opUSER_ID, opTITLE, opLOCATION, opPART_TIME, opWEEKLY_HOURS, opPAYROLL_NUMBER, " +
                    "opPAY_PERIOD, opLEAVE_ENTITLEMENT, opENTITLEMENT_TYPE, opLEAVE_ACCRUES, opLEAVE_CARRY_OVER, " +
                    "opGENDER, opMARITAL_STATUS, opNATIONALITY, opDATE_OF_BIRTH, opEMERGENCY_CONTACT_NAME, " +
                    "opEMERGENCY_CONTACT_TELEPHONE, opEMERGENCY_CONTACT_RSHIP, opDL_NUMBER, opDL_EXPIRE, opTEL_HOME, " +
                    "opTEL_MOBILE, opTEL_WORK, opTEL_OTHER_1, opDATE_JOINED, opDATE_PROBATION_END, opDATE_PERMANENT, " +
                    "opPROPERTIES, opDL_NOTES, opLAST_UPDATED, opEMPLOYMENT_TYPE, opCOMMISSION_RATE, " +
                    "opMANAGER_COMMISSION_RATE " +
                    "FROM spSTAFF_MEMBERS_GET(@ipUserID);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, staffMember.ID);

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StaffMember(staffMember, rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3) == "Y", rdr.GetDecimal(4), rdr.GetString(5),
                            (PayPeriod)rdr.GetInt64(6), rdr.GetDecimal(7), rdr.GetString(8) == "Y",
                            rdr.GetString(9) == "Y", rdr.GetString(10) == "Y",
                            (GenderType)rdr.GetInt32(11), (MaritalStatus)rdr.GetInt32(12),
                            rdr.GetInt32(13), rdr.GetDateTime(14), rdr.GetString(15),
                            rdr.GetString(16), rdr.GetString(17), rdr.GetString(18),
                            rdr.GetDateTime(19), rdr.GetString(20),
                            rdr.GetString(21), rdr.GetString(22), rdr.GetString(23),
                            rdr.GetDateTime(24), rdr.GetDateTime(25),
                            rdr.GetDateTime(26), rdr.GetInt64(27), rdr.GetString(28),
                            rdr.GetDateTime(29), (EmploymentType)rdr.GetInt64(30),
                            rdr.GetDecimal(31), rdr.GetDecimal(32));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table STAFF_MEMBERS
        /// </summary>
        internal static bool StaffMemberUpdate(StaffMember item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_MEMBERS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipTitle", FbDbType.VarChar, item.Title);
                    AddParam(cmd, "@ipLocation", FbDbType.VarChar, item.Location);
                    AddParam(cmd, "@ipPartTime", FbDbType.Char, 1, item.PartTime ? "Y" : "N");
                    AddParam(cmd, "@ipWeeklyHours", FbDbType.Decimal, item.WeeklyHours);
                    AddParam(cmd, "@ipPayrollNumber", FbDbType.VarChar, item.PayrollNumber);
                    AddParam(cmd, "@ipPayPeriod", FbDbType.BigInt, (Int64)item.PayPeriod);
                    AddParam(cmd, "@ipLeaveEntitlement", FbDbType.Decimal, item.LeaveEntitlement);
                    AddParam(cmd, "@ipEntitlementType", FbDbType.Char, 1, item.EntitlementType ? "Y" : "N");
                    AddParam(cmd, "@ipLeaveAccrues", FbDbType.Char, 1, item.LeaveAccrues ? "Y" : "N");
                    AddParam(cmd, "@ipLeaveCarryOver", FbDbType.Char, 1, item.LeaveCarryOver ? "Y" : "N");
                    AddParam(cmd, "@ipGender", FbDbType.Integer, item.Gender);
                    AddParam(cmd, "@ipMaritalStatus", FbDbType.Integer, item.MaritalStatus);
                    AddParam(cmd, "@ipNationality", FbDbType.Integer, item.Nationality);
                    AddParam(cmd, "@ipDateOfBirth", FbDbType.Date, item.DateOfBirth);
                    AddParam(cmd, "@ipEmergencyContactName", FbDbType.VarChar, item.EmergencyContactName);
                    AddParam(cmd, "@ipEmergencyContactTelephone", FbDbType.VarChar, item.EmergencyContactTelephone);
                    AddParam(cmd, "@ipEmergencyContactRelationship", FbDbType.VarChar, item.EmergencyContactRelationship);
                    AddParam(cmd, "@ipDrivingLicenceNumber", FbDbType.VarChar, item.DrivingLicenceNumber);
                    AddParam(cmd, "@ipDrivingLicenceExpire", FbDbType.Date, item.DrivingLicenceExpire);
                    AddParam(cmd, "@ipDL_NOTES", FbDbType.VarChar, 200, item.DrivingLicenceNotes);
                    AddParam(cmd, "@ipTelephoneHome", FbDbType.VarChar, item.TelephoneHome);
                    AddParam(cmd, "@ipTelephoneMobile", FbDbType.VarChar, item.TelephoneMobile);
                    AddParam(cmd, "@ipTelephoneWork", FbDbType.VarChar, item.TelephoneWork);
                    AddParam(cmd, "@ipTelephoneOther", FbDbType.VarChar, item.TelephoneOther);
                    AddParam(cmd, "@ipDateJoined", FbDbType.Date, item.DateJoined);
                    AddParam(cmd, "@ipDateProbationEnd", FbDbType.Date, item.DateProbationEnd);
                    AddParam(cmd, "@ipDatePermanent", FbDbType.Date, item.DatePermanent);
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, item.Properties);
                    AddParam(cmd, "@ipEMPLOYMENT_TYPE", FbDbType.BigInt, (Int64)item.EmploymentType);
                    AddParam(cmd, "@ipCOMMISSION_RATE", FbDbType.Decimal, item.CommissionRate);
                    AddParam(cmd, "@ipMANAGER_COMMISSION_RATE", FbDbType.Decimal, item.ManagerCommissionRate);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                Result = true;
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table STAFF_MEMBERS
        /// </summary>
        internal static bool StaffMemberDelete(StaffMember item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_MEMBERS_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                Result = true;
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table STAFF_MEMBERS
        /// </summary>
        internal static StaffMembers StaffMemberSelectAll()
        {
            StaffMembers Result = new StaffMembers();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opUSER_ID, opTITLE, opLOCATION, opPART_TIME, opWEEKLY_HOURS, opPAYROLL_NUMBER, " +
                    "opPAY_PERIOD, opLEAVE_ENTITLEMENT, opENTITLEMENT_TYPE, opLEAVE_ACCRUES, opLEAVE_CARRY_OVER, " +
                    "opGENDER, opMARITAL_STATUS, opNATIONALITY, opDATE_OF_BIRTH, opEMERGENCY_CONTACT_NAME, " +
                    "opEMERGENCY_CONTACT_TELEPHONE, opEMERGENCY_CONTACT_RSHIP, opDL_NUMBER, opDL_EXPIRE, opTEL_HOME, " +
                    "opTEL_MOBILE, opTEL_WORK, opTEL_OTHER_1, opDATE_JOINED, opDATE_PROBATION_END, opDATE_PERMANENT, " +
                    "opPROPERTIES, opDL_NOTES, opLAST_UPDATED, opEMPLOYMENT_TYPE, opCOMMISSION_RATE, opMANAGER_COMMISSION_RATE " +
                    "FROM spSTAFF_MEMBERS_ALL;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffMember(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3) == "Y", rdr.GetDecimal(4), rdr.GetString(5),
                            (PayPeriod)rdr.GetInt64(6), rdr.GetDecimal(7), rdr.GetString(8) == "Y",
                            rdr.GetString(9) == "Y", rdr.GetString(10) == "Y",
                            (GenderType)rdr.GetInt32(11), (MaritalStatus)rdr.GetInt32(12), rdr.GetInt32(13),
                            rdr.GetDateTime(14), rdr.GetString(15),
                            rdr.GetString(16), rdr.GetString(17), rdr.GetString(18), rdr.GetDateTime(19), rdr.GetString(20),
                            rdr.GetString(21), rdr.GetString(22), rdr.GetString(23), rdr.GetDateTime(24), rdr.GetDateTime(25),
                            rdr.GetDateTime(26), rdr.GetInt64(27), rdr.GetString(28), rdr.GetDateTime(29),
                            (EmploymentType)rdr.GetInt64(30), rdr.GetDecimal(31), rdr.GetDecimal(32)));
                    }
                }
                finally
                {
                    tran.Rollback();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table STAFF_MEMBERS
        /// </summary>
        internal static int StaffMemberCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opCOUNT FROM spSTAFF_MEMBERS_CNT;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                }
                finally
                {
                    tran.Rollback();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table STAFF_MEMBERS
        /// </summary>
        internal static StaffMember StaffMemberInsertUpdate(StaffMember item)
        {
            StaffMember Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_MEMBERS_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipTitle", FbDbType.VarChar, item.Title);
                    AddParam(cmd, "@ipLocation", FbDbType.VarChar, item.Location);
                    AddParam(cmd, "@ipPartTime", FbDbType.Char, item.PartTime);
                    AddParam(cmd, "@ipWeeklyHours", FbDbType.Integer, item.WeeklyHours);
                    AddParam(cmd, "@ipPayrollNumber", FbDbType.VarChar, item.PayrollNumber);
                    AddParam(cmd, "@ipPayPeriod", FbDbType.BigInt, (Int64)item.PayPeriod);
                    AddParam(cmd, "@ipLeaveEntitlement", FbDbType.Integer, item.LeaveEntitlement);
                    AddParam(cmd, "@ipEntitlementType", FbDbType.Char, item.EntitlementType);
                    AddParam(cmd, "@ipLeaveAccrues", FbDbType.Char, item.LeaveAccrues);
                    AddParam(cmd, "@ipLeaveCarryOver", FbDbType.Char, item.LeaveCarryOver);
                    AddParam(cmd, "@ipGender", FbDbType.Integer, (int)item.Gender);
                    AddParam(cmd, "@ipMaritalStatus", FbDbType.Integer, item.MaritalStatus);
                    AddParam(cmd, "@ipNationality", FbDbType.Integer, item.Nationality);
                    AddParam(cmd, "@ipDateOfBirth", FbDbType.Date, item.DateOfBirth);
                    AddParam(cmd, "@ipEmergencyContactName", FbDbType.VarChar, item.EmergencyContactName);
                    AddParam(cmd, "@ipEmergencyContactTelephone", FbDbType.VarChar, item.EmergencyContactTelephone);
                    AddParam(cmd, "@ipEmergencyContactRelationship", FbDbType.VarChar, item.EmergencyContactRelationship);
                    AddParam(cmd, "@ipDrivingLicenceNumber", FbDbType.VarChar, item.DrivingLicenceNumber);
                    AddParam(cmd, "@ipDrivingLicenceExpire", FbDbType.Date, item.DrivingLicenceExpire);
                    AddParam(cmd, "@ipTelephoneHome", FbDbType.VarChar, item.TelephoneHome);
                    AddParam(cmd, "@ipTelephoneMobile", FbDbType.VarChar, item.TelephoneMobile);
                    AddParam(cmd, "@ipTelephoneWork", FbDbType.VarChar, item.TelephoneWork);
                    AddParam(cmd, "@ipTelephoneOther", FbDbType.VarChar, item.TelephoneOther);
                    AddParam(cmd, "@ipDateJoined", FbDbType.Date, item.DateJoined);
                    AddParam(cmd, "@ipDateProbationEnd", FbDbType.Date, item.DateProbationEnd);
                    AddParam(cmd, "@ipDatePermanent", FbDbType.Date, item.DatePermanent);
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, item.Properties);
                    AddParam(cmd, "@ipEMPLOYMENT_TYPE", FbDbType.BigInt, (Int64)item.EmploymentType);
                    AddParam(cmd, "@opuserID", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opUserID"].Value;

                    Result = item;
                    Result.UserID = newID;
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal StaffMember methods

        #region Internal StaffSickRecord methods

        /// <summary>
        /// Select individual record from  table STAFF_SICK_RECORDS
        /// </summary>
        internal static StaffSickRecord StaffSickRecordSelect(Int64 ID)
        {
            StaffSickRecord Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_STARTED, opDATE_FINISHED, opDATE_NOTIFIED, " +
                    "opRETURN_INTERVIEW_COMPLETED, " +
                    "opRETURN_INTERVIEWER, opNOTES, opREASON_CITED, opCERTIFICATE, opPRE_BOOKED, " +
                    "opPROPERTIES " +
                    "FROM spSTAFF_SICK_RECORDS_GET(@ipID);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipID", FbDbType.BigInt, ID);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StaffSickRecord(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2),
                            rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetString(5) == "Y",
                            rdr.GetInt64(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y",
                            rdr.GetString(10) == "Y", (SickOptions)rdr.GetInt64(11));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table STAFF_SICK_RECORDS
        /// </summary>
        internal static StaffSickRecord StaffSickRecordInsert(Int64 userID, DateTime dateStarted,
            DateTime dateNotified, string notes, string reasonCited, bool certificate,
            bool preBooked, Int64 userCreating)
        {
            StaffSickRecord Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_SICK_RECORDS_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipuser_ID", FbDbType.BigInt, userID);
                    AddParam(cmd, "@ipdate_Started", FbDbType.Date, dateStarted);
                    AddParam(cmd, "@ipDATE_FINISHED", FbDbType.Date, DateTime.MinValue);
                    AddParam(cmd, "@ipdate_Notified", FbDbType.Date, dateNotified);
                    AddParam(cmd, "@ipRETURN_INTERVIEW_COMPLETED", FbDbType.Char, "N");
                    AddParam(cmd, "@ipRETURN_INTERVIEWER", FbDbType.BigInt, userCreating);
                    AddParam(cmd, "@ipnotes", FbDbType.Text, notes);
                    AddParam(cmd, "@ipreason_Cited", FbDbType.VarChar, reasonCited);
                    AddParam(cmd, "@ipcertificate", FbDbType.Char, certificate ? "Y" : "N");
                    AddParam(cmd, "@ippre_Booked", FbDbType.Char, preBooked ? "Y" : "N");
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, 0);
                    AddParam(cmd, "@opNewiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opNewID"].Value;

                    Result = new StaffSickRecord(newID, userID, dateStarted, dateNotified,
                        notes, reasonCited, certificate, preBooked);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table STAFF_SICK_RECORDS
        /// </summary>
        internal static bool StaffSickRecordUpdate(StaffSickRecord item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_SICK_RECORDS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipDateStarted", FbDbType.Date, item.DateStarted);
                    AddParam(cmd, "@ipDateFinished", FbDbType.Date, item.DateFinished);
                    AddParam(cmd, "@ipDateNotified", FbDbType.Date, item.DateNotified);
                    AddParam(cmd, "@ipReturnInterviewCompleted", FbDbType.Char, item.ReturnInterviewCompleted ? "Y" : "N");
                    AddParam(cmd, "@ipReturnInterviewer", FbDbType.BigInt, item.ReturnInterviewer);
                    AddParam(cmd, "@ipNotes", FbDbType.Text, item.Notes);
                    AddParam(cmd, "@ipReasonCited", FbDbType.VarChar, item.ReasonCited);
                    AddParam(cmd, "@ipCertificate", FbDbType.Char, item.Certificate ? "Y" : "N");
                    AddParam(cmd, "@ipPreBooked", FbDbType.Char, item.PreBooked ? "Y" : "N");
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, item.Properties);
                    cmd.ExecuteNonQuery();

                    Result = true;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table STAFF_SICK_RECORDS
        /// </summary>
        internal static bool StaffSickRecordDelete(StaffSickRecord item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_SICK_RECORDS_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    Result = true;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table STAFF_SICK_RECORDS
        /// </summary>
        internal static StaffSickRecords StaffSickRecordSelectAll(User user)
        {
            StaffSickRecords Result = new StaffSickRecords();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT opID, opUSER_ID, opDATE_STARTED, opDATE_FINISHED, opDATE_NOTIFIED, " +
                    "opRETURN_INTERVIEW_COMPLETED, opRETURN_INTERVIEWER, opNOTES, opREASON_CITED, " +
                    "opCERTIFICATE, opPRE_BOOKED, opPROPERTIES " +
                    "FROM spSTAFF_SICK_RECORDS_ALL WHERE opUSER_ID = {0};", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffSickRecord(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2),
                            rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetString(5) == "Y", rdr.GetInt64(6),
                            rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y", rdr.GetString(10) == "Y",
                            (SickOptions)rdr.GetInt64(11)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table STAFF_SICK_RECORDS
        /// </summary>
        internal static StaffSickRecords StaffSickRecordPage(int page, int pageSize)
        {
            StaffSickRecords Result = new StaffSickRecords();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opUSER_ID, opDATE_STARTED, opDATE_FINISHED, opDATE_NOTIFIED, " +
                    "opRETURN_INTERVIEW_COMPLETED, opRETURN_INTERVIEWER, opNOTES, opREASON_CITED, " +
                    "opCERTIFICATE, opPRE_BOOKED, opPROPERTIES " +
                    "FROM spSTAFF_SICK_RECORDS_PAGE(@ipPAGESIZE, @ipPAGENUMBER);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, page);
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StaffSickRecord(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetDateTime(2),
                            rdr.GetDateTime(3), rdr.GetDateTime(4), rdr.GetString(5) == "Y", rdr.GetInt64(6),
                            rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y", rdr.GetString(10) == "Y",
                            (SickOptions)rdr.GetInt64(11)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table STAFF_SICK_RECORDS
        /// </summary>
        internal static int StaffSickRecordCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opCOUNT FROM spSTAFF_SICK_RECORDS_CNT;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table STAFF_SICK_RECORDS
        /// </summary>
        internal static StaffSickRecord StaffSickRecordInsertUpdate(StaffSickRecord item)
        {
            StaffSickRecord Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spSTAFF_SICK_RECORDS_IU";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipDateStarted", FbDbType.Date, item.DateStarted);
                    AddParam(cmd, "@ipDateFinished", FbDbType.Date, item.DateFinished);
                    AddParam(cmd, "@ipDateNotified", FbDbType.Date, item.DateNotified);
                    AddParam(cmd, "@ipReturnInterviewCompleted", FbDbType.Char, item.ReturnInterviewCompleted);
                    AddParam(cmd, "@ipReturnInterviewer", FbDbType.BigInt, item.ReturnInterviewer);
                    AddParam(cmd, "@ipNotes", FbDbType.Text, item.Notes);
                    AddParam(cmd, "@ipReasonCited", FbDbType.VarChar, item.ReasonCited);
                    AddParam(cmd, "@ipCertificate", FbDbType.Char, item.Certificate);
                    AddParam(cmd, "@ipPreBooked", FbDbType.Char, item.PreBooked);
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, item.Properties);
                    AddParam(cmd, "@opiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    Result = item;
                    Result.ID = newID;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal StaffSickRecord methods

#warning continue refactoring from here

        #region File Backups

        /// <summary>
        /// Get's the latest version of a backup file
        /// </summary>
        /// <param name="computerName">Computer Name</param>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="extension"></param>
        /// <returns></returns>
        internal static BackupFile BackupFileGetLatest(string computerName,
            string path, string name, string extension)
        {
            BackupFile Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 1 a.ID, a.FILE_NAME, a.FILE_EXTENSION, a.FILE_VERSION, a.FILE_PATH, " +
                        "a.FILE_CRC, a.FILE_SIZE, a.COMPUTER_NAME, a.USER_ID, a.FILE_DATE_UPDATED " +
                        "FROM FILE_BACKUP_STORE a WHERE a.FILE_NAME = @FILENAME AND a.FILE_EXTENSION = @FILEEXTENSION " +
                        "AND a.FILE_PATH = @FILEPATH AND a.COMPUTER_NAME = @COMPNAME ORDER BY a.FILE_VERSION DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FILENAME", FbDbType.VarChar, 250, name);
                    AddParam(cmd, "@FILEEXTENSION", FbDbType.VarChar, 100, extension);
                    AddParam(cmd, "@FILEPATH", FbDbType.VarChar, 1000, path);
                    AddParam(cmd, "@COMPNAME", FbDbType.VarChar, 100, computerName);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new BackupFile(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(4),
                            rdr.GetInt32(3), rdr.GetString(5), rdr.GetString(7), rdr.GetInt64(6), rdr.GetDateTime(9));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Saves a copy of a backup file
        /// </summary>
        /// <param name="file">file object to save</param>
        internal static void BackupFileSave(BackupFile file, string contents)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "INSERT INTO FILE_BACKUP_STORE (FILE_NAME, FILE_EXTENSION, FILE_VERSION, FILE_PATH, " +
                        "FILE_CRC, FILE_CONTENTS, FILE_SIZE, COMPUTER_NAME, USER_ID, FILE_DATE_UPDATED) VALUES ( " +
                        "@FILENAME, @FILEEXTENSION, @FILEVERSION, @FILEPATH, @FILECRC, @FILECONTENTS, " +
                        "@FILESIZE, @COMPUTERNAME, @USERID, @FILEDATEUPDATED);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FILENAME", FbDbType.VarChar, 250, file.FileName);
                    AddParam(cmd, "@FILEEXTENSION", FbDbType.VarChar, 100, file.FileExtension);
                    AddParam(cmd, "@FILEVERSION", FbDbType.BigInt, file.Version);
                    AddParam(cmd, "@FILEPATH", FbDbType.VarChar, 1000, file.FilePath);
                    AddParam(cmd, "@FILECRC", FbDbType.VarChar, 100, file.CRC);
                    AddParam(cmd, "@FILECONTENTS", FbDbType.Text, contents);
                    AddParam(cmd, "@FILESIZE", FbDbType.BigInt, file.Size);
                    AddParam(cmd, "@COMPUTERNAME", FbDbType.VarChar, 100, file.ComputerName);
                    AddParam(cmd, "@USERID", FbDbType.BigInt, 0);
                    AddParam(cmd, "@FILEDATEUPDATED", FbDbType.TimeStamp, file.LastUpdated);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves the contents of the backed up file
        /// </summary>
        /// <param name="file">BackupFile object</param>
        /// <returns>Base64 Encoded Contents of the file</returns>
        internal static string BackupFileGetContents(BackupFile file)
        {
            string Result = String.Empty;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.FILE_CONTENTS " +
                        "FROM FILE_BACKUP_STORE a WHERE a.ID = @FILEID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FILEID", FbDbType.BigInt, file.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetString(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves all previous versions of a file
        /// </summary>
        /// <param name="file">BackupFile object</param>
        /// <returns>Files collection of all previous versions</returns>
        internal static Files BackupFileGetVersions(BackupFile file)
        {
            Files Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.FILE_NAME, a.FILE_EXTENSION, a.FILE_VERSION, a.FILE_PATH, " +
                        "a.FILE_CRC, a.FILE_SIZE, a.COMPUTER_NAME, a.USER_ID, a.FILE_DATE_UPDATED " +
                        "FROM FILE_BACKUP_STORE a WHERE a.FILE_NAME = @FILENAME AND a.FILE_EXTENSION = @FILEEXTENSION " +
                        "AND a.FILE_PATH = @FILEPATH AND a.COMPUTER_NAME = @COMPNAME AND a.FILE_VERSION < @VERSION " +
                        "ORDER BY a.FILE_VERSION";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FILENAME", FbDbType.VarChar, 250, file.FileName);
                    AddParam(cmd, "@FILEEXTENSION", FbDbType.VarChar, 100, file.FileExtension);
                    AddParam(cmd, "@FILEPATH", FbDbType.VarChar, 1000, file.FilePath);
                    AddParam(cmd, "@COMPNAME", FbDbType.VarChar, 100, file.ComputerName);
                    AddParam(cmd, "@VERSION", FbDbType.Integer, file.Version);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new BackupFile(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(4),
                            rdr.GetInt32(3), rdr.GetString(5), rdr.GetString(7), rdr.GetInt64(6), rdr.GetDateTime(9)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion File Backups

        #region ModuleClass Documentation

        #region Internal ModuleClass methods

        /// <summary>
        /// select alll classes for a module
        /// </summary>
        /// <param name="module"></param>
        /// <returns></returns>
        internal static ModuleClasses ModuleClassSelect(ModuleName module)
        {
            ModuleClasses Result = new ModuleClasses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, MODULE_ID, NAMESPACE, NAME, DESCRIPTION, EXAMPLE_USAGE, IS_PRIMARY " +
                        "FROM MOD_CLASS WHERE MODULE_ID = @MODULE_ID ORDER BY NAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MODULE_ID", FbDbType.BigInt, module.ID);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleClass(rdr.GetInt64(0), rdr.GetString(6) == "Y", rdr.GetInt64(1),
                            rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
		/// Select individual record from  table MOD_CLASS
		/// </summary>
		internal static ModuleClass ModuleClassSelect(Int64 Id)
        {
            ModuleClass Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opMODULE_ID, opNAMESPACE, opNAME, opDESCRIPTION, opEXAMPLE_USAGE, opPRIMARY " +
                        "FROM spMOD_CLASS_GET(@ipId) ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new ModuleClass(rdr.GetInt64(0), rdr.GetString(6) == "Y", rdr.GetInt64(1),
                            rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table MOD_CLASS
        /// </summary>
        internal static ModuleClass ModuleClassInsert(Int64 moduleId,
            bool isPrimary,
            string moduleNamespace, string name, string description,
            string exampleUsage)
        {
            ModuleClass Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipmoduleId", FbDbType.BigInt, moduleId);
                    AddParam(cmd, "@ipPRIMARY", FbDbType.Char, 1, isPrimary ? "Y" : "N");
                    AddParam(cmd, "@ipnamespace", FbDbType.VarChar, moduleNamespace);
                    AddParam(cmd, "@ipname", FbDbType.VarChar, name);
                    AddParam(cmd, "@ipdescription", FbDbType.Text, description);
                    AddParam(cmd, "@ipexampleUsage", FbDbType.Text, exampleUsage);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = new ModuleClass(newID, isPrimary, moduleId, moduleNamespace, name, description, exampleUsage);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table MOD_CLASS
        /// </summary>
        internal static bool ModuleClassUpdate(ModuleClass item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipModuleId", FbDbType.BigInt, item.ModuleID);
                    AddParam(cmd, "@ipNamespace", FbDbType.VarChar, item.Namespace);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@ipExampleUsage", FbDbType.Text, item.ExampleUsage);
                    AddParam(cmd, "@ipISPRIMARY", FbDbType.Char, 1, item.IsPrimary ? "Y" : "N");
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table MOD_CLASS
        /// </summary>
        internal static bool ModuleClassDelete(ModuleClass item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table MOD_CLASS
        /// </summary>
        internal static ModuleClasses ModuleClassSelectAll()
        {
            ModuleClasses Result = new ModuleClasses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opMODULE_ID, opNAMESPACE, opNAME, opDESCRIPTION, opEXAMPLE_USAGE, opIS_PRIMARY " +
                        "FROM spMOD_CLASS_PAGE(@ipPAGESIZE, @ipPAGENUMBER) ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, int.MaxValue);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, 1);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleClass(rdr.GetInt64(0), rdr.GetString(6) == "Y", rdr.GetInt64(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table MOD_CLASS
        /// </summary>
        internal static ModuleClasses ModuleClassPage(int page, int pageSize)
        {
            ModuleClasses Result = new ModuleClasses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opMODULE_ID, opNAMESPACE, opNAME, opDESCRIPTION, opEXAMPLE_USAGE, opIS_PRIMARY " +
                        "FROM spMOD_CLASS_PAGE(@ipPAGESIZE, @ipPAGENUMBER) ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, page);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleClass(rdr.GetInt64(0), rdr.GetString(6) == "Y", rdr.GetInt64(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table MOD_CLASS
        /// </summary>
        internal static int ModuleClassCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opCOUNT " +
                        "FROM spMOD_CLASS_CNT;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table MOD_CLASS
        /// </summary>
        internal static ModuleClass ModuleClassInsertUpdate(ModuleClass item)
        {
            ModuleClass Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipModuleId", FbDbType.BigInt, item.ModuleID);
                    AddParam(cmd, "@ipNamespace", FbDbType.VarChar, item.Namespace);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@ipExampleUsage", FbDbType.Text, item.ExampleUsage);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    tran.Commit();

                    CloseAndDispose(ref cmd);

                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal ModuleClass methods

        #region Internal ModuleClassMember methods

        /// <summary>
		/// Select individual record from  table MOD_CLASS_MEMBER
		/// </summary>
        internal static ModuleMember ModuleClassMemberSelect(Int64 Id)
        {
            ModuleMember Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opCLASS_ID, opMEMBER_PROPERTIES, opNAME, opDESCRIPTION, opEXCEPTIONS, " +
                        "opEXAMPLE_USAGE, opRETURN_VALUE, opRETURN_VALUE_DESC " +
                        "FROM spMOD_CLASS_MEMBER_GET(@ipId);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new ModuleMember(rdr.GetInt64(0), rdr.GetInt64(1), (ModuleProperties)rdr.GetInt64(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetString(7), rdr.GetString(8));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Select individual record from  table MOD_CLASS_MEMBER
        /// </summary>
        internal static ModuleMembers ModuleClassMemberSelect(ModuleClass moduleClass)
        {
            ModuleMembers Result = new ModuleMembers();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, CLASS_ID, MEMBER_PROPERTIES, NAME, DESCRIPTION, EXCEPTIONS, " +
                        "EXAMPLE_USAGE, RETURN_VALUE, RETURN_VALUE_DESC " +
                        "FROM MOD_CLASS_MEMBER WHERE CLASS_ID = @CLASS_ID ORDER BY NAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@CLASS_ID", FbDbType.BigInt, moduleClass.ID);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleMember(rdr.GetInt64(0), rdr.GetInt64(1), (ModuleProperties)rdr.GetInt64(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetString(7), rdr.GetString(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table MOD_CLASS_MEMBER
        /// </summary>
        internal static ModuleMember ModuleClassMemberInsert(Int64 classId, ModuleProperties memberProperties,
            string name, string description, string exceptions, string exampleUsage, string returnValue,
            string returnValueDesc)
        {
            ModuleMember Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipclassId", FbDbType.BigInt, classId);
                    AddParam(cmd, "@ipmemberProperties", FbDbType.BigInt, (Int64)memberProperties);
                    AddParam(cmd, "@ipname", FbDbType.VarChar, name);
                    AddParam(cmd, "@ipdescription", FbDbType.Text, description);
                    AddParam(cmd, "@ipexceptions", FbDbType.Text, exceptions);
                    AddParam(cmd, "@ipexampleUsage", FbDbType.Text, exampleUsage);
                    AddParam(cmd, "@ipreturnValue", FbDbType.VarChar, returnValue);
                    AddParam(cmd, "@ipReturnValueDesc", FbDbType.VarChar, 5000, returnValueDesc);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = new ModuleMember(newID, classId, memberProperties, name, description, exceptions, exampleUsage, returnValue, returnValueDesc);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table MOD_CLASS_MEMBER
        /// </summary>
        internal static bool ModuleClassMemberUpdate(ModuleMember item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipClassId", FbDbType.BigInt, item.ClassID);
                    AddParam(cmd, "@ipMemberProperties", FbDbType.BigInt, (Int64)item.Properties);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@ipExceptions", FbDbType.Text, item.Exceptions);
                    AddParam(cmd, "@ipExampleUsage", FbDbType.Text, item.ExampleUsage);
                    AddParam(cmd, "@ipReturnValue", FbDbType.VarChar, item.ReturnValue);
                    AddParam(cmd, "@ipReturnValueDesc", FbDbType.VarChar, 5000, item.ReturnValueDescription);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table MOD_CLASS_MEMBER
        /// </summary>
        internal static bool ModuleClassMemberDelete(ModuleMember item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table MOD_CLASS_MEMBER
        /// </summary>
        internal static ModuleMembers ModuleClassMemberSelectAll()
        {
            ModuleMembers Result = new ModuleMembers();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opCLASS_ID, opMEMBER_PROPERTIES, opNAME, opDESCRIPTION, opEXCEPTIONS, " +
                        "opEXAMPLE_USAGE, opRETURN_VALUE, opRETURN_VALUE_DESC " +
                        "FROM spMOD_CLASS_MEMBER_ALL ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleMember(rdr.GetInt64(0), rdr.GetInt64(1), (ModuleProperties)rdr.GetInt64(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetString(7), rdr.GetString(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table MOD_CLASS_MEMBER
        /// </summary>
        internal static ModuleMembers ModuleClassMemberPage(int page, int pageSize)
        {
            ModuleMembers Result = new ModuleMembers();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opCLASS_ID, opMEMBER_PROPERTIES, opNAME, opDESCRIPTION, opEXCEPTIONS, " +
                        "opEXAMPLE_USAGE, opRETURN_VALUE, opRETURN_VALUE_DESC " +
                        "FROM spMOD_CLASS_MEMBER_PAGE(@ipPAGESIZE, @ipPAGENUMBER) ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, page);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleMember(rdr.GetInt64(0), rdr.GetInt64(1), (ModuleProperties)rdr.GetInt64(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5),
                            rdr.GetString(6), rdr.GetString(7), rdr.GetString(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table MOD_CLASS_MEMBER
        /// </summary>
        internal static int ModuleClassMemberCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opCOUNT " +
                        "FROM spMOD_CLASS_MEMBER_CNT;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table MOD_CLASS_MEMBER
        /// </summary>
        internal static void ModuleClassMemberInsertUpdate(ModuleMember item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipClassId", FbDbType.BigInt, item.ClassID);
                    AddParam(cmd, "@ipMemberProperties", FbDbType.BigInt, (ModuleProperties)item.Properties);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@ipExceptions", FbDbType.Text, item.Exceptions);
                    AddParam(cmd, "@ipExampleUsage", FbDbType.Text, item.ExampleUsage);
                    AddParam(cmd, "@ipReturnValue", FbDbType.VarChar, item.ReturnValue);
                    AddParam(cmd, "@ipReturnValueDesc", FbDbType.VarChar, 5000, item.ReturnValueDescription);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    item.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Internal ClassMember methods

        #region Internal ClassMemberParameter methods

        /// <summary>
        /// Select individual record from  table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static ModuleParameter ModuleClassMemberParameterSelect(Int64 Id)
        {
            ModuleParameter Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, CLASS_MEMBER_ID, NAME, PROPERTIES, PARAMETER_TYPE, DESCRIPTION, PARAM_TYPE, EXAMPLE_USAGE, DEFAULT_VALUE, SORT_ORDER " +
                        "FROM MOD_CLASS_MEMBER_PARAMETERS WHERE ID = @ipId;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new ModuleParameter(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetString(2), (ModuleProperties)rdr.GetInt64(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetInt32(9));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Select all records from  table MOD_CLASS_MEMBER_PARAMETERS for a Module Member
        /// </summary>
        internal static ModuleParameters ModuleClassMemberParameterSelect(ModuleMember member)
        {
            ModuleParameters Result = new ModuleParameters();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, CLASS_MEMBER_ID, NAME, PROPERTIES, PARAMETER_TYPE, DESCRIPTION, " +
                        "PARAM_TYPE, EXAMPLE_USAGE, DEFAULT_VALUE, SORT_ORDER " +
                        "FROM MOD_CLASS_MEMBER_PARAMETERS WHERE CLASS_MEMBER_ID = @MemberId ORDER BY SORT_ORDER;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MemberId", FbDbType.BigInt, member.ID);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleParameter(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetString(2),
                            (ModuleProperties)rdr.GetInt64(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                            rdr.GetString(8), rdr.GetInt32(9)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static ModuleParameter ModuleClassMemberParameterInsert(Int64 classMemberId, string name,
            ModuleProperties properties, int parameterType, string description, string paramType,
            string exampluUsage, string defaultValue, int sortOrder)
        {
            ModuleParameter Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_PARAMS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipclassMemberId", FbDbType.BigInt, classMemberId);
                    AddParam(cmd, "@ipname", FbDbType.VarChar, name);
                    AddParam(cmd, "@ipproperties", FbDbType.BigInt, (Int64)properties);
                    AddParam(cmd, "@ipparameterType", FbDbType.Integer, parameterType);
                    AddParam(cmd, "@ipdescription", FbDbType.Text, description);
                    AddParam(cmd, "@ipparamType", FbDbType.VarChar, 100, paramType);
                    AddParam(cmd, "@ipExampleUsage", FbDbType.Text, exampluUsage);
                    AddParam(cmd, "@ipDEFAULT_VALUE", FbDbType.VarChar, 100, defaultValue);
                    AddParam(cmd, "@ipSORT_ORDER", FbDbType.Integer, sortOrder);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = new ModuleParameter(newID, classMemberId, name, properties, parameterType, description,
                        paramType, exampluUsage, defaultValue, sortOrder);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static bool ModuleClassMemberParameterUpdate(ModuleParameter item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_PARM_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipClassMemberId", FbDbType.BigInt, item.ClassMemberID);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, 250, item.Name);
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, (Int64)item.Properties);
                    AddParam(cmd, "@ipParameterType", FbDbType.Integer, item.ParameterType);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@ipPARAM_TYPE", FbDbType.VarChar, 100, item.ParamType);
                    AddParam(cmd, "@ipEXAMPLE_USAGE", FbDbType.Text, item.ExampleUsage);
                    AddParam(cmd, "@ipDEFAULT_VALUE", FbDbType.VarChar, 100, item.DefaultValue);
                    AddParam(cmd, "@ipSORT_ORDER", FbDbType.Integer, item.SortOrder);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static bool ModuleClassMemberParameterDelete(ModuleParameter item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_PARAMETERS_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static ModuleParameters ModuleClassMemberParameterSelectAll()
        {
            ModuleParameters Result = new ModuleParameters();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, CLASS_MEMBER_ID, NAME, PROPERTIES, PARAMETER_TYPE, DESCRIPTION, PARAM_TYPE, " +
                        "EXAMPLE_USAGE, DEFAULT_VALUE, SORT_ORDER " +
                        "FROM MOD_CLASS_MEMBER_PARAMETERS ORDER BY SORT_ORDER;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleParameter(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetString(2),
                            (ModuleProperties)rdr.GetInt64(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6),
                            rdr.GetString(7), rdr.GetString(8), rdr.GetInt32(9)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static ModuleParameters ModuleClassMemberParameterPage(int page, int pageSize)
        {
            ModuleParameters Result = new ModuleParameters();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opCLASS_MEMBER_ID, opNAME, opPROPERTIES, opPARAMETER_TYPE, " +
                        "opDESCRIPTION, opPARAMTYPE, opEXAMPLEUSAGE, DEFAULT_VALUE, SORT_ORDER " +
                        "FROM spMOD_CLASS_MEMBER_PARAMS_PAGE(@ipPAGESIZE, @ipPAGENUMBER) ORDER BY SORT_ORDER;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, page);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleParameter(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetString(2),
                            (ModuleProperties)rdr.GetInt64(3), rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                            rdr.GetString(8), rdr.GetInt32(9)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static int ModuleClassMemberParameterCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opCOUNT " +
                        "FROM spMOD_CLASS_MEMBER_PARAMETERS_CNT;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table MOD_CLASS_MEMBER_PARAMETERS
        /// </summary>
        internal static ModuleParameter ModuleClassMemberParameterInsertUpdate(ModuleParameter item)
        {
            ModuleParameter Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_CLASS_MEMBER_PARAMETERS_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipClassMemberId", FbDbType.BigInt, item.ClassMemberID);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipProperties", FbDbType.BigInt, (Int64)item.Properties);
                    AddParam(cmd, "@ipParameterType", FbDbType.Integer, item.ParameterType);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal ClassMemberParameter methods

        #region Internal ModuleClasses methods

        /// <summary>
        /// Select individual record from  table MOD_MODULE
        /// </summary>
        internal static ModuleName ModuleNameSelect(Int64 Id)
        {
            ModuleName Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opNAME, opDESCRIPTION " +
                        "FROM spMOD_MODULE_GET(@ipId);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, Id);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new ModuleName(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table MOD_MODULE
        /// </summary>
        internal static ModuleName ModuleNameInsert(string name, string description)
        {
            ModuleName Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_MODULE_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipname", FbDbType.VarChar, name);
                    AddParam(cmd, "@ipdescription", FbDbType.Text, description);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = new ModuleName(newID, name, description);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table MOD_MODULE
        /// </summary>
        internal static bool ModuleNameUpdate(ModuleName item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_MODULE_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table MOD_MODULE
        /// </summary>
        internal static bool ModuleNameDelete(ModuleName item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_MODULE_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table MOD_MODULE
        /// </summary>
        internal static ModuleNames ModuleNameSelectAll()
        {
            ModuleNames Result = new ModuleNames();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opNAME, opDESCRIPTION " +
                        "FROM spMOD_MODULE_PAGE(@ipPAGESIZE, @ipPAGENUMBER) " +
                        "ORDER BY opNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, int.MaxValue);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, 1);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleName(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table MOD_MODULE
        /// </summary>
        internal static ModuleNames ModuleNamePage(int page, int pageSize)
        {
            ModuleNames Result = new ModuleNames();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opNAME, opDESCRIPTION " +
                        "FROM spMOD_MODULE_PAGE(@ipPAGESIZE, @ipPAGENUMBER);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.BigInt, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.BigInt, page);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ModuleName(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table MOD_MODULE
        /// </summary>
        internal static int ModuleNameCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opCOUNT " +
                        "FROM spMOD_MODULE_CNT;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table MOD_MODULE
        /// </summary>
        internal static ModuleName ModuleNameInsertUpdate(ModuleName item)
        {
            ModuleName Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spMOD_MODULE_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipName", FbDbType.VarChar, item.Name);
                    AddParam(cmd, "@ipDescription", FbDbType.Text, item.Description);
                    AddParam(cmd, "@opid", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opId"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal ModuleClasses methods

        #endregion ModuleClass Documentation

        #region SEO Data

        internal static UserSession SeoSessionRetrieve(string sessionID)
        {
            UserSession Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT a.ID, a.CREATED, a.SESSION_ID, ua.USER_AGENT, ir.URL, a.IP_ADDRESS, a.HOST_NAME, " +
                    "a.IS_MOBILE_DEVICE, a.IS_BROWSER_MOBILE, a.MOBILE_REDIRECT, a.REFERRAL_TYPE, a.BOUNCED, a.IS_BOT, " +
                    "a.CITY_ID, a.MOBILE_MANUFACTURER, a.MOBILE_MODEL, a.USER_ID, a.SCREEN_WIDTH, a.SCREEN_HEIGHT, " +
                    "a.SALE_CURRENCY, a.SALE_AMOUNT FROM SEO_DATA a " +
                    "JOIN SEO_INITIAL_REFERRER ir ON (ir.ID = a.INITIAL_REFERRER_ID) " +
                    "JOIN SEO_USER_AGENT ua ON (ua.ID = a.USER_AGENT_ID) " +
                    "WHERE a.SESSION_ID = @SESSIONID";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SESSIONID", FbDbType.VarChar, 100, sessionID);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new UserSession(rdr.GetInt64(0), rdr.GetDateTime(1), sessionID, rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7) == "Y",
                            rdr.GetString(8) == "Y", rdr.GetString(9) == "Y", (ReferalType)rdr.GetInt32(10),
                            rdr.GetString(11) == "Y",
                            rdr.GetString(12) == "Y", rdr.GetString(14), rdr.GetString(15), rdr.GetInt64(16),
                            rdr.GetInt32(17), rdr.GetInt32(18), rdr.GetString(19), rdr.GetDecimal(20)
                            );
                    }
                }
                finally
                {
                    tran.Rollback();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void SeoSessionInsertUpdate(UserSession session)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                try
                {
                    if (session.SaveStatus == SaveStatus.RequiresSave)
                    {
                        string SQL = "spSEO_DATA_INS";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        try
                        {
                            PrepareCommand(cmd);
                            AddParam(cmd, "@ipcreated", FbDbType.Date, session.Created);
                            AddParam(cmd, "@ipsession_Id", FbDbType.VarChar, 100,
                                Shared.Utilities.TextMaxLength(session.SessionID, 100));
                            AddParam(cmd, "@ipuser_Agent", FbDbType.VarChar, 1000,
                                Shared.Utilities.TextMaxLength(session.UserAgent, 1000));
                            AddParam(cmd, "@ipinitial_Referrer", FbDbType.VarChar, 1000,
                                Shared.Utilities.TextMaxLength(session.InitialReferrer, 1000));
                            AddParam(cmd, "@ipip_Address", FbDbType.VarChar, 15,
                                Shared.Utilities.TextMaxLength(session.IPAddress, 15));
                            AddParam(cmd, "@iphost_Name", FbDbType.VarChar, 150,
                                Shared.Utilities.TextMaxLength(session.HostName, 150));
                            AddParam(cmd, "@ipis_Mobile_Device", FbDbType.Char, 1, session.IsMobileDevice ? "Y" : "N");
                            AddParam(cmd, "@ipis_Browser_Mobile", FbDbType.Char, 1, session.IsBrowserMobile ? "Y" : "N");
                            AddParam(cmd, "@ipmobile_Redirect", FbDbType.Char, 1, session.MobileRedirect ? "Y" : "N");
                            AddParam(cmd, "@ipreferral_Type", FbDbType.Integer, (int)session.Referal);
                            AddParam(cmd, "@ipbounced", FbDbType.Char, 1, session.Bounced ? "Y" : "N");
                            AddParam(cmd, "@ipis_Bot", FbDbType.Char, 1, session.IsBot ? "Y" : "N");
                            AddParam(cmd, "@ipcity_Id", FbDbType.BigInt, session.CityID);
                            AddParam(cmd, "@ipmobile_Manufacturer", FbDbType.VarChar, 100,
                                Shared.Utilities.TextMaxLength(session.MobileManufacturer, 100));
                            AddParam(cmd, "@ipmobile_Model", FbDbType.VarChar, 100,
                                Shared.Utilities.TextMaxLength(session.MobileModel, 100));
                            AddParam(cmd, "@ipuser_Id", FbDbType.BigInt, session.UserID);
                            AddParam(cmd, "@ipscreen_Width", FbDbType.Integer, session.ScreenWidth);
                            AddParam(cmd, "@ipscreen_Height", FbDbType.Integer, session.ScreenHeight);
                            AddParam(cmd, "@ipsale_Amount", FbDbType.Integer, session.CurrentSale);
                            AddParam(cmd, "@IPSALE_CURRENCY", FbDbType.VarChar, 3,
                                Shared.Utilities.TextMaxLength(String.IsNullOrEmpty(session.CurrentSaleCurrency) ?
                                String.Empty : session.CurrentSaleCurrency, 3));
                            AddParam(cmd, "@IPOLDID", FbDbType.BigInt, session.InternalSessionID);
                            AddParam(cmd, "@opNewId", FbDbType.BigInt);
                            cmd.ExecuteNonQuery();

                            if (session.InternalSessionID == Int64.MinValue)
                                session.InternalSessionID = (Int64)cmd.Parameters["@opNewId"].Value;

                            session.SaveStatus = SaveStatus.Saved;
                        }
                        catch (Exception saveErr)
                        {
                            Shared.EventLog.Add(saveErr);
                        }
                        finally
                        {
                            CloseAndDispose(ref cmd);
                        }
                    }

                    try
                    {
                        SeoPageViewInsert(session, db, tran);
                    }
                    catch (Exception err)
                    {
                        Shared.EventLog.Add(err,
                            String.Format("Session: {0}", session.SessionID));

                        if (err.Message.Contains("Foreign key reference target does not exist"))
                        {
                            session.SaveStatus = SaveStatus.RequiresSave;
                            return;
                        }
                        else
                            throw;
                    }
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        /// <summary>
        /// Saves a page session
        /// </summary>
        /// <param name="session"></param>
        /// <param name="page"></param>
        internal static void SeoSessionSavePage(UserSession session, PageViewData page)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                if (page.ID == Int64.MinValue)
                {
                    string SQL = "spSEO_DATA_PAGE_VIEWS_INS2";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        PrepareCommand(cmd);
                        AddParam(cmd, "@ipseoDataId", FbDbType.BigInt, session.InternalSessionID);
                        AddParam(cmd, "@ipSEO_SESSION_ID", FbDbType.VarChar, 100, session.SessionID);
                        AddParam(cmd, "@IPPAGE_ID", FbDbType.BigInt, page.ID);
                        AddParam(cmd, "@ipurl", FbDbType.VarChar, page.URL);
                        AddParam(cmd, "@ipvisited", FbDbType.Date, page.TimeStamp);
                        AddParam(cmd, "@ipseconds", FbDbType.BigInt, page.TotalTime.TotalSeconds);
                        AddParam(cmd, "@ipreferrer", FbDbType.VarChar, page.Referrer);
                        AddParam(cmd, "@ippostBack", FbDbType.Char, page.IsPostBack ? "Y" : "N");
                        AddParam(cmd, "@opid", FbDbType.BigInt);
                        cmd.ExecuteNonQuery();

                        page.ID = (Int64)cmd.Parameters["@opID"].Value;
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                else if (page.TotalTime.TotalSeconds > 0) // update existing record
                {
                    string SQL = String.Format("UPDATE SEO_DATA_PAGE_VIEWS SET SECONDS = {0} WHERE ID = {1}",
                        page.TotalTime.TotalSeconds, page.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                }

                // update status to show saved
                page.SaveStatus = SaveStatus.Saved;
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Inserts an individual record into table SEO_DATA_PAGE_VIEWS
        /// </summary>
        private static void SeoPageViewInsert(UserSession session, FbConnection dbConnection, FbTransaction dbTransaction)
        {
            int totalPages = session.Pages.Count;

            for (int i = 0; i < totalPages; i++)
            {
                PageViewData page = session.Pages[i];

                if (page.SaveStatus == SaveStatus.RequiresSave)
                {
                    string SQL = "spSEO_DATA_PAGE_VIEWS_INS2";
                    FbCommand cmd = new FbCommand(SQL, dbConnection, dbTransaction);
                    try
                    {
                        PrepareCommand(cmd);
                        AddParam(cmd, "@ipseoDataId", FbDbType.BigInt, session.InternalSessionID);
                        AddParam(cmd, "@ipSEO_SESSION_ID", FbDbType.VarChar, 100, session.SessionID);
                        AddParam(cmd, "@IPPAGE_ID", FbDbType.BigInt, page.ID);
                        AddParam(cmd, "@ipurl", FbDbType.VarChar, page.URL);
                        AddParam(cmd, "@ipvisited", FbDbType.Date, page.TimeStamp);
                        AddParam(cmd, "@ipseconds", FbDbType.BigInt, page.TotalTime.TotalSeconds);
                        AddParam(cmd, "@ipreferrer", FbDbType.VarChar, page.Referrer);
                        AddParam(cmd, "@ippostBack", FbDbType.Char, page.IsPostBack ? "Y" : "N");
                        AddParam(cmd, "@opid", FbDbType.BigInt);
                        cmd.ExecuteNonQuery();

                        page.ID = (Int64)cmd.Parameters["@opID"].Value;

                        // update status to show saved
                        page.SaveStatus = SaveStatus.Saved;
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
            }
        }


        /// <summary>
        /// Hourly Seo Reports
        /// </summary>
        /// <returns></returns>
        internal static SeoReports SeoReportsHourly()
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT FIRST 24 a.HOURLY_DATE, a.HOURLY_HOUR, SUM(a.HOURLY_TOTALVISITS), " +
                    "SUM(a.HOURLY_HUMANVISITS), SUM(a.HOURLY_MOBILEVISITS), SUM(a.HOURLY_BOTVISITS), SUM(a.HOURLY_BOUNCED), " +
                    "SUM(a.HOURLY_TOTALPAGES), SUM(a.HOURLY_TOTAL_SALES), SUM(a.HOURLY_CONVERSIONS), " +
                    "SUM(a.HOURLY_MOBILECONVERSIONS), SUM(a.HOURLY_REFERUNKNOWN), SUM(a.HOURLY_REFERDIRECT), " +
                    "SUM(a.HOURLY_REFERAL), SUM(a.HOURLY_REFERORGANIC), SUM(a.HOURLY_REFERBING), SUM(a.HOURLY_REFERGOOGLE), " +
                    "SUM(a.HOURLY_REFERYAHOO), SUM(a.HOURLY_REFERFACEBOOK), SUM(a.HOURLY_REFERTWITTER) " +
                    "FROM SEO_REPORT_HOURLY a " +
                    "GROUP BY a.HOURLY_DATE, a.HOURLY_HOUR " +
                    "ORDER BY a.HOURLY_DATE DESC, a.HOURLY_HOUR DESC";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetDateTime(0), rdr.GetDateTime(0), rdr.GetInt32(1), rdr.GetInt64(2),
                            rdr.GetInt64(3), rdr.GetInt64(4), rdr.GetInt64(5), rdr.GetInt64(6), rdr.GetInt64(7),
                            rdr.GetDecimal(8), rdr.GetInt64(9), rdr.GetInt64(10), rdr.GetInt64(11), rdr.GetInt64(12),
                            rdr.GetInt64(13), rdr.GetInt64(14), rdr.GetInt64(15), rdr.GetInt64(16), rdr.GetInt64(17),
                            rdr.GetInt64(18), rdr.GetInt64(19)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Daily SEO Reports
        /// </summary>
        /// <returns></returns>
        internal static SeoReports SeoReportsDaily()
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT FIRST 30 a.DAILY_DATE, a.DAILY_TOTALVISITS, a.DAILY_HUMANVISITS, " +
                    "a.DAILY_MOBILEVISITS, a.DAILY_BOTVISITS, a.DAILY_BOUNCED, a.DAILY_TOTALPAGES, a.DAILY_TOTAL_SALES, " +
                    "a.DAILY_CONVERSIONS, a.DAILY_MOBILECONVERSIONS, a.DAILY_REFERUNKNOWN, a.DAILY_REFERDIRECT, " +
                    "a.DAILY_REFERAL, a.DAILY_REFERORGANIC, a.DAILY_REFERBING, a.DAILY_REFERGOOGLE, a.DAILY_REFERYAHOO, " +
                    "a.DAILY_REFERFACEBOOK, a.DAILY_REFERTWITTER " +
                    "FROM SEO_REPORT_DAILY a ORDER BY a.DAILY_DATE DESC";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetDateTime(0), rdr.GetInt64(1), rdr.GetInt64(2),
                            rdr.GetInt64(3), rdr.GetInt64(4), rdr.GetInt64(5), rdr.GetInt64(6), rdr.GetDecimal(7),
                            rdr.GetInt64(8), rdr.GetInt64(9), rdr.GetInt64(10), rdr.GetInt64(11), rdr.GetInt64(12),
                            rdr.GetInt64(13), rdr.GetInt64(14), rdr.GetInt64(15), rdr.GetInt64(16),
                            rdr.GetInt64(17), rdr.GetInt64(18)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Weekly Seo Reports
        /// </summary>
        /// <returns></returns>
        internal static SeoReports SeoReportsWeekly()
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT FIRST 20 a.WEEKLY_YEAR, a.WEEKLY_WEEK, a.WEEKLY_TOTALVISITS, a.WEEKLY_HUMANVISITS, " +
                    "a.WEEKLY_MOBILEVISITS, a.WEEKLY_BOTVISITS, a.WEEKLY_BOUNCED, a.WEEKLY_TOTALPAGES, " +
                    "a.WEEKLY_TOTAL_SALES, a.WEEKLY_CONVERSIONS, a.WEEKLY_MOBILECONVERSIONS, a.WEEKLY_REFERUNKNOWN, " +
                    "a.WEEKLY_REFERDIRECT, a.WEEKLY_REFERAL, a.WEEKLY_REFERORGANIC, a.WEEKLY_REFERBING, " +
                    "a.WEEKLY_REFERGOOGLE, a.WEEKLY_REFERYAHOO, a.WEEKLY_REFERFACEBOOK, a.WEEKLY_REFERTWITTER " +
                    "FROM SEO_REPORT_WEEKLY a ORDER BY a.WEEKLY_YEAR DESC, a.WEEKLY_WEEK DESC";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetInt64(2), rdr.GetInt64(3),
                            rdr.GetInt64(4), rdr.GetInt64(5), rdr.GetInt64(6), rdr.GetInt64(7), rdr.GetDecimal(8),
                            rdr.GetInt64(9), rdr.GetInt64(10), rdr.GetInt64(11), rdr.GetInt64(12), rdr.GetInt64(13),
                            rdr.GetInt64(14), rdr.GetInt64(15), rdr.GetInt64(16), rdr.GetInt64(17),
                            rdr.GetInt64(18), rdr.GetInt64(19)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Monthly Seo Reports
        /// </summary>
        /// <returns></returns>
        internal static SeoReports SeoReportsMonthly()
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT FIRST 12 a.MONTHLY_YEAR, a.MONTHLY_MONTH, a.MONTHLY_TOTALVISITS, " +
                    "a.MONTHLY_HUMANVISITS, a.MONTHLY_MOBILEVISITS, a.MONTHLY_BOTVISITS, a.MONTHLY_BOUNCED, " +
                    "a.MONTHLY_TOTALPAGES, a.MONTHLY_TOTAL_SALES, a.MONTHLY_CONVERSIONS, a.MONTHLY_MOBILECONVERSIONS, " +
                    "a.MONTHLY_REFERUNKNOWN, a.MONTHLY_REFERDIRECT, a.MONTHLY_REFERAL, a.MONTHLY_REFERORGANIC, " +
                    "a.MONTHLY_REFERBING, a.MONTHLY_REFERGOOGLE, a.MONTHLY_REFERYAHOO, a.MONTHLY_REFERFACEBOOK, " +
                    "a.MONTHLY_REFERTWITTER " +
                    "FROM SEO_REPORT_MONTHLY a ORDER BY a.MONTHLY_YEAR DESC, a.MONTHLY_MONTH DESC";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetInt32(0), rdr.GetInt16(1), rdr.GetInt64(2), rdr.GetInt64(3),
                            rdr.GetInt64(4), rdr.GetInt64(5), rdr.GetInt64(6), rdr.GetInt64(7), rdr.GetDecimal(8),
                            rdr.GetInt64(9), rdr.GetInt64(10), rdr.GetInt64(11), rdr.GetInt64(12), rdr.GetInt64(13),
                            rdr.GetInt64(14), rdr.GetInt64(15), rdr.GetInt64(16), rdr.GetInt64(17),
                            rdr.GetInt64(18), rdr.GetInt64(19)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Visits monthly by country
        /// </summary>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        internal static SeoReports SeoReportsMonthlyVisitsByCountry(int year, int month)
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT cn.COUNTRY, c1.WD$LATITUDE, c1.WD$LONGITUDE, SUM(a.LOCATION_COUNT) " +
                    "FROM SEO_REPORT_LOCATION a " +
                    " LEFT JOIN WD$IPCITY c1 ON (c1.WD$ID = a.LOCATION_CITY) " +
                    " LEFT JOIN WS_COUNTRIES cn ON (cn.COUNTRYCODE = c1.WD$COUNTRY) " +
                    "WHERE a.LOCATION_YEAR = @YEAR AND a.LOCATION_MONTH = @MONTH " +
                    " AND c1.WD$CITY = '' AND c1.WD$POSTCODE = '' AND c1.WD$POSTCODE = '' " +
                    "GROUP BY cn.COUNTRY, c1.WD$LATITUDE, c1.WD$LONGITUDE, a.LOCATION_YEAR, a.LOCATION_MONTH";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@YEAR", FbDbType.Integer, year);
                    AddParam(cmd, "@MONTH", FbDbType.Integer, month);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetString(0), rdr.GetDouble(1), rdr.GetDouble(2), rdr.GetInt64(3)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Visits month by city
        /// </summary>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        internal static SeoReports SeoReportsMonthlyVisitsByCity(int year, int month)
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT COALESCE(c.WD$CITY, 'Unknown'), COALESCE(c.WD$LATITUDE, -1), " +
                    "COALESCE(c.WD$LONGITUDE, -1), SUM(a.LOCATION_COUNT) " +
                    "FROM SEO_REPORT_LOCATION a     LEFT JOIN WD$IPCITY c ON (c.WD$ID = a.LOCATION_CITY) " +
                    "WHERE a.LOCATION_YEAR = @YEAR AND a.LOCATION_MONTH = @MONTH " +
                    "GROUP BY c.WD$CITY, c.WD$COUNTRY, c.WD$LATITUDE, c.WD$LONGITUDE, a.LOCATION_CITY, a.LOCATION_YEAR, " +
                    "a.LOCATION_MONTH " +
                    "ORDER BY SUM(a.LOCATION_COUNT) DESC";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@YEAR", FbDbType.Integer, year);
                    AddParam(cmd, "@MONTH", FbDbType.Integer, month);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetString(0), rdr.GetDouble(1), rdr.GetDouble(2), rdr.GetInt64(3)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Sales monthly by country
        /// </summary>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        internal static SeoReports SeoReportsMonthlySalesByCountry(int year, int month)
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT cn.COUNTRY, c1.WD$LATITUDE, c1.WD$LONGITUDE, a.SALES_YEAR, a.SALES_MONTH, " +
                    "SUM(a.SALES_COUNT), a.SALES_CURRENCY, SUM(a.SALES_AMOUNT) " +
                    "FROM SEO_REPORT_SALES a  LEFT JOIN WD$IPCITY c1 ON (c1.WD$ID = a.SALES_CITY) " +
                    "LEFT JOIN WS_COUNTRIES cn ON (cn.COUNTRYCODE = c1.WD$COUNTRY) " +
                    "WHERE a.SALES_YEAR = @YEAR AND a.SALES_MONTH = @MONTH " +
                    "AND c1.WD$CITY = '' AND c1.WD$POSTCODE = '' AND c1.WD$POSTCODE = '' " +
                    "GROUP BY cn.COUNTRY, c1.WD$LATITUDE, c1.WD$LONGITUDE, a.SALES_YEAR, a.SALES_MONTH, a.SALES_CURRENCY";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@YEAR", FbDbType.Integer, year);
                    AddParam(cmd, "@MONTH", FbDbType.Integer, month);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetString(0), rdr.GetDouble(1), rdr.GetDouble(2), rdr.GetInt32(3),
                            rdr.GetInt32(4), rdr.GetString(6), rdr.GetDecimal(7)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Sales monthly by city
        /// </summary>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        internal static SeoReports SeoReportsMonthlySalesByCity(int year, int month)
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT COALESCE(c1.WD$CITY, 'Unknown'), COALESCE(c1.WD$LATITUDE, -1), " +
                    "COALESCE(c1.WD$LONGITUDE, -1), a.SALES_YEAR, a.SALES_MONTH, SUM(a.SALES_COUNT), a.SALES_CURRENCY, " +
                    "SUM(a.SALES_AMOUNT) FROM SEO_REPORT_SALES a     LEFT JOIN WD$IPCITY c1 ON (c1.WD$ID = a.SALES_CITY) " +
                    "WHERE a.SALES_YEAR = @YEAR AND a.SALES_MONTH = @MONTH " +
                    "GROUP BY c1.WD$CITY, c1.WD$LATITUDE, c1.WD$LONGITUDE, a.SALES_YEAR, a.SALES_MONTH, a.SALES_CURRENCY";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@YEAR", FbDbType.Integer, year);
                    AddParam(cmd, "@MONTH", FbDbType.Integer, month);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetString(0), rdr.GetDouble(1), rdr.GetDouble(2), rdr.GetInt32(3),
                            rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetString(6), rdr.GetDecimal(7)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves Campaign Stats
        /// </summary>
        /// <param name="campaign"></param>
        /// <returns></returns>
        internal static SeoReports SeoReportsCampaign(Campaign campaign)
        {
            SeoReports Result = new SeoReports();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "SELECT cn.COUNTRY, ipc.WD$CITY, ipc.WD$LATITUDE, ipc.WD$LONGITUDE, " +
                    "a.CAMPAIGN_NAME, a.CAMPAIGN_VISITORS, a.CAMPAIGN_CURRENCY, a.CAMPAIGN_SALES " +
                    "FROM SEO_REPORT_CAMPAIGN a " +
                    " JOIN WD$IPCITY ipc ON (ipc.WD$ID = a.CAMPAIGN_CITY) " +
                    " LEFT JOIN WS_COUNTRIES cn ON (cn.COUNTRYCODE = ipc.WD$COUNTRY) " +
                    "WHERE LOWER(a.CAMPAIGN_NAME) = @CAMPAIGNNAME " +
                    "ORDER BY cn.COUNTRY, ipc.WD$CITY ";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@CAMPAIGNNAME", FbDbType.VarChar, 40, campaign.CampaignName.ToLower());

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SeoReport(rdr.GetString(0), rdr.GetString(1), rdr.GetDouble(2),
                            rdr.GetDouble(3), rdr.GetString(4), rdr.GetInt32(5), rdr.GetString(6),
                            rdr.GetDecimal(7)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion SEO Data

        #region Internal Ipcity methods

        internal static List<IPCity> IPCitySelect(decimal latitude, decimal longitude, string country)
        {
            List<IPCity> Result = new List<IPCity>();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 15 fnc.DISTANCE, ipc.LOC_ID, ipc.COUNTRY, ipc.CITY, ipc.POSTCODE " +
                        "FROM WSF_FIND_NEAREST_CITY(@ipCOUNTRY, @ipLONGITUDE, @ipLATITUDE) fnc " +
                        "  JOIN GEO_IP_CITY ipc ON (ipc.LOC_ID = fnc.CITY_ID) " +
                        "WHERE ipc.CITY <> '' " +
                        "ORDER BY  DISTANCE, ipc.POSTCODE DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipCOUNTRY", FbDbType.VarChar, 15, country);
                    AddParam(cmd, "@ipLONGITUDE", FbDbType.Decimal, longitude);
                    AddParam(cmd, "@ipLATITUDE", FbDbType.Decimal, latitude);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new IPCity(rdr.GetInt64(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Select individual record from  table WD$IPCITY
        /// </summary>
        internal static IPCity IPCitySelect(string ipAddress)
        {
            IPCity Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COALESCE(opID, 0), COALESCE(opCOUNTRY, 'Unknown'), COALESCE(opREGION, ''), " +
                    "COALESCE(opCITY, ''), COALESCE(opPOSTCODE, ''), COALESCE(opLATITUDE, 0.0), " +
                    "COALESCE(opLONGITUDE, 0.0), COALESCE(opMETROCODE, ''), COALESCE(opAREACODE, ''), " +
                    "opNUMERIC, COALESCE(opSTARTBLOCK, 0), COALESCE(opENDBLOCK, 0) " +
                    "FROM WD$GEO_DECODE_IP(@IPIPADDRESS);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@IPIPADDRESS", FbDbType.VarChar, 15, ipAddress);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new IPCity(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetDecimal(5), rdr.GetDecimal(6), rdr.GetString(7), rdr.GetString(8),
                            -1, rdr.GetInt64(9), rdr.GetInt64(10), rdr.GetInt64(11));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Select individual record from  table WD$IPCITY
        /// </summary>
        internal static List<IPCity> IPCitySelectAll()
        {
            List<IPCity> Result = new List<IPCity>();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT ipc.WD$ID, COALESCE(c.WD$COUNTRY_CODE, 'Unknown'), COALESCE(ipc.WD$REGION, ''), " +
                    "COALESCE(ipc.WD$CITY, ''), COALESCE(ipc.WD$POSTCODE, ''), COALESCE(ipc.WD$LATITUDE, 0.0), " +
                    "COALESCE(ipc.WD$LONGITUDE, 0.0), COALESCE(ipc.WD$METRO_CODE, ''), COALESCE(ipc.WD$AREA_CODE, ''), " +
                    "COALESCE(c.WD$FROM_IP, 0), COALESCE(c.WD$TO_IP, 0), COALESCE(c.WD$VERSION, 0) FROM WD$IPTOCOUNTRY c " +
                    "LEFT JOIN WD$IPCITY ipc ON (ipc.WD$ID = c.WD$CITY_ID) ";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new IPCity(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetDecimal(5), rdr.GetDecimal(6), rdr.GetString(7), rdr.GetString(8),
                            rdr.GetInt64(11), 0, rdr.GetInt64(9), rdr.GetInt64(10)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal Ipcity methods

        #region WaitingList Methods

        /// <summary>
        /// Select individual record from  table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static WaitingList WaitingListSelect(Int64 ID)
        {
            WaitingList Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opUSER_ID, opSTAFF_ID, opNOTES, opEXPIRES, opLAST_REVIEWED, " +
                        "opREVIEWED_BY, opPREFERRED_DATE, opPREFERRED_TIME " +
                        "FROM spWS_APPT_WAIT_LONG_GET(@ipID);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, ID);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new WaitingList(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt64(2), rdr.GetString(3), rdr.GetDateTime(4), rdr.GetDateTime(5),
                            rdr.GetInt64(6), rdr.GetDateTime(7), rdr.GetDouble(8));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static bool WaitingListUpdate(WaitingList item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spWS_APPT_WAIT_LONG_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipStaffID", FbDbType.BigInt, item.StaffID);
                    AddParam(cmd, "@ipNotes", FbDbType.VarChar, item.Notes);
                    AddParam(cmd, "@ipExpires", FbDbType.Date, item.Expires);
                    AddParam(cmd, "@ipLastReviewed", FbDbType.Date, item.LastReviewed);
                    AddParam(cmd, "@ipReviewedBy", FbDbType.BigInt, item.ReviewedBy);
                    AddParam(cmd, "@ipPreferredDate", FbDbType.Date, item.PreferredDate);
                    AddParam(cmd, "@ipPreferredTime", FbDbType.Double, item.PreferredTime);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static bool WaitingListDelete(WaitingList item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spWS_APPT_WAIT_LONG_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static WaitingLists WaitingListSelectAll()
        {
            WaitingLists Result = new WaitingLists();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opUSER_ID, opSTAFF_ID, opNOTES, opEXPIRES, opLAST_REVIEWED, " +
                        "opREVIEWED_BY, opPREFERRED_DATE, opPREFERRED_TIME " +
                        "FROM spWS_APPT_WAIT_LONG_ALL;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new WaitingList(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt64(2), rdr.GetString(3), rdr.GetDateTime(4), rdr.GetDateTime(5),
                            rdr.GetInt64(6), rdr.GetDateTime(7), rdr.GetDouble(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects a page of records from table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static WaitingLists WaitingListPage(int page, int pageSize)
        {
            WaitingLists Result = new WaitingLists();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opUSER_ID, opSTAFF_ID, opNOTES, opEXPIRES, opLAST_REVIEWED, " +
                        "opREVIEWED_BY, opPREFERRED_DATE, opPREFERRED_TIME " +
                        "FROM spWS_APPT_WAIT_LONG_PAGE(@ipPAGESIZE, @ipPAGENUMBER);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPAGESIZE", FbDbType.Integer, pageSize);
                    AddParam(cmd, "@ipPAGENUMBER", FbDbType.Integer, page);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new WaitingList(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt64(2), rdr.GetString(3), rdr.GetDateTime(4), rdr.GetDateTime(5),
                            rdr.GetInt64(6), rdr.GetDateTime(7), rdr.GetDouble(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the number of records from  table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static int WaitingListCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opCOUNT " +
                        "FROM spWS_APPT_WAIT_LONG_CNT;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts or Updates a record within table WS_APPOINTMENT_WAIT_LIST_LONG
        /// </summary>
        internal static WaitingList WaitingListInsertUpdate(WaitingList item)
        {
            WaitingList Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spWS_APPT_WAIT_LONG_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.BigInt, item.ID);
                    AddParam(cmd, "@ipUserID", FbDbType.BigInt, item.UserID);
                    AddParam(cmd, "@ipStaffID", FbDbType.BigInt, item.StaffID);
                    AddParam(cmd, "@ipNotes", FbDbType.VarChar, 8000, item.Notes);
                    AddParam(cmd, "@ipExpires", FbDbType.Date, item.Expires);
                    AddParam(cmd, "@ipLastReviewed", FbDbType.Date, item.LastReviewed);
                    AddParam(cmd, "@ipReviewedBy", FbDbType.BigInt, item.ReviewedBy);
                    AddParam(cmd, "@ipPreferredDate", FbDbType.Date, item.PreferredDate);
                    AddParam(cmd, "@ipPreferredTime", FbDbType.Double, item.PreferredTime);
                    AddParam(cmd, "@opiD", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    // remove treatments no longe listed
                    string treatmentIDs = String.Empty;
                    bool first = true;

                    foreach (AppointmentTreatment treat in item.Treatments)
                    {
                        if (!first)
                            treatmentIDs += ", ";
                        else
                            first = false;

                        treatmentIDs += treat.ID.ToString();
                    }

                    SQL = String.Format("DELETE FROM WS_WAIT_LIST_LONG_TO_TREAT WHERE WAIT_LIST_ID = @WAIT_LIST_ID " +
                        "AND TREATMENT_ID NOT IN ({0});", treatmentIDs);
                    cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@WAIT_LIST_ID", FbDbType.BigInt, newID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    // save all treatments
                    foreach (AppointmentTreatment treat in item.Treatments)
                    {
                        SQL = "UPDATE OR INSERT INTO WS_WAIT_LIST_LONG_TO_TREAT (WAIT_LIST_ID, TREATMENT_ID) VALUES " +
                            "(@WAIT_ID, @TREATMENT_ID) MATCHING (WAIT_LIST_ID, TREATMENT_ID);";
                        cmd = new FbCommand(SQL, db, tran);
                        AddParam(cmd, "@WAIT_ID", FbDbType.BigInt, newID);
                        AddParam(cmd, "@TREATMENT_ID", FbDbType.Integer, treat.ID);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }

                    tran.Commit();
                    Result = item;
                    Result.ID = newID;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion WaitingList Methods

        #region Currencies

        /// <summary>
        /// Get's an individual currency code
        /// </summary>
        /// <param name="currencyCode"></param>
        /// <returns></returns>
        internal static Currency CurrenciesGetCurrency(string currencyCode)
        {
            Currency Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT c.ID, c.IS_ACTIVE, c.CURRENCYCODE, c.CULTURE, c.CURRENCY_SYMBOL, c.PRICE_COLUMN, " +
                        "CONVERSION_RATE, COST_MULTIPLIER " +
                        "FROM POS_CURRENCIES c WHERE c.CURRENCYCODE = @CURRENCYCODE;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@CURRENCYCODE", FbDbType.VarChar, 3, currencyCode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Currency(rdr.GetInt32(0), rdr.GetString(1) == "Y",
                            rdr.GetString(2), rdr.GetString(3), rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.GetInt32(5), rdr.IsDBNull(6) ? 1.0m : rdr.GetDecimal(6),
                            rdr.IsDBNull(7) ? 1.00m : rdr.GetDecimal(7));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves a currency based on the culture
        /// </summary>
        /// <param name="culture"></param>
        /// <returns></returns>
        internal static Currency CurrenciesGetCulture(CultureInfo culture)
        {
            Currency Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT c.ID, c.IS_ACTIVE, c.CURRENCYCODE, c.CULTURE, c.CURRENCY_SYMBOL, c.PRICE_COLUMN, " +
                        "CONVERSION_RATE, COST_MULTIPLIER " +
                        "FROM POS_CURRENCIES c WHERE LOWER(c.CULTURE) = @CULTURE;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@CULTURE", FbDbType.VarChar, 5, culture.Name.ToLower());

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Currency(rdr.GetInt32(0), rdr.GetString(1) == "Y",
                            rdr.GetString(2), rdr.GetString(3), rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.GetInt32(5), rdr.IsDBNull(6) ? 1.0m : rdr.GetDecimal(6),
                            rdr.IsDBNull(7) ? 1.00m : rdr.GetDecimal(7));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves all currencies
        /// </summary>
        /// <returns></returns>
        internal static Currencies CurrenciesGetAll()
        {
            Currencies Result = new Currencies();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT c.ID, c.IS_ACTIVE, c.CURRENCYCODE, c.CULTURE, c.CURRENCY_SYMBOL, c.PRICE_COLUMN, " +
                        "CONVERSION_RATE, COST_MULTIPLIER " +
                        "FROM POS_CURRENCIES c";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Currency(rdr.GetInt32(0), rdr.GetString(1) == "Y",
                            rdr.GetString(2), rdr.GetString(3), rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.GetInt32(5), rdr.IsDBNull(6) ? 1.0m : rdr.GetDecimal(6),
                            rdr.IsDBNull(7) ? 1.00m : rdr.GetDecimal(7)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Currencies

        #region Licences

        /// <summary>
        /// Validates a licence
        /// </summary>
        /// <param name="licenceID">ID of licence</param>
        /// <param name="domain">Domain/IP Address linked to</param>
        /// <param name="licenceType">Type of Licence</param>
        /// <returns>True if valid, otherwise false</returns>
        internal static bool LicenceValid(Int64 licenceID, string domain, int licenceType)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_LICENCE_VALIDATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipLICENCE_ID", FbDbType.BigInt, licenceID);
                    AddParam(cmd, "@ipDOMAIN", FbDbType.VarChar, 150, domain);
                    AddParam(cmd, "@ipTYPE", FbDbType.Integer, licenceType);
                    AddParam(cmd, "@opISVALID", FbDbType.Char);

                    cmd.ExecuteNonQuery();

                    Result = cmd.Parameters["@opISVALID"].Value.ToString() == "Y";

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Returns the number of licences for a user
        /// </summary>
        /// <param name="user">User who's licences are sought</param>
        /// <returns>int, total number of licences</returns>
        internal static int LicenceCount(User user)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(a.ID) FROM WS_LICENCES a WHERE a.MEMBER_ID = {0}", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Retrieves all licences for a user
        /// </summary>
        /// <param name="user">User who's licences are sought</param>
        /// <returns>Licences collection</returns>
        internal static Licences LicenceGet(User user)
        {
            Licences Result = new Licences();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.LICENCE_TYPE, a.DOMAIN_NAME, a.EXPIRES, a.TRIAL, a.VALID, a.MEMBER_ID, a.UPDATES, a.START_DATE, a.INVOICE_ID, a.LICENCE_COUNT " +
                        "FROM WS_LICENCES a WHERE a.MEMBER_ID = {0}", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Licence(rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetDateTime(8), rdr.GetDateTime(3),
                            rdr.GetString(4) == "Y", rdr.GetString(5) == "Y", rdr.GetInt32(7), rdr.IsDBNull(9) ? -1 : rdr.GetInt32(9),
                            rdr.GetInt32(10)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Saves changes to a licence
        /// </summary>
        /// <param name="licence">Licence to save</param>
        internal static void LicenceSave(Licence licence)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_LICENCES a SET a.DOMAIN_NAME = @DOMAIN WHERE a.ID = {0}", licence.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DOMAIN", FbDbType.VarChar, 150, licence.Domain);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static void LicenceCreateTrial(LicenceType licenceType, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_LICENCES (LICENCE_TYPE, DOMAIN_NAME, EXPIRES, TRIAL, VALID, MEMBER_ID, " +
                    "UPDATES, START_DATE, INVOICE_ID) VALUES (@LICENCE_TYPE, '', CURRENT_TIMESTAMP + 21, " +
                    "@TRIAL_LICENCE, 'Y', @USER_ID, 0, CURRENT_TIMESTAMP, 9);";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@LICENCE_TYPE", FbDbType.Integer, (int)licenceType);
                    AddParam(cmd, "@TRIAL_LICENCE", FbDbType.Char, 1, "Y");
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

        }

        #endregion Licences

        #region Payment Statuses

        /// <summary>
        /// Returns a collection of payment statuses
        /// </summary>
        /// <returns>PaymentStatuses collection</returns>
        internal static PaymentStatuses PaymentStatusesGet()
        {
            PaymentStatuses Result = new PaymentStatuses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, a.INITIAL_PROCESS_STATUS, a.IS_PAID, a.PROVIDER_NAMESPACE, " +
                        "a.STATUS_TILL, a.STATUS_OFFICE, a.STATUS_ONLINE, a.CREATE_INVOICE, a.MEMBER_LEVEL " +
                        "FROM WS_PAYMENT_STATUS a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new PaymentStatus(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                            rdr.GetString(3) == "Y", rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                            rdr.GetString(5) == "Y", rdr.GetString(6) == "Y", rdr.GetString(7) == "Y",
                            rdr.GetString(8) == "Y", (MemberLevel)rdr.GetInt32(9)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Payment Statuses

        #region Custom Web Pages

        internal static void CreateCustomPages()
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQLInsertMissing = String.Format("EXECUTE PROCEDURE WSP_CUST_PAGES_ADD_MISSING({0})", DALHelper.WebsiteID);
                    FbCommand cmdInsertMissing = new FbCommand(SQLInsertMissing, db, tran);
                    cmdInsertMissing.ExecuteNonQuery();

                    string SQL = String.Format("SELECT a.ID, a.PAGE_DATA, a.DESCRIPTION FROM WS_CUSTOM_PAGES a WHERE a.WEBSITE_ID = {0}", DALHelper.WebsiteID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();
                    int count = 0;

                    while (rdr.Read())
                    {
                        count++;

                        if (count > 0)
                            break;
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    if (count == 0)
                    {
                        //no items found for this install, create them
                        SQL = String.Format("INSERT INTO WS_CUSTOM_PAGES (DESCRIPTION, WEBSITE_ID, PAGE_DATA, COUNTRY_ID, PAGE_TYPE) " +
                            "SELECT a.DESCRIPTION, {0}, a.PAGE_DATA, 0, 0 FROM WS_CUSTOM_PAGES a WHERE a.WEBSITE_ID = 0;",
                            DALHelper.WebsiteID);
                        cmd = new FbCommand(SQL, db, tran);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves a collection of custom pages
        /// </summary>
        /// <returns></returns>
        internal static CustomPages CustomPagesGet(int websiteID)
        {
            CustomPages Result = new CustomPages();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.PAGE_DATA, a.DESCRIPTION, a.WEBSITE_ID, a.COUNTRY_ID, a.IS_ACTIVE, a.PAGE_TYPE FROM WS_CUSTOM_PAGES a WHERE a.WEBSITE_ID = @WEBSITEID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@WEBSITEID", FbDbType.Integer, websiteID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new CustomPage(rdr.GetInt64(0), rdr.GetString(2), rdr.GetString(1), rdr.GetInt32(3),
                            Countries.Get(rdr.GetInt32(4)), rdr.GetString(5) == "Y",
                            rdr.IsDBNull(6) ? CustomPagesType.WebPage : (CustomPagesType)rdr.GetInt32(6)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates a custom web page
        /// </summary>
        /// <param name="page"></param>
        internal static void CustomPageUpdate(CustomPage page)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spWS_CUSTOM_PAGES_IU";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, page.ID);
                    AddParam(cmd, "@ipPAGE_DATA", FbDbType.Text, page.PageText);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 1000, page.Title);
                    AddParam(cmd, "@ipWEBSITE_ID", FbDbType.Integer, page.WebSiteID);
                    AddParam(cmd, "@ipCOUNTRY_ID", FbDbType.Integer, page.Country.ID);
                    AddParam(cmd, "@ipIS_ACTIVE", FbDbType.Char, 1, page.IsActive ? "Y" : "N");
                    AddParam(cmd, "@ipPAGE_TYPE", FbDbType.Integer, (int)page.PageType);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();
                    page.ID = (Int64)cmd.Parameters["@opNEWID"].Value;

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves a custom page
        /// </summary>
        /// <param name="title">Title of page</param>
        /// <param name="country">Country of page to return</param>
        /// <returns></returns>
        internal static CustomPage CustomPageGet(string title, Country country, CustomPagesType pageType, int webSiteID)
        {
            CustomPage Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.PAGE_DATA, a.DESCRIPTION, a.WEBSITE_ID, a.COUNTRY_ID, a.IS_ACTIVE, a.PAGE_TYPE FROM WS_CUSTOM_PAGES a WHERE a.DESCRIPTION = @DESCRIPTION AND a.WEBSITE_ID = @WEBSITEID AND a.COUNTRY_ID = @COUNTRYID AND a.PAGE_TYPE = @PAGE_TYPE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 1000, title);
                    AddParam(cmd, "@WEBSITEID", FbDbType.Integer, pageType == CustomPagesType.WebPage ? webSiteID : -1);
                    AddParam(cmd, "@COUNTRYID", FbDbType.Integer, webSiteID == 0 ? 0 : country.ID);
                    AddParam(cmd, "@PAGE_TYPE", FbDbType.Integer, (int)pageType);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new CustomPage(rdr.GetInt64(0), rdr.GetString(2), rdr.GetString(1), rdr.GetInt32(3),
                            Countries.Get(rdr.GetInt32(4)), rdr.GetString(5) == "Y", (CustomPagesType)rdr.GetInt32(6));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        /// <summary>
        /// Retrieves custom translated data for a product
        /// </summary>
        /// <param name="country"></param>
        /// <param name="product"></param>
        /// <returns></returns>
        internal static CustomPage CustomPageGet(Country country, Product product, CustomPagesType pageType)
        {
            CustomPage Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.PAGE_DATA, a.DESCRIPTION, a.WEBSITE_ID, a.COUNTRY_ID, a.IS_ACTIVE, a.PAGE_TYPE FROM WS_CUSTOM_PAGES a WHERE a.DESCRIPTION = @DESCRIPTION AND a.WEBSITE_ID = @WEBSITEID AND a.COUNTRY_ID = @COUNTRYID AND a.PAGE_TYPE = @PAGE_TYPE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 1000, String.Format("Product - {0}", product.ID));
                    AddParam(cmd, "@WEBSITEID", FbDbType.Integer, -1);
                    AddParam(cmd, "@COUNTRYID", FbDbType.Integer, country.ID);
                    AddParam(cmd, "@PAGE_TYPE", FbDbType.Integer, (int)pageType);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new CustomPage(rdr.GetInt64(0), rdr.GetString(2), rdr.GetString(1), rdr.GetInt32(3), Countries.Get(rdr.GetInt32(4)), rdr.GetString(5) == "Y", (CustomPagesType)rdr.GetInt32(6));
                    }
                    else
                    {
                        Result = new CustomPage(-1, String.Format("Product - {0}", product.ID), String.Empty, -1, country, false, pageType);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion Custom Web Pages

        #region System Emails

        /// <summary>
        /// Saves a system Email
        /// </summary>
        /// <param name="email"></param>
        internal static void SystemEmailSave(SystemEmail email)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "UPDATE WS_SYSTEM_EMAILS a SET a.SUBJECT = @SUBJECT, " +
                        "a.TEMPLATE = @TEMPLATE, ALLOW_SEND = @ALLOW WHERE a.ID = @ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@SUBJECT", FbDbType.VarChar, 200, email.Subject);
                    AddParam(cmd, "@TEMPLATE", FbDbType.Text, email.Message);
                    AddParam(cmd, "@ALLOW", FbDbType.Char, 1, email.AllowSend ? "Y" : "N");
                    AddParam(cmd, "@ID", FbDbType.BigInt, email.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Returns a collection of System Emails
        /// </summary>
        /// <returns>System Emails collection</returns>
        internal static SystemEmails SystemEmailGet()
        {
            SystemEmails Result = new SystemEmails();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.NAME, a.TEMPLATE, a.SUBJECT, a.ALLOW_SEND FROM WS_SYSTEM_EMAILS a;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SystemEmail(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), 
                            rdr.GetString(2), rdr.GetString(4) == "Y" ? true : false));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static SystemEmail SystemEmailGet(SystemEmailType emailType)
        {
            SystemEmail Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.NAME, a.TEMPLATE, a.SUBJECT, a.ALLOW_SEND " +
                        "FROM WS_SYSTEM_EMAILS a WHERE a.ID = {0};", (int)emailType);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SystemEmail(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3),
                            rdr.GetString(2), rdr.GetString(4) == "Y" ? true : false);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion System Eails

        #region Notifications

        /// <summary>
        /// Adds a new notification
        /// </summary>
        /// <param name="item">Product Cost Item which is out of stock</param>
        /// <param name="email">Email of user who wants notifications</param>
        internal static void ProductNotificationAdd(ProductCost item, string email)
        {
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = "WSP_NOTIFICATIONS_INS";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        PrepareCommand(cmd);
                        AddParam(cmd, "@IPUSER_EMAIL", FbDbType.VarChar, 500, email.ToUpper());
                        AddParam(cmd, "@IPPRODUCT_COST_ID", FbDbType.BigInt, item.ID);

                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                    finally
                    {
                        tran.Commit();
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                Library.ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, item, email);
                throw;
            }
        }

        /// <summary>
        /// Removes a notification for a user
        /// </summary>
        /// <param name="item">Product Cost Item which is out of stock</param>
        /// <param name="email">Email of user who wants notifications</param>
        internal static void ProductNotificationRemove(ProductCost item, string email)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_PRODUCT_NOTIFICATIONS a " +
                        "WHERE a.PRODUCT_COST_ID = {0} AND UPPER(a.USER_EMAIL) = @USER_EMAIL;", item.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@USER_EMAIL", FbDbType.VarChar, 500, email.ToUpper());

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Determines whether a notification exists
        /// </summary>
        /// <param name="item">Product Cost Item which is out of stock</param>
        /// <param name="email">Email of user who wants notifications</param>
        /// <returns>true if the notification exists, otherwise false</returns>
        internal static bool ProductNotificationExists(ProductCost item, string email)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.USER_EMAIL, a.PRODUCT_COST_ID FROM WS_PRODUCT_NOTIFICATIONS a " +
                        "WHERE a.PRODUCT_COST_ID = {0} AND UPPER(a.USER_EMAIL) = @USER_EMAIL;", item.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@USER_EMAIL", FbDbType.VarChar, 500, email.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();
                    Result = rdr.Read();

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Notifications

        #region Website Distributors

        internal static WebsiteDistributors WebsiteDistributorsGet()
        {
            WebsiteDistributors Result = new WebsiteDistributors();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.COUNTRY_CODE, a.NAME, a.URL, a.ISACTIVE, a.CONTINENT, a.AUTO_REDIRECT " +
                        "FROM WEBSITE_DISTRIBUTORS a WHERE a.ISACTIVE = 'Y' ORDER BY a.CONTINENT, a.NAME";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new WebsiteDistributor(rdr.GetInt64(0), rdr.GetString(1).Trim(), rdr.GetString(2).Trim(),
                                rdr.GetString(3), rdr.GetString(4) == "Y", rdr.GetString(5), rdr.GetString(6) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Website Distributors

        #region POS Installer

        internal static void POSInstallerAddLicence(User user, string fileName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO POS_LICENCES (MEMBER_ID, STORE_COUNT, TILL_COUNT, IS_ACTIVE, REMOTE_DATABASE) " +
                    "VALUES(@MEMBER_ID, 1000, 1000, 'Y', @REMOTE_DATABASE)";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@REMOTE_DATABASE", FbDbType.VarChar, 250, fileName);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Install a client or server instance of the POS
        /// </summary>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="computerName"></param>
        /// <param name="serverName"></param>
        /// <returns></returns>
        internal static POSInstall POSInstallerAdd(string email, string password, 
            string computerName, string serverName, string installType)
        {
            POSInstall Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT p.OPVALID, p.OPREMOTEDB, p.OPSERVER, p.OPSTOREID, p.OPTILLID " +
                    "FROM POS_INSTALL_LOCATION(@EMAIL, @PASSWORD, @COMPUTERNAME, @SERVERNAME, @INSTALLTYPE) p;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email);
                    AddParam(cmd, "@PASSWORD", FbDbType.VarChar, 50, EncryptPassword(password));
                    AddParam(cmd, "@COMPUTERNAME", FbDbType.VarChar, 250, computerName);
                    AddParam(cmd, "@SERVERNAME", FbDbType.VarChar, 250, serverName);
                    AddParam(cmd, "@INSTALLTYPE", FbDbType.VarChar, 30, installType);

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new POSInstall(rdr.GetString(0) == "Y", rdr.GetString(1),
                            rdr.GetString(2), rdr.GetInt32(3), rdr.GetInt32(4));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a list of servers for the user
        /// </summary>
        /// <param name="email">users email</param>
        /// <param name="password">users password</param>
        /// <returns>delimeted list of servers</returns>
        internal static POSInstall POSInstallerServers(string email, string password)
        {
            POSInstall Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPVALID, p.OPSERVERS FROM POS_INSTALL_SERVERS(@EMAIL, @PASSWORD) p";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email);
                    AddParam(cmd, "@PASSWORD", FbDbType.VarChar, 50, EncryptPassword(password));

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new POSInstall(rdr.GetString(0) == "Y", rdr.GetString(1));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Determines wether the install is valid or not
        /// </summary>
        /// <param name="storeID">Store to be validated</param>
        /// <returns>true if valid, otherwise false</returns>
        internal static bool POSInstallValid(string storeID)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT DISTINCT a.IS_ACTIVE FROM POS_LICENCES a " +
                        "LEFT JOIN POS_LICENCE_INSTALLS li ON (li.LICENCE_ID = a.ID) WHERE li.STORE_ID = {0};",
                        storeID);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = rdr.GetString(0) == "Y";
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void POSInstallSetSiteID(int siteID)
        {
            FbTransaction tran = null;
            FbConnectionStringBuilder conn = new FbConnectionStringBuilder(GetConnectionString(DatabaseType.Standard));
            conn.Role = "RDB$ADMIN";
            conn.UserID = "SYSDBA";
            conn.Password = "Sh1f00Us3r";

            FbConnection db = new FbConnection(conn.ToString());
            try
            {
                db.Open();
                tran = db.BeginTransaction();
                try
                {
                    string SQL = String.Format("EXECUTE BLOCK AS " +
                        "  DECLARE VARIABLE vSiteID INTEGER = {0};  " +
                        "  DECLARE VARIABLE vGenValue BIGINT;  " +
                        "  DECLARE VARIABLE vGenName VARCHAR(31);  " +
                        "  DECLARE VARIABLE vNewValue BIGINT;  " +
                        "BEGIN  " +
                        "    UPDATE POS_CURRENT_LOCATION SET SITE_ID = :vSiteID;  " +
                        "    UPDATE REPLICATE$OPTIONS SET SITE_ID = :vSiteID;  " +
                        "  " +
                        "    IF(NOT EXISTS(SELECT ID FROM STORES WHERE ID = :vSiteID)) THEN " +
                        "    BEGIN " +
                        "        INSERT INTO STORES(ID, DESCRIPTION, ENFORCE_STOCK_LEVELS) VALUES(:vSiteID, '{1}', 'Y'); " +
                        "    END " +
                        " " +
                        "    FOR " +
                        "        SELECT TRIM(a.RDB$GENERATOR_NAME) " +
                        "        FROM RDB$GENERATORS a " +
                        "        WHERE a.RDB$SYSTEM_FLAG = 0 AND a.RDB$GENERATOR_NAME NOT LIKE 'REPLICATE%' " +
                        "        INTO: vGenName " +
                        "    DO " +
                        "    BEGIN " +
                        "      EXECUTE STATEMENT 'SELECT GEN_ID(' || vGenName || ', 0) FROM RDB$DATABASE' INTO: vGenValue; " +
                        "            vNewValue = vGenValue * vSiteID; " +
                        "            EXECUTE STATEMENT 'SET GENERATOR ' || vGenName || ' TO ' || vNewValue; " +
                        "      END " +
                        "END ", siteID, Environment.MachineName);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);

                        tran.Commit();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, siteID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion POS Installer

        #region Competition Registration

        /// <summary>
        /// Registers a user for a competition
        /// </summary>
        /// <param name="firstName">Users first name</param>
        /// <param name="lastName">Users last name</param>
        /// <param name="email">Users email address</param>
        /// <param name="dateOfBirth">Users Date of Birth (optional)</param>
        /// <param name="receiveUpdates">Indicates wether the user will receive email updates</param>
        /// <param name="country">Users Country</param>
        /// <param name="campaign">Campaign user is registering for</param>
        internal static void RegisterUserForCompetition(string firstName, string lastName, string email, string password,
            DateTime dateOfBirth, bool receiveUpdates, Country country, Campaign campaign)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_COMPETITION_REGISTRATION";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipEMAIL", FbDbType.VarChar, 100, email);
                    AddParam(cmd, "@ipFIRSTNAME", FbDbType.VarChar, 50, firstName);
                    AddParam(cmd, "@ipLASTNAME", FbDbType.VarChar, 80, lastName);
                    AddParam(cmd, "@ipDATEOFBIRTH", FbDbType.Date, dateOfBirth);
                    AddParam(cmd, "@ipRECEIVEUPDATES", FbDbType.Char, 1, receiveUpdates ? "T" : "F");
                    AddParam(cmd, "@ipPASSWORD", FbDbType.VarChar, 50, password);
                    AddParam(cmd, "@ipCOUNTRYID", FbDbType.Integer, country.ID);
                    AddParam(cmd, "@ipCOMPETITIONNAME", FbDbType.VarChar, 40, campaign.CampaignName);

                    cmd.ExecuteNonQuery();
                    tran.Commit();

                    CloseAndDispose(ref cmd);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Competition Registration

        #region TagLines

        /// <summary>
        /// Delete's a TagLine
        /// </summary>
        /// <param name="tagLine">TagLine to be deleted</param>
        internal static void TagLineDelete(TagLine tagLine)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_TAGLINES WHERE ID = {0}", tagLine.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Save's a TagLine object
        /// </summary>
        /// <param name="tagLine"></param>
        internal static void TagLineSave(TagLine tagLine)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = string.Format("UPDATE WS_TAGLINES SET DESCRIPTION = @DESC WHERE ID = {0}", tagLine.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DESC", FbDbType.VarChar, 250, tagLine.Text);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves a collection of TagLines
        /// </summary>
        /// <returns>TagLines collection</returns>
        internal static TagLines TagLinesGet()
        {
            TagLines Result = new TagLines();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_TAGLINES a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new TagLine(rdr.GetInt64(0), rdr.GetString(1)));
                        }

                        CloseAndDispose(ref cmd, ref rdr);
                    }
                    finally
                    {
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Creates a new tag line
        /// </summary>
        /// <param name="text">Tag line text</param>
        /// <returns>TagLine object</returns>
        internal static TagLine TagLineCreate(string text)
        {
            TagLine Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM SP_WS_TAGLINES_CREATE a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new TagLine(rdr.GetInt64(0), rdr.GetString(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion TagLines

        #region Searching

        /// <summary>
        /// Searches the database
        /// </summary>
        /// <param name="memberLevel">Member level of user completing the search</param>
        /// <param name="terms">Search Terms
        /// 
        /// Individual words seerated by a space</param>
        /// <param name="useAND">if true values are AND together ortherwise OR together</param>
        /// <returns>Search collection</returns>
        internal static Search SearchSubmit(MemberLevel memberLevel, string terms, bool useAND)
        {
            Search Result = new Search();

            string Criteria = "";
            string[] words = terms.Split(' ');

            foreach (string word in words)
            {
                if (String.IsNullOrEmpty(Criteria))
                {
                    Criteria = String.Format("WHERE (OPTEXT LIKE '%{0}%')", word.ToUpper().Replace("'", "''"));
                }
                else
                {
                    if (useAND)
                        Criteria += String.Format(" AND (opTEXT LIKE '%{0}%')", word.ToUpper().Replace("'", "''"));
                    else
                        Criteria += String.Format(" OR (opTEXT LIKE '%{0}%')", word.ToUpper().Replace("'", "''"));
                }
            }

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPDESCRIPTION, p.OPRESULT_TYPE, p.OPMEMBER_LEVEL, p.OPID, p.OPTEXT, p.OPURL, p.OPPRIMARY_PRODUCT_TYPE " +
                        "FROM WSP_SEARCH({1}) p {0} ORDER BY p.OPMEMBER_LEVEL DESC, p.opRESULT_TYPE", Criteria, (int)memberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SearchItem(rdr.GetString(0), (Enums.SearchResultType)rdr.GetInt32(1), (MemberLevel)rdr.GetInt32(2),
                                rdr.GetInt64(3), rdr.GetString(4), rdr.GetString(5), rdr.GetInt32(6)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Searching

        #region Training Courses

        /// <summary>
        /// Saves changes to a training course
        /// </summary>
        /// <param name="course">Course to be saved</param>
        internal static void TrainingCourseSave(Course course)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE TRAINING_COURSE SET COURSE = {0}, TRAINER = {1} WHERE ID = {2};",
                        course.CourseType.ID, course.Trainer.EmployeeID, course.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);


                    SQL = String.Format("DELETE FROM TRAINING_ATTENDEES WHERE COURSE_ID = {0}", course.ID);
                    cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    foreach (Attendee attendee in course.CourseAttendees)
                    {
                        SQL = String.Format("INSERT INTO TRAINING_ATTENDEES (COURSE_ID, SALON_ID, NO_OF_ATTENDEES, TOTAL_PAID) " +
                            "VALUES ({0}, {1}, {2}, {3})", course.ID, attendee.Salon.ID, attendee.NumberOfAttendees, attendee.TotalPaid);
                        cmd = new FbCommand(SQL, db, tran);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves the salons attending a course
        /// </summary>
        /// <param name="course">course</param>
        /// <returns>Attendees collection</returns>
        internal static Attendees TrainingCourseAttendeesGet(Course course)
        {
            Attendees Result = new Attendees();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.COURSE_ID, a.NO_OF_ATTENDEES, a.TOTAL_PAID, s.ID, " +
                        "s.NAME, s.IMAGE, s.CONTACT_NAME, s.ADDRESS, s.TELEPHONE, s.FAX, s.EMAIL, s.URL, " +
                        "s.SALON_STOCKIST, s.LOCATION, s.SORT_ORDER, s.POSTCODE, s.VIP, s.SHOW_ON_WEB, s.SALON_TYPE, " +
                        "s.OPENING_TIMES " +
                        "FROM TRAINING_ATTENDEES a LEFT JOIN WS_SALONS s ON (s.ID = a.SALON_ID) WHERE a.COURSE_ID = {0}", course.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Salon salon = new Salon(rdr.GetInt32(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11), rdr.GetInt32(12) == 0, rdr.GetInt32(13),
                                rdr.GetInt32(14), rdr.GetString(15), rdr.GetString(16) == "T", rdr.GetInt32(17) == 0,
                                (Enums.SalonType)rdr.GetInt32(18), rdr.IsDBNull(19) ? String.Empty : rdr.GetString(19));
                            Result.Add(new Attendee(salon, rdr.GetInt32(1), rdr.GetDouble(2)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves a collection of training courses
        /// </summary>
        /// <returns>Courses collection</returns>
        internal static Courses TrainingCoursesGet()
        {
            return (null);
        }

        /// <summary>
        /// Create a training Course for an appointment
        /// </summary>
        /// <param name="appointment">Appointment Course being created for</param>
        /// <returns>Course object</returns>
        internal static Course TrainingCoursesCreate(Appointment appointment, TrainingCourse course, Therapist trainer)
        {
            Course Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO TRAINING_COURSE (ID, TRAINER, COURSE) VALUES ( " +
                        "{0}, {1}, {2})", appointment.ID, trainer.EmployeeID, course.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    Result = new Course(appointment.ID, trainer, course);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, appointment, course, trainer);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves an actual training Course
        /// </summary>
        /// <param name="id">ID of training course to retrieve</param>
        /// <returns>Course</returns>
        internal static Course TrainingCoursesGet(Int64 id)
        {
            Course Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT c.ID, c.TRAINER, tc.ID, tc.COURSE_NAME, " +
                        "tc.COURSE_COST, tc.MAXIMUM_ATTENDEES, tc.ADDITIONAL_ATTENDEE_COST, " +
                        "tc.COURSE_LENGTH, tc.MAXIMUM_SALON_ATTENDEES FROM TRAINING_COURSE c " +
                        "LEFT JOIN TRAINING_COURSES tc ON (tc.ID = c.COURSE) WHERE c.ID = {0}", id);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Therapist trainer = TherapistGet(rdr.GetInt64(1), db, tran);

                        Result = new Course(rdr.GetInt32(0), trainer, new TrainingCourse(rdr.GetInt32(2), rdr.GetString(3),
                            rdr.GetInt32(5), rdr.GetDouble(4), rdr.GetDouble(6), rdr.GetInt32(7),
                            rdr.GetInt32(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns an individual training course
        /// </summary>
        /// <param name="id">ID of training course</param>
        /// <returns>TrainingCourse object</returns>
        internal static TrainingCourse TrainingCourseGet(int id)
        {
            TrainingCourse Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.COURSE_NAME, a.COURSE_COST, a.MAXIMUM_ATTENDEES, " +
                        "a.ADDITIONAL_ATTENDEE_COST, a.COURSE_LENGTH, a.MAXIMUM_SALON_ATTENDEES " +
                        "FROM TRAINING_COURSES a ORDER BY a.COURSE_NAME;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result = new TrainingCourse(rdr.GetInt32(0), rdr.GetString(1),
                            rdr.GetInt32(3), rdr.GetDouble(2), rdr.GetDouble(4), rdr.GetInt32(5),
                            rdr.GetInt32(6));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a collection of Training Courses
        /// </summary>
        /// <returns>TrainingCourses collection</returns>
        internal static TrainingCourses TrainingCourseGet()
        {
            TrainingCourses Result = new TrainingCourses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.COURSE_NAME, a.COURSE_COST, a.MAXIMUM_ATTENDEES, " +
                        "a.ADDITIONAL_ATTENDEE_COST, a.COURSE_LENGTH, a.MAXIMUM_SALON_ATTENDEES " +
                        "FROM TRAINING_COURSES a ORDER BY a.COURSE_NAME;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TrainingCourse(rdr.GetInt32(0), rdr.GetString(1),
                            rdr.GetInt32(3), rdr.GetDouble(2), rdr.GetDouble(4), rdr.GetInt32(5),
                            rdr.GetInt32(6)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Training Courses

        #region Store Locations

        /// <summary>
        /// Returns a collection of Store Locations
        /// </summary>
        /// <returns>Locations object</returns>
        internal static Locations StoreLocationsGet()
        {
            Locations Result = new Locations();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM STORES a ORDER BY a.DESCRIPTION;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StoreLocation(rdr.GetInt32(0), rdr.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves an individual store location based on the ID
        /// </summary>
        /// <param name="id">ID of store location to retrieve</param>
        /// <returns>StoreLocation object</returns>
        internal static StoreLocation StoreLocationGet(int id)
        {
            StoreLocation Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION FROM STORES a WHERE a.ID = {0};", id);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StoreLocation(rdr.GetInt32(0), rdr.GetString(1));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Store Locations

        #region Split Payments

        /// <summary>
        /// Adds a split payment entry into the database
        /// </summary>
        /// <param name="invoice">invoice to which payment applies</param>
        /// <param name="cash">total cash</param>
        /// <param name="cheque">total cheque</param>
        /// <param name="card">total card</param>
        /// <param name="vouchers">total voucher</param>
        internal static void SplitPaymentAdd(Order order, decimal cash, decimal cheque, decimal card, decimal vouchers)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_INVOICE_SPLIT_PAYMENTS (INVOICE_ID, AMOUNT_CASH, AMOUNT_CHEQUE, AMOUNT_CARD, AMOUNT_VOUCHERS) " +
                        "VALUES ({0}, {1}, {2}, {3}, {4});", order.ID, cash, cheque, card, vouchers);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, order, cash, cheque, card, vouchers);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Split Payments

        #region Web Hacking Attempts

        internal static void WebHackingConnection(string ipAddress, string data, ulong request,
            DateTime created, DateTime lastEntry, int results, string location, string userAgent)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "INSERT INTO HACKING_ATTEMPTS (IP_ADDRESS, REQUEST_DATA, REQUESTS, DATE_CREATED, DATE_LAST_ENTRY, RESULTS, LOCATION, USER_AGENT) " +
                        "VALUES (@ipAddress, @requestData, @requests, @created, @lastEntry, @results, @location, @userAgent);";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipAddress", FbDbType.VarChar, 60, ipAddress.Substring(0, ipAddress.Length < 60 ? ipAddress.Length : 59));
                    AddParam(cmd, "@requestData", FbDbType.VarChar, 32000, data.Substring(0, data.Length < 32000 ? data.Length : 31999));
                    AddParam(cmd, "@requests", FbDbType.BigInt, request);
                    AddParam(cmd, "@created", FbDbType.Date, created);
                    AddParam(cmd, "@lastEntry", FbDbType.Date, lastEntry);
                    AddParam(cmd, "@results", FbDbType.Integer, results);
                    AddParam(cmd, "@location", FbDbType.VarChar, 100, location.Substring(0, location.Length < 100 ? location.Length : 99));

                    if (userAgent == null)
                        AddParam(cmd, "@UserAgent", FbDbType.VarChar, 1000, "");
                    else
                        AddParam(cmd, "@userAgent", FbDbType.VarChar, 1000, userAgent.Substring(0, userAgent.Length < 1000 ? userAgent.Length : 999));

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ipAddress, data, request, created, lastEntry, results);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Web Hacking Attempts

        #region Cash Denominations

        /// <summary>
        /// Retrieves all currency denominations for a country
        /// </summary>
        /// <param name="country">Country who's denomination is sought</param>
        /// <returns>CashDenominations collection</returns>
        internal static CashDenominations CashDenominationsGet(Country country)
        {
            CashDenominations Result = new CashDenominations();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.IS_NOTE, a.CASH_VALUE, a.LINK_VALUE " +
                        "FROM WS_CASH_DRAWER_DENOMINATIONS a WHERE a.COUNTRY_ID = {0}", country.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new CashDenomination(rdr.GetInt64(0), rdr.GetString(1) == "Y",
                            rdr.GetDecimal(2), rdr.GetDecimal(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Cash Denominations

        #region Cash Drawer

        /// <summary>
        /// Returns stats for today's cash drawer
        /// </summary>
        /// <returns></returns>
        internal static string CashDrawerVerify(int storeID, Country country,
            Currency currency, DateTime date, CashDrawerType type)
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Empty;

                    switch (type)
                    {
                        case CashDrawerType.Till:
                            SQL = String.Format("SELECT opDESCRIPTION, opTOTAL FROM WSF_CASH_DRAWER_VALUES(@DATE, {0}, {1})", storeID, (int)type);
                            break;
                        case CashDrawerType.Safe:
                            SQL = String.Format("SELECT opDESCRIPTION, opTOTAL FROM WSF_CASH_DRAWER_VALUES_SAFE(@DATE, {0}, {1})", storeID, (int)type);
                            break;
                        case CashDrawerType.PettyCash:
                            SQL = String.Format("SELECT opDESCRIPTION, opTOTAL FROM WSF_CASH_DRAWER_VALUES_CASH(@DATE, {0}, {1})", storeID, (int)type);
                            break;
                    }

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DATE", FbDbType.Date, date);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                        Result += String.Format("{0}~{1}#", rdr.GetString(0), SharedUtils.FormatMoney(rdr.GetDecimal(1), currency));

                    CloseAndDispose(ref cmd, ref rdr);
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Determines if a check was made in the last 10 minutes or not
        /// </summary>
        /// <returns></returns>
        internal static bool CashDrawer10MinuteCheck()
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID FROM WS_CASH_DRAWER a WHERE a.DRAWER_TYPE = 0 AND a.CHECK_TYPE = 'CHECK' AND a.CHECK_DATE >= CURRENT_TIMESTAMP - 0.010";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = true;

                    CloseAndDispose(ref cmd, ref rdr);
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Indicates wether the start of day cash drawer check has been completed or not
        /// </summary>
        /// <returns></returns>
        internal static bool CashDrawerDailyStartComplete(CashDrawerType type)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID FROM WS_CASH_DRAWER a WHERE CAST(a.CHECK_DATE as DATE) = CURRENT_DATE AND a.CHECK_TYPE = 'START' AND a.DRAWER_TYPE = {0}", (int)type);

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                            Result = true;
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void CashDrawerSubmit(User user, string checkType, CashDrawerType type, string notes,
            int Pound500, int Pound100, int Pound50, int Pound20, int Pound10, int Pound5, int Pound2,
            int Pound1, int Pence50, int Pence20, int Pence10, int Pence5, int Pence2, int Pence1)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_CASH_DRAWER (STORE_ID, TILL_ID, CHECK_DATE, USER_ID, " +
                        "CHECK_TYPE, DENOMINATION_500_POUND, DENOMINATION_100_POUND, DENOMINATION_50_POUND, " +
                        "DENOMINATION_20_POUND, DENOMINATION_10_POUND, DENOMINATION_5_POUND, DENOMINATION_2_POUND, " +
                        "DENOMINATION_1_POUND, DENOMINATION_50_PENCE, DENOMINATION_20_PENCE, DENOMINATION_10_PENCE, " +
                        "DENOMINATION_5_PENCE, DENOMINATION_2_PENCE, DENOMINATION_1_PENCE, DRAWER_TYPE, NOTES) VALUES ({0}, {1}, CURRENT_TIMESTAMP, " +
                        "{2}, '{3}', {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, @NOTES);",
                        DALHelper.StoreID, DALHelper.TillID, user.ID, checkType, Pound500, Pound100, Pound50,
                        Pound20, Pound10, Pound5, Pound2, Pound1, Pence50, Pence20, Pence10, Pence5, Pence2, Pence1,
                        (int)type);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@NOTES", FbDbType.VarChar, 250, notes.Trim());

                        cmd.ExecuteNonQuery();
                        tran.Commit();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, checkType, Pound500, Pound100, Pound50,
                        Pound20, Pound10, Pound5, Pound2, Pound1, Pence50, Pence20, Pence10, Pence5, Pence2, Pence1, type, notes);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Cash Drawer

        #region Mail Lists

        internal static Dictionary<string, string> MailListSubscribers()
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {

                try
                {
                    //try updating ws_members first
                    string SQL = "SELECT a.ID, a.NAME, a.EMAIL, a.DATE_SUBSCRIBED " +
                        "FROM WS_MAIL_SUBSCRIBERS a ORDER BY a.DATE_SUBSCRIBED DESC";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(rdr.GetString(2), rdr.GetString(1));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Method for user to subscribe to mail list
        /// </summary>
        /// <param name="name"></param>
        /// <param name="email"></param>
        internal static void MailListSubscribe(string name, string email)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    //try updating ws_members first
                    string SQL = "UPDATE WS_MEMBERS SET RECEIVE_EMAIL_SPECIAL_OFFERS = 'T' WHERE LOWER(EMAIL) = @EMAIL;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email.Trim().ToLower());
                    int isRemoved = cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    if (isRemoved == 0)
                    {
                        // if not found in members, add to the standard mail list
                        SQL = "INSERT INTO WS_MAIL_SUBSCRIBERS (NAME, EMAIL)  VALUES (@NAME, @EMAIL);";

                        cmd = new FbCommand(SQL, db, tran);
                        AddParam(cmd, "@NAME", FbDbType.VarChar, 100, name.Trim());
                        AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email.Trim().ToLower());
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Method for user to unsubscribe from email list
        /// </summary>
        /// <param name="email"></param>
        /// <param name="reason"></param>
        internal static bool MailListUnsubscribe(string email, string reason)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "DELETE FROM WS_MAIL_SUBSCRIBERS WHERE EMAIL = @EMAIL;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email.Trim().ToLower());
                    int isDeleted = cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    if (isDeleted == 0)
                    {
                        //record not found
                        SQL = "UPDATE WS_MEMBERS SET RECEIVE_EMAIL_SPECIAL_OFFERS = 'F' WHERE LOWER(EMAIL) = @EMAIL AND RECEIVE_EMAIL_SPECIAL_OFFERS = 'T';";
                        cmd = new FbCommand(SQL, db, tran);
                        AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, email.Trim().ToLower());
                        isDeleted = cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);

                        Result = isDeleted == 1;
                    }
                    else
                        Result = true;

                    if (Result)
                    {
                        //SQL = "INSERT INTO POS_VALIDATION_CHECKS (USER_ID, CHECK_TYPE, CHECK_DATE, REASON) " +
                        //    "VALUES (@USER_ID, @CHECK_TYPE, CURRENT_TIMESTAMP, @REASON);";

                        //cmd = new FbCommand(SQL, db, tran);
                        //AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);
                        //AddParam(cmd, "@CHECK_TYPE", FbDbType.Integer, (int)ValidationReasons.UnsubscribeEmail);
                        //AddParam(cmd, "@REASON", FbDbType.VarChar, 200, reason.Trim());

                        //cmd.ExecuteNonQuery();

                        //CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Mail Lists

        #region Validation Checks

        internal static void ValidationCheckAdd(User user, ValidationReasons checkType, string reason)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "INSERT INTO POS_VALIDATION_CHECKS (USER_ID, CHECK_TYPE, CHECK_DATE, REASON) " +
                        "VALUES (@USER_ID, @CHECK_TYPE, CURRENT_TIMESTAMP, @REASON);";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@CHECK_TYPE", FbDbType.Integer, (int)checkType);
                    AddParam(cmd, "@REASON", FbDbType.VarChar, 200, reason);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Validation Checks

        #region Hash Tags

        /// <summary>
        /// Returns all tags associated with a page
        /// </summary>
        /// <param name="PageName">Name of Page</param>
        /// <returns>hash Tags Collection</returns>
        internal static HashTags HashTagsGet(string PageName)
        {
            HashTags Result = new HashTags();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT t.ID, t.TAG FROM WS_HASH_TAG_PAGES ht LEFT JOIN WS_HASH_TAGS_TO_PAGES htp ON " +
                    "(htp.PAGE_ID = ht.ID) " +
                    "LEFT JOIN WS_HASH_TAGS t ON (t.ID = htp.TAG_ID) WHERE (t.ID IS NOT NULL) AND (ht.PAGE_NAME = @PAGE); ";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PAGE", FbDbType.VarChar, 500, PageName.ToUpper());

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new HashTag(rdr.GetInt64(0), rdr.GetString(1)));
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageName);
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns all tags 
        /// </summary>
        /// <returns>hash Tags Collection</returns>
        internal static HashTags HashTagsGet()
        {
            HashTags Result = new HashTags();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT t.ID, t.TAG FROM WS_HASH_TAGS t;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new HashTag(rdr.GetInt64(0), rdr.GetString(1)));
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Creates a new #Tag
        /// </summary>
        /// <param name="tagName">Name of tag to create</param>
        /// <returns>HashTag Object</returns>
        internal static HashTag HashTagCreate(string tagName)
        {
            HashTag Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_HASHTAG_CREATE";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipTAGNAME", FbDbType.VarChar, 30, tagName);
                    AddParam(cmd, "@opTAGID", FbDbType.BigInt);
                    AddParam(cmd, "@opTAGNAME", FbDbType.VarChar);

                    cmd.ExecuteNonQuery();

                    Result = new HashTag(Convert.ToInt64(cmd.Parameters["@opTAGID"].Value),
                        (string)cmd.Parameters["@opTAGNAME"].Value);
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, tagName);
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Adds a hashtag to a page
        /// </summary>
        /// <param name="tag">Tag to add</param>
        /// <param name="pageName">PageName</param>
        internal static void HashTagAdd(HashTag tag, string pageName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_HASHTAG_ADD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipTAGID", FbDbType.BigInt, tag.ID);
                    AddParam(cmd, "@ipPAGE_NAME", FbDbType.VarChar, 500, pageName.ToUpper());
                    cmd.ExecuteNonQuery();
                }
                catch (Exception err)
                {
                    if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY"))
                    {
                        ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, tag, pageName);
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// removes a hashtag from a page
        /// </summary>
        /// <param name="tag">Tag to remove</param>
        /// <param name="pageName">PageName</param>
        internal static void HashTagRemove(HashTag tag, string pageName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_HASHTAG_REMOVE";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipTAGID", FbDbType.BigInt, tag.ID);
                    AddParam(cmd, "@ipPAGE_NAME", FbDbType.VarChar, 500, pageName.ToUpper());
                    cmd.ExecuteNonQuery();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, tag, pageName);
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Hash Tags

        #region Vouchers

        internal static Voucher VoucherGet(string voucherCode)
        {
            Voucher Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.VOUCHER_CODE, a.ISSUE_DATE, a.EXPIRE_DATE, a.VOUCHER_AMOUNT, a.REDEEM_DATE, a.USER_ID " +
                        "FROM WS_VOUCHERS a WHERE REPLACE(a.VOUCHER_CODE, '-','') = @VOUCHERCODE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@VOUCHERCODE", FbDbType.VarChar, 80, voucherCode.Replace("-", "").ToUpper());
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Voucher(rdr.GetInt64(0), rdr.GetString(1), rdr.GetDecimal(4), !rdr.IsDBNull(2), rdr.GetDateTime(3));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, voucherCode);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void VouchersMarkAllAsSold(User currentUser)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_VOUCHERS SET ISSUE_DATE = CURRENT_DATE, EXPIRE_DATE = CURRENT_DATE + 360, " +
                    "USER_ID = @MEMBER_ID WHERE ISSUE_DATE IS NULL;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, currentUser.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void VoucherMarkAsUnsold(User currentUser, string voucherCode)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_VOUCHERS SET ISSUE_DATE = NULL, EXPIRE_DATE = NULL WHERE " +
                    "VOUCHER_CODE = @VOUCHER_CODE AND USER_ID = @USER_ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@VOUCHER_CODE", FbDbType.VarChar, 80, voucherCode);
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, currentUser.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Redeems a voucher that has previously been sold
        /// </summary>
        /// <param name="voucherCode">Voucher Code</param>
        /// <param name="value">Value of voucher</param>
        internal static decimal RedeemVoucher(string voucherCode, User user, bool validateOnly)
        {
            decimal Result = 0m;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_VOUCHER_REDEEM";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPVOUCHERCODE", FbDbType.VarChar, 80, voucherCode.ToUpper());
                    AddParam(cmd, "@IPUSER", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@OPAMOUNT", FbDbType.Double);
                    cmd.ExecuteNonQuery();

                    Result = Convert.ToDecimal(cmd.Parameters["@OPAMOUNT"].Value);

                    CloseAndDispose(ref cmd);

                    if (validateOnly)
                        tran.Rollback();
                    else
                        tran.Commit();
                }
                catch //(Exception err)
                {
                    //ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, voucherCode, user, validateOnly);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void CreateVoucher(string VoucherCode, decimal value)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_VOUCHER_CREATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);


                    AddParam(cmd, "@IPVOUCHERCODE", FbDbType.VarChar, 80, VoucherCode.ToUpper());
                    AddParam(cmd, "@IPAMOUNT", FbDbType.Double, value);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void SellVouchers(Vouchers vouchers)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    foreach (Voucher voucher in vouchers)
                    {
                        string SQL = "WSP_VOUCHER_PURCHASE";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        PrepareCommand(cmd);


                        AddParam(cmd, "@IPVOUCHERCODE", FbDbType.VarChar, 80, voucher.Code.ToUpper());
                        AddParam(cmd, "@IPUSER", FbDbType.BigInt, voucher.User.ID);
                        AddParam(cmd, "@ipVALUE", FbDbType.Double, voucher.Amount);

                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, vouchers);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Sell a voucher
        /// </summary>
        /// <param name="voucherCode">Voucher Code</param>
        /// <param name="value">Value of voucher</param>
        /// <param name="user">User who is redeeming the voucher</param>
        internal static void SellVoucher(string voucherCode, decimal value, User user, bool validateOnly)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_VOUCHER_PURCHASE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPVOUCHERCODE", FbDbType.VarChar, 80, voucherCode.ToUpper());
                    AddParam(cmd, "@IPUSER", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@ipVALUE", FbDbType.Double, value);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    if (validateOnly)
                        tran.Rollback();
                    else
                        tran.Commit();
                }
                catch (Exception err)
                {
                    if (!err.Message.Contains("EXC_VOUCHER_NOT_EXIST") && !err.Message.Contains("EXC_VOUCHER_ALREADY_SOLD"))
                        ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, voucherCode, value, user, validateOnly);

                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Vouchers

        #region Internal AppointmentGroup methods

        /// <summary>
        /// Select individual record from  table WS_APPOINTMENT_GROUPS
        /// </summary>
        internal static AppointmentGroup AppointmentGroupSelect(int Id)
        {
            AppointmentGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opDESCRIPTION " +
                        "FROM spWS_APPOINTMENT_GROUPS_GET(@ipId);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipId", FbDbType.Integer, Id);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new AppointmentGroup(rdr.GetInt32(0), rdr.GetString(1));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table WS_APPOINTMENT_GROUPS
        /// </summary>
        internal static AppointmentGroup AppointmentGroupInsert(string description)
        {
            AppointmentGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWS_APPOINTMENT_GROUPS_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipdescription", FbDbType.VarChar, description);
                    AddParam(cmd, "@opid", FbDbType.Integer);
                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opId"].Value;

                    tran.Commit();
                    Result = new AppointmentGroup(newID, description);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table WS_APPOINTMENT_GROUPS
        /// </summary>
        internal static bool AppointmentGroupUpdate(AppointmentGroup item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWS_APPOINTMENT_GROUPS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.Integer, item.ID);
                    AddParam(cmd, "@ipDescription", FbDbType.VarChar, item.Description);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Delete individual record from  table WS_APPOINTMENT_GROUPS
        /// </summary>
        internal static bool AppointmentGroupDelete(AppointmentGroup item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWS_APPOINTMENT_GROUPS_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipId", FbDbType.Integer, item.ID);
                    cmd.ExecuteNonQuery();
                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a collection of appointment groups
        /// </summary>
        /// <returns>AppointmentGroups collection</returns>
        internal static AppointmentGroups AppointmentGroupsGet()
        {
            AppointmentGroups Result = new AppointmentGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_APPOINTMENT_GROUPS a ORDER BY a.DESCRIPTION";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentGroup(rdr.GetInt32(0), rdr.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Internal AppointmentGroup methods

        #region Permissions

        internal static SecurityEnums.SecurityPermissionsPOS PermissionsGet(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_POS FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsPOS)Permissions);
        }

        internal static void PermissionsSet(User user, SecurityEnums.SecurityPermissionsPOS permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_POS = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void PermissionsSetAccounts(User user, SecurityEnums.SecurityPermissionsAccounts permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_INVOICING = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void PermissionsSetCalendar(User user, SecurityEnums.SecurityPermissionsCalendar permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_CALENDAR = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void PermissionsSetWebsite(User user, SecurityEnums.SecurityPermissionsWebsite permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_WEBSITE = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static SecurityEnums.SecurityPermissionsReports PermissionsGetReports(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_REPORTS FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsReports)Permissions);
        }

        internal static void PermissionsSetReports(User user, SecurityEnums.SecurityPermissionsReports permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_REPORTS = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static SecurityEnums.SecurityPermissionsStaff PermissionsGetStaff(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_STAFF FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsStaff)Permissions);
        }

        internal static void PermissionsSetStaff(User user, SecurityEnums.SecurityPermissionsStaff permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_STAFF = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static SecurityEnums.SecurityPermissionsAccounts PermissionsGetAccounts(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_INVOICING FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsAccounts)Permissions);
        }

        internal static SecurityEnums.SecurityPermissionsCalendar PermissionsGetCalendar(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_CALENDAR FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsCalendar)Permissions);
        }

        internal static SecurityEnums.SecurityPermissionsWebsite PermissionsGetWebsite(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_WEBSITE FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsWebsite)Permissions);
        }

        internal static void PermissionsSetStock(User user, SecurityEnums.SecurityPermissionsStockControl permissions)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "Update WS_PERMISSIONS SET PERMISSIONS_STOCK = @PERMISSIONS WHERE USER_ID = @USER;";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@PERMISSIONS", FbDbType.BigInt, (Int64)permissions);
                    AddParam(cmd, "@USER", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static SecurityEnums.SecurityPermissionsStockControl PermissionsGetStock(User user)
        {
            Int64 Permissions = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.PERMISSIONS_STOCK FROM WS_PERMISSIONS a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Permissions = rdr.GetInt64(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            Permissions = Permissions == -1 ? 0 : Permissions;
            return ((SecurityEnums.SecurityPermissionsStockControl)Permissions);
        }

        #endregion Permissions

        #region Refunds

        internal static BOL.Refunds.Refunds RefundsGet(DateTime From, DateTime To)
        {
            Refunds Result = new Refunds();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.USER_ID, a.INVOICE_ID, a.REFUND_AMOUNT, a.DATE_REFUNDED, " +
                        "a.EMPLOYEE_ID, a.REASON FROM WS_REFUNDS a WHERE CAST(a.DATE_REFUNDED AS DATE) >= @FROMDATE " +
                        "AND CAST(a.DATE_REFUNDED AS DATE) <= @TODATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FROMDATE", FbDbType.Date, From);
                    AddParam(cmd, "@TODATE", FbDbType.Date, To);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Refund(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetInt32(2), rdr.GetDecimal(3),
                            rdr.GetDateTime(4), rdr.GetInt64(5), rdr.GetString(6)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, From, To);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Int64 RefundCreate(User client, User employee, Invoice invoice, decimal refundAmount, string reason)
        {
            Int64 Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_REFUNDS (USER_ID, INVOICE_ID, REFUND_AMOUNT, EMPLOYEE_ID, REASON) " +
                        "VALUES ({0}, {1}, {2}, {3}, @REASON);", client.ID, invoice.ID, refundAmount, employee.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@REASON", FbDbType.VarChar, 250, reason);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, client, employee, invoice, refundAmount, reason);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion Refunds

        #region Campaigns

        /// <summary>
        /// Indicates wether a user can set the replication status for a campaign
        /// </summary>
        /// <returns></returns>
        internal static bool CampaignsCanSetReplication()
        {
            return (SettingsGet("CAN_REPLICATE_CAMPAIGNS").ToUpper() == "YES");
        }

        internal static void CampaignSendTestEmail(User user, string SenderName, string SenderEmail,
            string Message, string Subject, string CampaignName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CAMPAIGN_TEST_EMAIL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipSenderName", FbDbType.VarChar, 150, SenderName);
                    AddParam(cmd, "@IPSenderEmail", FbDbType.VarChar, 40, SenderEmail);
                    AddParam(cmd, "@ipMessage", FbDbType.Text, Message);
                    AddParam(cmd, "@ipMessageSubject", FbDbType.VarChar, 100, Subject);
                    AddParam(cmd, "@ipCampaignName", FbDbType.VarChar, 30, CampaignName);
                    AddParam(cmd, "@IPRECIPIENT", FbDbType.BigInt, user.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, SenderName, SenderEmail, Message, Subject, CampaignName);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves all campaigns
        /// </summary>
        /// <returns>Campaigns collection</returns>
        internal static Campaigns CampaignsGetActive()
        {
            Campaigns Result = new Campaigns();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, p.OPCAMPAIGN_NAME, " +
                        "p.OPEMAIL_SEND, p.OPEMAIL_SENT, p.OPEMAIL_SENDER, p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, " +
                        "p.OPLETTER_SEND, p.OPLETTER, p.OPIMAGE_MAIN_PAGE, p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE, " +
                        "p.OPPAGE_OFFERS_TEXT, cs.TOTAL_VISITS, cs.TOTAL_INVOICES, cs.TOTAL_SALES, " +
                        "p.opCAMPAIGN_TITLE, p.OPEMAIL_SUBJECT, " +
                        "p.oPLINKOVERRIDE, p.oPACTIVATEPRODUCTGROUP, p.oPCOUPONNAME, p.oPCOUPONPERCENT, " +
                        "p.oPFREEPRODUCTCODE, p.oPMAINPRODUCTCODE, p.opCANREPLICATE, p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, " +
                        "p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6 " +
                        "FROM WSP_CAMPAIGNS_GET p " +
                        "LEFT JOIN WS_CAMPAIGN_STATS cs ON (cs.ID = p.OPID) " +
                        "WHERE p.OPCAMPAIGN_START < CURRENT_TIMESTAMP AND p.OPCAMPAIGN_FINISH > CURRENT_TIMESTAMP " +
                        "ORDER BY p.OPCAMPAIGN_START DESC";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Campaign(rdr.IsDBNull(0) ? 0 : rdr.GetInt32(0), rdr.GetDateTime(1),
                                rdr.GetDateTime(2), rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false,
                                rdr.GetString(5) == "Y" ? true : false, rdr.IsDBNull(19) ? "" : rdr.GetString(19),
                                rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                                rdr.IsDBNull(10) ? "" : rdr.GetString(10), rdr.GetString(11), rdr.GetString(12),
                                rdr.GetString(13), rdr.GetString(14), rdr.IsDBNull(15) ? 0 : rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? 0 : rdr.GetInt32(16), rdr.IsDBNull(17) ? 0.00m : rdr.GetDecimal(17),
                                rdr.GetString(18), rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23),
                                rdr.GetInt32(24), rdr.GetInt32(25), rdr.GetString(26) == "Y" ? true : false,
                                rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28),
                                rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29), rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30),
                                rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Retrieves all campaigns
        /// </summary>
        /// <returns>Campaigns collection</returns>
        internal static Campaigns CampaignsGet()
        {
            Campaigns Result = new Campaigns();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, p.OPCAMPAIGN_NAME, " +
                        "p.OPEMAIL_SEND, p.OPEMAIL_SENT, p.OPEMAIL_SENDER, p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, " +
                        "p.OPLETTER_SEND, p.OPLETTER, p.OPIMAGE_MAIN_PAGE, p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE, " +
                        "p.OPPAGE_OFFERS_TEXT, cs.TOTAL_VISITS, cs.TOTAL_INVOICES, cs.TOTAL_SALES, " +
                        "p.opCAMPAIGN_TITLE, p.OPEMAIL_SUBJECT, " +
                        "p.oPLINKOVERRIDE, p.oPACTIVATEPRODUCTGROUP, p.oPCOUPONNAME, p.oPCOUPONPERCENT, " +
                        "p.oPFREEPRODUCTCODE, p.oPMAINPRODUCTCODE, p.opCANREPLICATE, p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, " +
                        "p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6 " +
                        "FROM WSP_CAMPAIGNS_GET p " +
                        "LEFT JOIN WS_CAMPAIGN_STATS cs ON (cs.ID = p.OPID) " +
                        "ORDER BY p.OPCAMPAIGN_START DESC";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Campaign(rdr.IsDBNull(0) ? 0 : rdr.GetInt32(0), rdr.GetDateTime(1),
                                rdr.GetDateTime(2), rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false,
                                rdr.GetString(5) == "Y" ? true : false, rdr.IsDBNull(19) ? "" : rdr.GetString(19),
                                rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                                rdr.IsDBNull(10) ? "" : rdr.GetString(10), rdr.GetString(11), rdr.GetString(12),
                                rdr.GetString(13), rdr.GetString(14), rdr.IsDBNull(15) ? 0 : rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? 0 : rdr.GetInt32(16), rdr.IsDBNull(17) ? 0.00m : rdr.GetDecimal(17),
                                rdr.GetString(18), rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23),
                                rdr.GetInt32(24), rdr.GetInt32(25), rdr.GetString(26) == "Y" ? true : false,
                                rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28),
                                rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29), rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30),
                                rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves all campaigns
        /// </summary>
        /// <returns>Campaigns collection</returns>
        internal static Campaigns CampaignsGetWizard()
        {
            Campaigns Result = new Campaigns();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, p.OPCAMPAIGN_NAME, p.OPEMAIL_SEND, p.OPEMAIL_SENT, " +
                        "p.OPEMAIL_SENDER, p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, p.OPLETTER_SEND, p.OPLETTER, p.OPIMAGE_MAIN_PAGE, " +
                        "p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE, p.OPPAGE_OFFERS_TEXT, 0, 0, 0.00, p.opCAMPAIGN_TITLE, p.OPEMAIL_SUBJECT, " +
                        "p.oPLINKOVERRIDE, p.oPACTIVATEPRODUCTGROUP, p.oPCOUPONNAME, p.oPCOUPONPERCENT, p.oPFREEPRODUCTCODE, p.oPMAINPRODUCTCODE, p.opCANREPLICATE, " +
                        "p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6 " +
                        "FROM WSP_CAMPAIGNS_GET p ORDER BY p.OPCAMPAIGN_START DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Campaign(rdr.IsDBNull(0) ? -100 : rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetDateTime(2),
                            rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false, rdr.GetString(5) == "Y" ? true : false,
                            rdr.IsDBNull(19) ? "" : rdr.GetString(19), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                            rdr.IsDBNull(10) ? "" : rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetString(13),
                            rdr.GetString(14), rdr.IsDBNull(15) ? -100 : rdr.GetInt32(15), rdr.IsDBNull(16) ? -100 : rdr.GetInt32(16), rdr.IsDBNull(17) ? 0.00m : rdr.GetDecimal(17), rdr.GetString(18),
                            rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23), rdr.GetInt32(24), rdr.GetInt32(25), rdr.GetString(26) == "Y" ? true : false,
                            rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28), rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29),
                            rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30), rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static Campaign CampaignGet(string CampaignName)
        {
            Campaign Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, p.OPCAMPAIGN_NAME, p.OPEMAIL_SEND, p.OPEMAIL_SENT, " +
                        "p.OPEMAIL_SENDER, p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, p.OPLETTER_SEND, p.OPLETTER, p.OPIMAGE_MAIN_PAGE, " +
                        "p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE, p.OPPAGE_OFFERS_TEXT, cs.TOTAL_VISITS, cs.TOTAL_INVOICES, cs.TOTAL_SALES, p.opCAMPAIGN_TITLE, p.OPEMAIL_SUBJECT, " +
                        "p.oPLINKOVERRIDE, p.oPACTIVATEPRODUCTGROUP, p.oPCOUPONNAME, p.oPCOUPONPERCENT, p.oPFREEPRODUCTCODE, p.oPMAINPRODUCTCODE, p.opCANREPLICATE, " +
                        "p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6  " +
                        "FROM WSP_CAMPAIGNS_GET p LEFT JOIN WS_CAMPAIGN_STATS cs ON (cs.CAMPAIGN_NAME = p.OPCAMPAIGN_NAME) WHERE p.OPCAMPAIGN_NAME = @CAMPAIGN_NAME";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@CAMPAIGN_NAME", FbDbType.VarChar, 40, CampaignName);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Campaign(rdr.IsDBNull(0) ? -100 : rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetDateTime(2),
                            rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false, rdr.GetString(5) == "Y" ? true : false,
                            rdr.IsDBNull(19) ? "" : rdr.GetString(19), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                            rdr.IsDBNull(10) ? "" : rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetString(13),
                            rdr.GetString(14), rdr.IsDBNull(15) ? -100 : rdr.GetInt32(15), rdr.IsDBNull(16) ? -100 : rdr.GetInt32(16), rdr.IsDBNull(17) ? 0.00m : rdr.GetDecimal(17), rdr.GetString(18),
                            rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23), rdr.GetInt32(24), rdr.GetInt32(25), rdr.GetString(26) == "Y" ? true : false,
                            rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28), rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29),
                            rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30), rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves the active campaigns
        /// </summary>
        /// <returns>Campaign object, if no campaign running returns null</returns>
        internal static Campaigns CampaignGet(Country currentCountry)
        {
            Campaigns Result = new Campaigns();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, p.OPCAMPAIGN_NAME, p.OPEMAIL_SEND, " +
                        "p.OPEMAIL_SENT, p.OPEMAIL_SENDER, p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, p.OPLETTER_SEND,  " +
                        "    p.OPLETTER, p.OPIMAGE_MAIN_PAGE, p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE,  " +
                        "    p.OPPAGE_OFFERS_TEXT, cs.TOTAL_VISITS, cs.TOTAL_INVOICES, cs.TOTAL_SALES, p.opCAMPAIGN_TITLE,  " +
                        "    p.OPEMAIL_SUBJECT, p.OPLINKOVERRIDE, p.OPACTIVATEPRODUCTGROUP, p.OPCOUPONNAME, p.OPCOUPONPERCENT,  " +
                        "    p.OPFREEPRODUCTCODE, p.OPMAINPRODUCTCODE, p.opCANREPLiCATE, " +
                        "    p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6  " +
                        "FROM WSP_CAMPAIGNS_GET p  " +
                        "    LEFT JOIN WS_CAMPAIGN_STATS cs ON (cs.CAMPAIGN_NAME = p.OPCAMPAIGN_NAME)  " +
                        "    LEFT JOIN WS_CAMPAIGNS_COUNTRIES cc ON (cc.CAMPAIGN_ID = p.OPID) " +
                        "WHERE (p.OPCAMPAIGN_START < CURRENT_TIMESTAMP AND p.OPCAMPAIGN_FINISH > CURRENT_TIMESTAMP) " +
                        "    AND ((cc.COUNTRY_ID IS NULL) OR (cc.COUNTRY_ID = {0})) " +
                        "ORDER BY p.OPCAMPAIGN_START DESC",
                        currentCountry == null ? 0 : currentCountry.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Campaign(rdr.IsDBNull(0) ? -100 : rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetDateTime(2),
                            rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false, rdr.GetString(5) == "Y" ? true : false,
                            rdr.GetString(19), rdr.GetString(7), rdr.GetString(6), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                            rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetString(13),
                            rdr.GetString(14), rdr.IsDBNull(15) ? -100 : rdr.GetInt32(15), rdr.IsDBNull(16) ? -100 : rdr.GetInt32(16), rdr.GetDecimal(17),
                            rdr.GetString(18), rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23), rdr.GetInt32(24), rdr.GetInt32(25),
                            rdr.GetString(26) == "Y" ? true : false,
                            rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28), rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29),
                            rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30), rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    //throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves a campaign based on its ID
        /// </summary>
        /// <param name="ID">ID of campaign</param>
        /// <returns>Campaign object</returns>
        internal static Campaign CampaignGet(int ID)
        {
            Campaign Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPCAMPAIGN_START, p.OPCAMPAIGN_FINISH, " +
                        "p.OPCAMPAIGN_NAME, p.OPEMAIL_SEND, p.OPEMAIL_SENT, p.OPEMAIL_SENDER, " +
                        "p.OPEMAIL_ADDRESS, p.OPEMAIL_MESSAGE, p.OPLETTER_SEND, p.OPLETTER, " +
                        "p.OPIMAGE_MAIN_PAGE, p.OPIMAGE_LEFT_MENU, p.OPIMAGE_OFFERS_PAGE, " +
                        "p.OPPAGE_OFFERS_TEXT, cs.TOTAL_VISITS, cs.TOTAL_INVOICES, cs.TOTAL_SALES, p.opCAMPAIGN_TITLE, p.OPEMAIL_SUBJECT, " +
                        "p.OPLINKOVERRIDE, p.OPACTIVATEPRODUCTGROUP, p.OPCOUPONNAME, p.OPCOUPONPERCENT, p.OPFREEPRODUCTCODE, p.OPMAINPRODUCTCODE, p.opCANREPLICATE, " +
                        "p.opOFFER_PRODUCT1, p.opOFFER_PRODUCT2, p.opOFFER_PRODUCT3, p.opOFFER_PRODUCT4, p.opOFFER_PRODUCT5, p.opOFFER_PRODUCT6  " +
                        "FROM WSP_CAMPAIGNS_GET_ID({0}) p LEFT JOIN WS_CAMPAIGN_STATS cs ON (cs.CAMPAIGN_NAME = p.OPCAMPAIGN_NAME)", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Campaign(rdr.IsDBNull(0) ? -100 : rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetDateTime(2),
                            rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false, rdr.GetString(5) == "Y" ? true : false,
                            rdr.GetString(19), rdr.GetString(7), rdr.GetString(6), rdr.GetString(8), rdr.GetString(9) == "Y" ? true : false,
                            rdr.GetString(10), rdr.GetString(11), rdr.GetString(12), rdr.GetString(13),
                            rdr.GetString(14), rdr.IsDBNull(15) ? -100 : rdr.GetInt32(15), rdr.IsDBNull(16) ? -100 : rdr.GetInt32(16), rdr.GetDecimal(17),
                            rdr.GetString(18), rdr.GetString(20), rdr.GetInt32(21), rdr.GetString(22), rdr.GetInt32(23), rdr.GetInt32(24), rdr.GetInt32(25),
                            rdr.GetString(26) == "Y" ? true : false,
                            rdr.IsDBNull(27) ? -1 : rdr.GetInt64(27), rdr.IsDBNull(28) ? -1 : rdr.GetInt64(28), rdr.IsDBNull(29) ? -1 : rdr.GetInt64(29),
                            rdr.IsDBNull(30) ? -1 : rdr.GetInt64(30), rdr.IsDBNull(31) ? -1 : rdr.GetInt64(31), rdr.IsDBNull(32) ? -1 : rdr.GetInt64(32));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Save a campaign
        /// </summary>
        /// <param name="campaign">Campaign to be saved</param>
        internal static void CampaignSave(Campaign campaign)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CAMPAIGNS_UPDATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ID", FbDbType.Integer, campaign.ID);
                    AddParam(cmd, "@IPCAMPAIGN_START", FbDbType.TimeStamp, campaign.StartDateTime);
                    AddParam(cmd, "@IPCAMPAIGN_FINISH", FbDbType.TimeStamp, campaign.FinishDateTime);
                    AddParam(cmd, "@IPCAMPAIGN_NAME", FbDbType.VarChar, 40, campaign.CampaignName);
                    AddParam(cmd, "@IPEMAIL_SEND", FbDbType.Char, 1, campaign.SendEmail ? "Y" : "N");
                    AddParam(cmd, "@IPEMAIL_SENT", FbDbType.Char, 1, campaign.EmailSent ? "Y" : "N");
                    AddParam(cmd, "@IPEMAIL_SENDER", FbDbType.VarChar, 150, campaign.SenderName);
                    AddParam(cmd, "@IPEMAIL_ADDRESS", FbDbType.VarChar, 250, campaign.SenderEmail);
                    AddParam(cmd, "@IPEMAIL_SUBJECT", FbDbType.VarChar, 100, campaign.EmailSubject);
                    AddParam(cmd, "@IPEMAIL_MESSAGE", FbDbType.Text, campaign.Message);
                    AddParam(cmd, "@IPLETTER_SEND", FbDbType.Char, 1, campaign.SendLetter ? "Y" : "N");
                    AddParam(cmd, "@IPLETTER", FbDbType.Text, campaign.Letter);
                    AddParam(cmd, "@IPIMAGE_MAIN_PAGE", FbDbType.VarChar, 500, campaign.ImageMainPage);
                    AddParam(cmd, "@IPIMAGE_LEFT_MENU", FbDbType.VarChar, 500, campaign.ImageLeftMenu);
                    AddParam(cmd, "@IPIMAGE_OFFERS_PAGE", FbDbType.VarChar, 500, campaign.ImageOffersPage);
                    AddParam(cmd, "@IPPAGE_OFFERS_TEXT", FbDbType.VarChar, 6000, campaign.OffersPageText);
                    AddParam(cmd, "@IPCAMPAIGN_TITLE", FbDbType.VarChar, 30, campaign.Title);
                    AddParam(cmd, "@IPLINKOVERRIDE", FbDbType.VarChar, 150, campaign.LinkOverride);
                    AddParam(cmd, "@IPACTIVATEPRODUCTGROUP", FbDbType.Integer, campaign.ActivateProductGroup);
                    AddParam(cmd, "@IPCOUPONNAME", FbDbType.VarChar, 30, campaign.CouponName);
                    AddParam(cmd, "@IPCOUPONPERCENT", FbDbType.Integer, campaign.CouponPercent);
                    AddParam(cmd, "@IPFREEPRODUCTCODE", FbDbType.Integer, campaign.FreeProductCode);
                    AddParam(cmd, "@IPMAINPRODUCTCODE", FbDbType.Integer, campaign.MainProductCode);
                    AddParam(cmd, "@ipCANREPLICATE", FbDbType.Char, 1, campaign.CanReplicate ? "Y" : "N");
                    AddParam(cmd, "@IPOFFER_PRODUCT1", FbDbType.BigInt, campaign.OfferProduct1);
                    AddParam(cmd, "@IPOFFER_PRODUCT2", FbDbType.BigInt, campaign.OfferProduct2);
                    AddParam(cmd, "@IPOFFER_PRODUCT3", FbDbType.BigInt, campaign.OfferProduct3);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, campaign);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Deletes a campaign
        /// </summary>
        /// <param name="campaign">Campaign to be deleted</param>
        internal static void CampaignDelete(Campaign campaign)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_CAMPAIGNS WHERE ID = {0}", campaign.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, campaign);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Create a new campaign
        /// </summary>
        /// <returns>Campaign object</returns>
        internal static Campaign CampaignCreate(string CampaignName)
        {
            Campaign Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CAMPAIGNS_CREATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPCAMPAIGN_START", FbDbType.TimeStamp, DateTime.Now.AddYears(1));
                    AddParam(cmd, "@IPCAMPAIGN_FINISH", FbDbType.TimeStamp, DateTime.Now.AddYears(1));
                    AddParam(cmd, "@IPCAMPAIGN_NAME", FbDbType.VarChar, 40, CampaignName);
                    AddParam(cmd, "@IPEMAIL_SEND", FbDbType.Char, 1, "N");
                    AddParam(cmd, "@IPEMAIL_SENT", FbDbType.Char, 1, "N");
                    AddParam(cmd, "@IPEMAIL_SENDER", FbDbType.VarChar, 150, "Shifoo Systems");
                    AddParam(cmd, "@IPEMAIL_ADDRESS", FbDbType.VarChar, 250, "opt-in-marketing@sieradelta.com");
                    AddParam(cmd, "@IPEMAIL_MESSAGE", FbDbType.Text, "");
                    AddParam(cmd, "@IPLETTER_SEND", FbDbType.Char, 1, "N");
                    AddParam(cmd, "@IPLETTER", FbDbType.Text, "");
                    AddParam(cmd, "@IPIMAGE_MAIN_PAGE", FbDbType.VarChar, 500, "");
                    AddParam(cmd, "@IPIMAGE_LEFT_MENU", FbDbType.VarChar, 500, "");
                    AddParam(cmd, "@IPIMAGE_OFFERS_PAGE", FbDbType.VarChar, 500, "");
                    AddParam(cmd, "@IPPAGE_OFFERS_TEXT", FbDbType.VarChar, 6000, "");
                    AddParam(cmd, "@IPCAMPAIGN_TITLE", FbDbType.VarChar, 30, CampaignName);

                    AddParam(cmd, "@opID", FbDbType.Integer);
                    cmd.ExecuteNonQuery();

                    int NewID = (int)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    Result = new Campaign(NewID, DateTime.Now.AddYears(1), DateTime.Now.AddYears(1), 
                        CampaignName, false, false, "", "opt-in-marketing@heavenskincare.com",
                        "Shifoo Systems", "", false, "", "", "", "", "", 0, 0, 0.00m, CampaignName, 
                        "", -1, "", 0, -1, -1, false, -1, -1, -1, -1, -1, -1);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, CampaignName);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion Campaigns

        #region Frequently Asked Questions

        internal static KBGroups FAQGet()
        {
            KBGroups Result = new KBGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPID, p.OPGROUP_NAME, " +
                        "p.OPDESCRIPTION, p.OPGROUPORDER, p.OPVIEWCOUNT, p.OPMEMBER_LEVEL " +
                        "FROM WSP_KBGROUPS_GET_ADMIN p";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new KBGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetInt32(4), null, rdr.GetInt32(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static KBGroups FAQGet(User user)
        {
            KBGroups Result = new KBGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPGROUP_NAME, " +
                        "p.OPDESCRIPTION, p.OPGROUPORDER, p.OPVIEWCOUNT, p.OPMEMBER_LEVEL " +
                        "FROM WSP_KBGROUPS_ALL({0}, NULL) p ORDER BY p.OPGROUPORDER, p.OPGROUP_NAME",
                        user == null ? 0 : (int)user.MemberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new KBGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetInt32(4), null, rdr.GetInt32(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static KBGroups FAQGet(User user, KBGroup parent)
        {
            KBGroups Result = new KBGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPGROUP_NAME, " +
                        "p.OPDESCRIPTION, p.OPGROUPORDER, p.OPVIEWCOUNT, p.OPMEMBER_LEVEL " +
                        "FROM WSP_KBGROUPS_ALL({0}, {1}) p ORDER BY p.OPGROUPORDER, p.OPGROUP_NAME ",
                        user == null ? 0 : (int)user.MemberLevel, parent.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new KBGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetInt32(4), parent, rdr.GetInt32(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, parent);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static KBGroup FAQGet(User user, int GroupID)
        {
            KBGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.GROUP_NAME, a.DESCRIPTION, a.GROUPORDER, a.VIEWCOUNT, a.MEMBER_LEVEL " +
                        "FROM WS_KNOWLEDGEBASE_GROUPS a WHERE a.ID = {0} AND a.MEMBER_LEVEL <= {1}", GroupID, user == null ? 0 : (int)user.MemberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new KBGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetInt32(4), null, rdr.GetInt32(5));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, GroupID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static KBGroup FAQGetParent(KBGroup child)
        {
            KBGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.GROUP_NAME, a.DESCRIPTION, a.GROUPORDER, a.VIEWCOUNT, a.MEMBER_LEVEL " +
                        "FROM WS_KNOWLEDGEBASE_GROUPS a WHERE (a.ID in (SELECT group_parent FROM WS_KNOWLEDGEBASE_GROUPS WHERE ID = {0}));", child.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new KBGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetInt32(4), null, rdr.GetInt32(5));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, child);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static FAQItem FAQItemGet(int ID)
        {
            FAQItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION, a.VIEWCOUNT, a.CONTENT, g.ID, g.GROUP_NAME, g.DESCRIPTION, " +
                        "g.GROUPORDER, g.VIEWCOUNT, g.MEMBER_LEVEL FROM WS_KNOWLEDGEBASE_ITEMS a " +
                        "INNER JOIN WS_KNOWLEDGEBASE_GROUPS g on (g.ID = a.SUBGROUPID) WHERE a.ID = {0};", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        KBGroup group = new KBGroup(rdr.GetInt32(4), rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7),
                            rdr.GetInt32(8), null, rdr.GetInt32(9));
                        Result = new FAQItem(rdr.GetInt32(0), rdr.GetString(1), group, rdr.GetInt32(2), rdr.GetString(3));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static FAQItem FAQItemCreate()
        {
            FAQItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {

                string SQL = "WSP_KNOWLEDGEBASE_ITEMS_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                PrepareCommand(cmd);

                AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 80, "New Item");
                AddParam(cmd, "@ipSUBGROUPID", FbDbType.Integer, 2);
                AddParam(cmd, "@ipCONTENT", FbDbType.VarChar, 8100, "<p>Content Goes Here</p>");
                AddParam(cmd, "@opNEWID", FbDbType.Integer);

                cmd.ExecuteNonQuery();

                Result = new FAQItem((int)cmd.Parameters["@opNEWID"].Value, "New Item", null, 0, "<p>Content Goes Here</p>");

                CloseAndDispose(ref cmd);

                tran.Commit();
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void FAQItemSave(FAQItem item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {

                string SQL = "WSP_KNOWLEDGEBASE_ITEMS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                PrepareCommand(cmd);

                AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);
                AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 80, item.Description);
                AddParam(cmd, "@ipSUBGROUPID", FbDbType.Integer, item.Parent.ID);
                AddParam(cmd, "@ipCONTENT", FbDbType.VarChar, 20000, item.Content);

                cmd.ExecuteNonQuery();

                CloseAndDispose(ref cmd);

                tran.Commit();
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void FAQItemDelete(FAQItem item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_KNOWLEDGEBASE_ITEMS_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                PrepareCommand(cmd);

                AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);

                cmd.ExecuteNonQuery();

                CloseAndDispose(ref cmd);

                tran.Commit();
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static FAQItems FAQItemsGet(int Page, int PageSize)
        {
            FAQItems Result = new FAQItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPDESCRIPTION, p.OPSUBGROUPID, p.OPCONTENT, p.OPVIEWCOUNT " +
                        ", kbg.ID, kbg.GROUP_NAME, kbg.DESCRIPTION, kbg.GROUPORDER, kbg.VIEWCOUNT, kbg.MEMBER_LEVEL, kbg.GROUP_PARENT " +
                        "FROM WSP_KB_ITEMS_PAGE({0}, {1}) p LEFT JOIN WS_KNOWLEDGEBASE_GROUPS kbg ON (kbg.ID = p.OPSUBGROUPID)", PageSize, Page);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new FAQItem(rdr.GetInt32(0), rdr.GetString(1),
                            new KBGroup(rdr.GetInt32(5), rdr.GetString(6), rdr.GetString(7), rdr.GetInt32(8), rdr.GetInt32(9), null, rdr.GetInt32(10)),
                            rdr.GetInt32(4), rdr.GetString(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Page, PageSize);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int FAQItemGetCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(*) FROM WS_KNOWLEDGEBASE_ITEMS;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
            return (Result);
        }

        internal static void FAQItemSetViewCount(FAQItem item)
        {
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    string SQL = "UPDATE WS_KNOWLEDGEBASE_ITEMS a SET a.VIEWCOUNT = a.VIEWCOUNT + 1 WHERE a.ID = @ITEM_ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@ITEM_ID", FbDbType.Integer, item.ID);
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("lock conflict on no wait transaction") ||
                    !err.Message.Contains("update conflicts with concurrent update"))
                    throw;
            }
        }

        internal static FAQItems FAQItemsGet(KBGroup parent)
        {
            FAQItems Result = new FAQItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION, a.VIEWCOUNT, a.CONTENT FROM WS_KNOWLEDGEBASE_ITEMS a " +
                        "WHERE a.SUBGROUPID = {0};", parent.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new FAQItem(rdr.GetInt32(0), rdr.GetString(1), parent, rdr.GetInt32(2), rdr.GetString(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, parent);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Frequently Asked Questions

        #region Database Updates

        internal static Updates DatabaseUpdatesGet(string TableName, string Key)
        {
            Updates Result = new Updates();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT col.ID, log.DATETIME, col.COLUMN_NAME, col.OLD_VALUE_BLOB, col.NEW_VALUE_BLOB, col.OLD_VALUE, col.NEW_VALUE " +
                        "FROM REPLICATE$COLUMNLOG col INNER JOIN IBLM$OPERATIONLOG log ON (log.ID = col.OPERATIONLOG_ID) WHERE log.TABLE_NAME = '{0}' " +
                        "AND log.PKEY1_VALUE = '{1}' AND col.COLUMN_NAME <> 'LASTVISIT' AND log.OPERATION = 'UPDATE' ORDER BY col.ID;", TableName, Key);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Update(rdr.GetInt64(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.IsDBNull(3) ? rdr.GetString(5) : rdr.GetString(3),
                            rdr.IsDBNull(3) ? rdr.GetString(6) : rdr.GetString(4)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, TableName, Key);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Updates DatabaseDeletesGet(string TableName, string ColumnName, string Key)
        {
            Updates Result = new Updates();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT log.ID, log.DATETIME, col.COLUMN_NAME, col.OLD_VALUE_BLOB, col.NEW_VALUE_BLOB, col.OLD_VALUE, col.NEW_VALUE " +
                        "FROM IBLM$COLUMNLOG col INNER JOIN REPLICATE$OPERATIONLOG log ON (log.ID = col.OPERATIONLOG_ID) WHERE log.TABLE_NAME = '{0}' " +
                        "AND log.ID IN (SELECT l.ID FROM REPLICATE$OPERATIONLOG l LEFT JOIN IBLM$COLUMNLOG c on (c.OPERATIONLOG_ID = l.ID) " +
                        "WHERE l.OPERATION = 'DELETE' AND c.COLUMN_NAME = '{1}' AND c.OLD_VALUE = '{2}')", TableName, ColumnName, Key);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Update(rdr.GetInt64(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.IsDBNull(3) ? rdr.GetString(5) : rdr.GetString(3),
                            rdr.IsDBNull(3) ? rdr.GetString(6) : rdr.GetString(4)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, TableName, ColumnName, Key);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Database Updates

        #region Download Types

        /// <summary>
        /// Select individual record from  table WS_DOWNLOADTYPE
        /// </summary>
        internal static DownloadType DownloadTypeSelect(int ID)
        {
            DownloadType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opDESCRIPTION " +
                        "FROM spWS_DOWNLOADTYPE_GET(@ipID);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ipID", FbDbType.Integer, ID);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new DownloadType(rdr.GetInt32(0), rdr.GetString(1));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Inserts an individual record into table WS_DOWNLOADTYPE
        /// </summary>
        internal static DownloadType DownloadTypeInsert(string description)
        {
            DownloadType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWS_DOWNLOADTYPE_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipdescription", FbDbType.VarChar, description);
                    AddParam(cmd, "@opiD", FbDbType.Integer);
                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    tran.Commit();
                    Result = new DownloadType(newID, description);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table WS_DOWNLOADTYPE
        /// </summary>
        internal static bool DownloadTypeUpdate(DownloadType item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "spWS_DOWNLOADTYPE_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipID", FbDbType.Integer, item.ID);
                    AddParam(cmd, "@ipDescription", FbDbType.VarChar, item.Description);
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    Result = true;
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates/Saves individual record in table WS_DOWNLOADTYPE
        /// </summary>
        internal static bool DownloadTypeDelete(DownloadType item)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_DOWNLOADTYPE WHERE ID = @ID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.Integer, item.ID);
                    cmd.ExecuteNonQuery();

                    Result = true;
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Selects all records from table WS_DOWNLOADTYPE
        /// </summary>
        internal static DownloadTypes DownloadTypeSelectAll()
        {
            DownloadTypes Result = new DownloadTypes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT opID, opDESCRIPTION " +
                        "FROM spWS_DOWNLOADTYPE_ALL;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new DownloadType(rdr.GetInt32(0), rdr.GetString(1)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Download Types

        #region Downloads

        internal static void DownloadAdd(Download download)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_DOWNLOAD_STATS (FILE_ID) VALUES ({0});", download.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, download);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Download DownloadCreate(string FileName, string Description)
        {
            Download Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_DOWNLOADS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipFILENAME", FbDbType.VarChar, 250, FileName);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 200, Description);
                    AddParam(cmd, "@ipDOWNLOADTYPE", FbDbType.Integer, 0);
                    AddParam(cmd, "@IS_PUBLIC", FbDbType.Char, 1, "Y");
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int NewID = (int)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    Result = new Download(NewID, FileName, Description, true);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, FileName, Description);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void DownloadDelete(Download download)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_DOWNLOADS_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, download.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, download);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static int DownloadCount(int DownloadType, bool isActive)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT COUNT(*) FROM WS_DOWNLOADS WHERE DOWNLOADTYPE = {0} {1}",
                    DownloadType, isActive ? " AND IS_PUBLIC = 'Y'" : String.Empty);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Downloads DownloadsGet(int PageSize, int PageNumber, int DownloadType)
        {
            Downloads Result = new Downloads();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPDESCRIPTION, p.OPFILENAME, p.OPDOWNLOADTYPE, p.opISPUBLIC " +
                        "FROM WSP_DOWNLOADS_GET({0}, {1}, {2}) p", PageSize, PageNumber, DownloadType);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Download(rdr.GetInt32(0), rdr.GetString(2), rdr.GetString(1), rdr.GetString(4) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageSize, PageNumber, DownloadType);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Downloads

        #region RSS Feeds

        internal static RSSFeed RSSFeedsGet(Enums.RSSFeedType feedType)
        {
            RSSFeed Result = null;

            switch (feedType)
            {
                case Enums.RSSFeedType.ClientNotes:
                    Result = RSSFeedsGetClientNotes();
                    break;
                case Enums.RSSFeedType.NewSignups:
                    Result = RSSFeedsGetNewSignups();
                    break;
                case Enums.RSSFeedType.TelephoneCalls:
                    Result = RSSFeedsGetTelephone();
                    break;
                case Enums.RSSFeedType.Visits:
                    Result = RSSFeedsGetVisits();
                    break;
            }

            return (Result);
        }

        private static RSSFeed RSSFeedsGetNewSignups()
        {
            RSSFeed Result = new RSSFeed();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT first 50 a.CONTACT_NAME, a.COMPANY_NAME, a.SIGNUP_DATE, a.ID " +
                        "FROM WS_CLIENTS a ORDER BY id desc";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new RSSItem("New Signup - " + rdr.GetString(1), String.Format("New Signup: {0} - Company: {1}", rdr.GetString(0), rdr.GetString(1)),
                                String.Format("/staff/SalesLead/Index.aspx?ClientID={0}", rdr.GetInt64(3)), rdr.GetDateTime(2)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static RSSFeed RSSFeedsGetTelephone()
        {
            RSSFeed Result = new RSSFeed();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 50 cn.ID, cn.CLIENT_ID, cn.MEMBER_ID, cn.CLIENT_ACTION, cn.NOTES, cn.NOTES_DATE, cn.ACTION_ID, c.COMPANY_NAME, c.CONTACT_NAME, m.USERNAME " +
                        "FROM WS_CLIENT_NOTES cn LEFT JOIN WS_CLIENTS c on (c.ID = cn.CLIENT_ID) LEFT JOIN WS_MEMBERS m on (m.ID = cn.MEMBER_ID) WHERE cn.CLIENT_ACTION = 1 order by cn.NOTES_DATE DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new RSSItem(String.Format("Telephone: {0} - {1}", rdr.GetString(9), rdr.GetString(7)), rdr.GetString(4),
                                String.Format("/staff/SalesLead/Index.aspx?ClientID={0}", rdr.GetInt64(1)), rdr.GetDateTime(5)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static RSSFeed RSSFeedsGetVisits()
        {
            RSSFeed Result = new RSSFeed();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 50 cn.ID, cn.CLIENT_ID, cn.MEMBER_ID, cn.CLIENT_ACTION, cn.NOTES, cn.NOTES_DATE, cn.ACTION_ID, c.COMPANY_NAME, c.CONTACT_NAME, m.USERNAME " +
                        "FROM WS_CLIENT_NOTES cn LEFT JOIN WS_CLIENTS c on (c.ID = cn.CLIENT_ID) LEFT JOIN WS_MEMBERS m on (m.ID = cn.MEMBER_ID) WHERE cn.CLIENT_ACTION = 2 order by cn.NOTES_DATE DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new RSSItem(String.Format("Visit: {0} - {1}", rdr.GetString(9), rdr.GetString(7)), rdr.GetString(4),
                                String.Format("/staff/SalesLead/Index.aspx?ClientID={0}", rdr.GetInt64(1)), rdr.GetDateTime(5)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static RSSFeed RSSFeedsGetClientNotes()
        {
            RSSFeed Result = new RSSFeed();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 50 cn.ID, cn.CLIENT_ID, cn.MEMBER_ID, cn.CLIENT_ACTION, cn.NOTES, cn.NOTES_DATE, cn.ACTION_ID, c.COMPANY_NAME, c.CONTACT_NAME, m.USERNAME " +
                        "FROM WS_CLIENT_NOTES cn LEFT JOIN WS_CLIENTS c on (c.ID = cn.CLIENT_ID) LEFT JOIN WS_MEMBERS m on (m.ID = cn.MEMBER_ID) order by cn.NOTES_DATE DESC";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new RSSItem(String.Format("Notes: {0} - {1}", rdr.GetString(9), rdr.GetString(7)), rdr.GetString(4),
                                String.Format("/staff/SalesLead/Index.aspx?ClientID={0}", rdr.GetInt64(1)), rdr.GetDateTime(5)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion RSS Feeds

        #region Trade Clients

        /// <summary>
        /// Returns all clients managed by a staff member
        /// </summary>
        /// <param name="manager"></param>
        /// <returns></returns>
        internal static Clients TradeClientManagerClients(User manager)
        {
            Clients Result = new Clients();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.CONTACT_NAME, a.COMPANY_NAME, a.TELEPHONE, a.EMAIL, a.ADDRESS, a.POSTCODE, " +
                        "a.NOTES, a.STATE, a.INFO_PACK, a.ACCOUNT, a.TRAINING, a.SALONS " +
                        "FROM WS_CLIENTS a JOIN CLIENT_TO_STAFF cts ON (cts.CLIENT_ID = a.ID) " +
                        "WHERE cts.STAFF_ID = @STAFF_ID ORDER BY a.COMPANY_NAME ";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@STAFF_ID", FbDbType.BigInt, manager.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Client newClient = null;

                            ClientActions clientActions = TradeClientActionsGet(rdr.GetInt64(0), db, tran);

                            newClient = new Client(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), (Enums.ClientState)rdr.GetInt32(8),
                                clientActions, rdr.GetString(9) == "Y" ? true : false, rdr.GetString(10) == "Y" ? true : false,
                                rdr.GetString(11) == "Y" ? true : false, rdr.GetString(12) == "Y" ? true : false);

                            clientActions.UpdateClient(newClient);

                            Result.Add(newClient);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves the account manager for the client
        /// </summary>
        /// <param name="client">Client who's manager is sought</param>
        internal static User TradeClientManagerGet(Client client)
        {
            User Result = null;

            if (client == null)
                return (Result);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.STAFF_ID FROM CLIENT_TO_STAFF a WHERE a.CLIENT_ID = @CLIENT_ID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@CLIENT_ID", FbDbType.BigInt, client.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = UserGet(rdr.GetInt64(0), db, tran);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Set's the Manager for the client
        /// </summary>
        /// <param name="client">Client who's manager will be set</param>
        /// <param name="manager">Staff Member who will manage the account</param>
        internal static void TradeClientManagerSet(Client client, User manager)
        {
            if (client == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Empty;
                    FbCommand cmd = null;
                    try
                    {
                        if (manager == null)
                        {
                            SQL = "DELETE FROM CLIENT_TO_STAFF WHERE CLIENT_ID = @CLIENT_ID";
                            cmd = new FbCommand(SQL, db, tran);

                            AddParam(cmd, "@CLIENT_ID", FbDbType.BigInt, client.ID);
                        }
                        else
                        {
                            SQL = "INSERT INTO CLIENT_TO_STAFF (CLIENT_ID, STAFF_ID) VALUES (@CLIENT_ID, @STAFF_ID)";
                            cmd = new FbCommand(SQL, db, tran);

                            AddParam(cmd, "@CLIENT_ID", FbDbType.BigInt, client.ID);
                            AddParam(cmd, "@STAFF_ID", FbDbType.BigInt, manager.ID);
                        }

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    tran.Commit();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        /// <summary>
        /// Retrieves a list of all Client Managers
        /// </summary>
        /// <returns></returns>
        internal static Users TradeClientManagersGet()
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT DISTINCT a.STAFF_ID FROM CLIENT_TO_STAFF a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(UserGet(rdr.GetInt64(0), db, tran));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static void TradeClientsAutoLinkAccounts()
        {
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    string SQL = "INSERT INTO WS_SALONS_TO_MEMBERS (MEMBER_ID, SALON_ID) SELECT m.ID, s.ID " +
                        "FROM WS_MEMBERS m INNER JOIN WS_SALONS s ON (s.EMAIL = m.EMAIL) WHERE (m.ID NOT IN " +
                        "(SELECT MEMBER_ID FROM WS_SALONS_TO_MEMBERS))";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint \"PK_SALON_TO_MEMBERS_ID\""))
                    throw;
            }
        }

        internal static void TradeClientChangeState(Client client, Enums.ClientState state)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("update WS_CLIENTS set state = {0} where id = {1}", (int)state, client.ID);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Client TradeClientGet(Int64 ID)
        {
            Client Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CONTACT_NAME, a.COMPANY_NAME, a.TELEPHONE, a.EMAIL, a.ADDRESS, a.POSTCODE, " +
                        "a.NOTES, a.STATE, a.INFO_PACK, a.ACCOUNT, a.TRAINING, a.SALONS FROM WS_CLIENTS a WHERE a.ID = {0}", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            ClientActions clientActions = TradeClientActionsGet(rdr.GetInt64(0), db, tran);
                            Result = new Client(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), (Enums.ClientState)rdr.GetInt32(8),
                                clientActions, rdr.GetString(9) == "Y" ? true : false, rdr.GetString(10) == "Y" ? true : false,
                                rdr.GetString(11) == "Y" ? true : false, rdr.GetString(12) == "Y" ? true : false);
                            clientActions.UpdateClient(Result);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static Client TradeClientGet(Int64 ID, FbConnection dbConnection, FbTransaction dbTransaction)
        {
            Client Result = null;

            string SQL = String.Format("SELECT a.ID, a.CONTACT_NAME, a.COMPANY_NAME, a.TELEPHONE, a.EMAIL, a.ADDRESS, a.POSTCODE, " +
                "a.NOTES, a.STATE, a.INFO_PACK, a.ACCOUNT, a.TRAINING, a.SALONS FROM WS_CLIENTS a WHERE a.ID = {0}", ID);
            FbCommand cmd = new FbCommand(SQL, dbConnection, dbTransaction);

            FbDataReader rdr = cmd.ExecuteReader();

            try
            {
                if (rdr.Read())
                {
                    ClientActions clientActions = TradeClientActionsGet(rdr.GetInt64(0), dbConnection, dbTransaction);
                    Result = new Client(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                        rdr.GetString(5), rdr.GetString(6), rdr.IsDBNull(7) ? String.Empty : rdr.GetString(7), (Enums.ClientState)rdr.GetInt32(8),
                        clientActions, rdr.GetString(9) == "Y" ? true : false, rdr.GetString(10) == "Y" ? true : false,
                        rdr.GetString(11) == "Y" ? true : false, rdr.GetString(12) == "Y" ? true : false);
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (Result);
        }

        internal static Clients TradeClientsGet(Enums.ClientState ClientState)
        {
            Clients Result = new Clients();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CONTACT_NAME, a.COMPANY_NAME, a.TELEPHONE, a.EMAIL, a.ADDRESS, a.POSTCODE, " +
                        "a.NOTES, a.STATE, a.INFO_PACK, a.ACCOUNT, a.TRAINING, a.SALONS FROM WS_CLIENTS a WHERE a.STATE = {0} ORDER BY a.COMPANY_NAME ", (int)ClientState);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Client newClient = null;

                            ClientActions clientActions = TradeClientActionsGet(rdr.GetInt64(0), db, tran);

                            newClient = new Client(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), (Enums.ClientState)rdr.GetInt32(8),
                                clientActions, rdr.GetString(9) == "Y" ? true : false, rdr.GetString(10) == "Y" ? true : false,
                                rdr.GetString(11) == "Y" ? true : false, rdr.GetString(12) == "Y" ? true : false);

                            clientActions.UpdateClient(newClient);

                            Result.Add(newClient);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Client TradeClientCreate(string Name, string CompanyName, string Telephone,
            string Email, string Address, string Postcode, string Notes)
        {
            Client Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_CLIENTS_INS";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipCONTACT_NAME", FbDbType.VarChar, 100, Name);
                    AddParam(cmd, "@ipCOMPANY_NAME", FbDbType.VarChar, 150, CompanyName);
                    AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 100, Telephone);
                    AddParam(cmd, "@ipEMAIL", FbDbType.VarChar, 255, Email);
                    AddParam(cmd, "@ipADDRESS", FbDbType.VarChar, 2000, Address);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, Postcode);
                    AddParam(cmd, "@ipNOTES", FbDbType.VarChar, 5000, Notes);
                    AddParam(cmd, "@ipSTATE", FbDbType.Integer, 0);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    ClientActions clientActions = TradeClientActionsGet((Int64)cmd.Parameters["@opNEWID"].Value, db, tran);

                    Result = new Client((Int64)cmd.Parameters["@opNEWID"].Value, Name, CompanyName, Telephone,
                        Email, Address, Postcode, Notes, Enums.ClientState.NewClient, clientActions, false, false, false, false);

                    CloseAndDispose(ref cmd);

                    clientActions.UpdateClient(Result);
                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static void TradeClientNotesAdd(Client client, User user, string notes, Enums.ClientAction action)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_CLIENT_NOTES (CLIENT_ID, MEMBER_ID, CLIENT_ACTION, NOTES) VALUES ( " +
                        "{0}, {1}, {2}, @NOTES);", client.ID, user.ID, action == Enums.ClientAction.None ? "NULL" : Convert.ToString((int)action));

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@NOTES", FbDbType.VarChar, 250, notes);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, client, user, notes, action);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void TradeClientNotesAdd(Client client, User user, string notes, ClientAction action)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_CLIENT_NOTES (CLIENT_ID, MEMBER_ID, CLIENT_ACTION, NOTES, ACTION_ID) VALUES ( " +
                        "{0}, {1}, {2}, @NOTES, {3});", client.ID, user.ID, action.Action == Enums.ClientAction.None ? "NULL" : Convert.ToString((int)action.Action),
                        action.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@NOTES", FbDbType.VarChar, 250, notes);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ClientNotes TradeClientNotesGet(Client client)
        {
            ClientNotes Result = new ClientNotes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CLIENT_ID, a.MEMBER_ID, a.NOTES, a.NOTES_DATE " +
                        "FROM WS_CLIENT_NOTES a WHERE a.CLIENT_ID = {0} AND a.CLIENT_ACTION IS NULL ORDER BY a.NOTES_DATE DESC;", client.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ClientNote(rdr.GetInt64(0), client, User.UserGet(rdr.GetInt64(2)), rdr.GetString(3), rdr.GetDateTime(4), Enums.ClientAction.None));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);

        }

        internal static ClientNotes TradeClientNotesGet(ClientAction action)
        {
            ClientNotes Result = new ClientNotes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CLIENT_ID, a.MEMBER_ID, a.NOTES, a.NOTES_DATE, a.CLIENT_ACTION " +
                        "FROM WS_CLIENT_NOTES a WHERE a.ACTION_ID = {0} ORDER BY a.NOTES_DATE;", action.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ClientNote(rdr.GetInt64(0), TradeClientGet(rdr.GetInt64(5), db, tran), UserGet(rdr.GetInt64(2), db, tran), rdr.GetString(3), rdr.GetDateTime(4), Enums.ClientAction.None));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);

        }

        internal static ClientAction TradeClientActionCreate(Client client, Enums.ClientAction ActionType)
        {
            ClientAction Result = null;


            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID FROM WSP_WS_CLIENT_ACTIONS_CREATE({0}, {1}, 'Any Staff Member');", (int)ActionType, client.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ClientAction(rdr.GetInt64(0), ActionType, DateTime.Now, "Any Staff Member");
                            Result.Client = client;
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Commit();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);

        }

        internal static ClientActions TradeClientActionsGet(Client client, Enums.ClientAction action)
        {
            ClientActions Result = new ClientActions();


            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CLIENT_ACTION, a.CLIENT_ID, a.EXPIRES, a.DATE_ACTIONED, a.USER_ID, a.EXPECTED_BY " +
                        "FROM WS_CLIENT_ACTIONS a WHERE a.CLIENT_ID = {0} AND a.CLIENT_ACTION = {1} AND a.USER_ID IS NOT NULL ORDER BY a.ID DESC;", client.ID, (int)action);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            ClientAction newAction = null;

                            if (rdr.IsDBNull(5))
                            {
                                newAction = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1), rdr.GetDateTime(3), rdr.GetString(6));
                            }
                            else
                            {
                                newAction = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1),
                                    rdr.GetDateTime(3), UserGet(rdr.GetInt64(5)), rdr.GetDateTime(4), rdr.GetString(6));
                            }

                            newAction.Client = client;
                            Result.Add(newAction);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static ClientActions TradeClientActionsGet(Client client)
        {
            ClientActions Result = new ClientActions();


            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CLIENT_ACTION, a.CLIENT_ID, a.EXPIRES, a.DATE_ACTIONED, a.USER_ID, a.EXPECTED_BY " +
                        "FROM WS_CLIENT_ACTIONS a WHERE a.CLIENT_ID = {0} ORDER BY a.ID DESC;", client.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            ClientAction newAction = null;

                            if (rdr.IsDBNull(5))
                            {
                                newAction = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1), rdr.GetDateTime(3), rdr.GetString(6));
                            }
                            else
                            {
                                newAction = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1), rdr.GetDateTime(3),
                                    UserGet(rdr.GetInt64(5), db, tran), rdr.IsDBNull(4) ? DateTime.MinValue : rdr.GetDateTime(4), rdr.GetString(6));
                            }

                            newAction.Client = client;
                            Result.Add(newAction);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        private static ClientActions TradeClientActionsGet(Int64 ClientID, FbConnection dbConnection, FbTransaction dbTransaction)
        {
            ClientActions Result = new ClientActions();

            string SQL = String.Format("SELECT a.ID, a.CLIENT_ACTION, a.CLIENT_ID, a.EXPIRES, a.DATE_ACTIONED, a.USER_ID, a.EXPECTED_BY " +
                "FROM WS_CLIENT_ACTIONS a WHERE a.CLIENT_ID = {0} ORDER BY a.ID DESC;", ClientID);
            FbCommand cmd = new FbCommand(SQL, dbConnection, dbTransaction);
            FbDataReader rdr = cmd.ExecuteReader();

            try
            {
                while (rdr.Read())
                {
                    if (rdr.IsDBNull(5))
                    {
                        Result.Add(new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1), rdr.GetDateTime(3), rdr.GetString(6)));
                    }
                    else
                    {
                        Result.Add(new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1), rdr.GetDateTime(3),
                            UserGet(rdr.GetInt64(5), dbConnection, dbTransaction),
                            rdr.IsDBNull(4) ? DateTime.MinValue : rdr.GetDateTime(4), rdr.GetString(6)));
                    }
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (Result);
        }

        internal static ClientAction TradeClientActionGet(Client client, Enums.ClientAction action, bool Open)
        {
            ClientAction Result = null;


            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CLIENT_ACTION, a.CLIENT_ID, a.EXPIRES, a.DATE_ACTIONED, a.USER_ID, a.EXPECTED_BY " +
                        "FROM WS_CLIENT_ACTIONS a WHERE a.CLIENT_ID = {0} AND a.CLIENT_ACTION = {1} AND a.USER_ID {2};", client.ID, (int)action, Open ? "IS NULL" : "IS NOT NULL");
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            if (Open)
                                Result = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1),
                                    rdr.GetDateTime(3), rdr.GetString(6));
                            else
                                Result = new ClientAction(rdr.GetInt64(0), (Enums.ClientAction)rdr.GetInt32(1),
                                    rdr.GetDateTime(3), UserGet(rdr.GetInt64(5)), rdr.GetDateTime(4), rdr.GetString(6));

                            Result.Client = client;

                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            //if (Result == null)
            //    Result = TradeClientActionCreate(client, action);

            return (Result);
        }

        internal static void TradeClientActionsComplete(ClientAction clientAction, User user, string Notes)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_CLIENT_NOTES (CLIENT_ID, MEMBER_ID, CLIENT_ACTION, NOTES, ACTION_ID) VALUES ( " +
                        "{0}, {1}, {2}, @NOTES, {3});", clientAction.Client.ID, user.ID, clientAction.Action == Enums.ClientAction.None ? "NULL" : Convert.ToString((int)clientAction.Action),
                        clientAction.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@NOTES", FbDbType.VarChar, 250, Notes);

                    cmd.ExecuteNonQuery();

                    SQL = String.Format("UPDATE WS_CLIENT_ACTIONS a SET a.DATE_ACTIONED = CURRENT_TIMESTAMP, a.USER_ID = {0} WHERE a.ID = {1};",
                        user.ID, clientAction.ID);
                    cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }

        #endregion Trade Clients

        #region Stats Code

        /// <summary>
        /// Returns a collection of top selling products
        /// </summary>
        /// <param name="number">number of items (i.e. 10 for top 10)</param>
        /// <param name="days">number of days to go back</param>
        /// <param name="autoUpdate">if true the top (number) of products are set as top</param>
        /// <returns></returns>
        internal static SimpleStatistics StatisticsGetTopProducts(int number, int days, bool autoUpdate)
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                string SQL = "SELECT opPRODUCT_SKU, opPRODUCT_NAME, opPRODUCT_SIZE, opPRODUCT_COUNT " +
                    "FROM WSP_STATS_TOP_PRODUCTS(@DAYS, @ITEMS, @UPDATE);";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@DAYS", FbDbType.Integer, days);
                    AddParam(cmd, "@ITEMS", FbDbType.Integer, number);
                    AddParam(cmd, "@UPDATE", FbDbType.Char, 1, autoUpdate ? "Y" : "N");

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Gets lat/long ip address of visitors
        /// </summary>
        /// <param name="age"></param>
        /// <returns></returns>
        internal static SimpleStatistics GetVisitorLocations(decimal age)
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                string SQL = "SELECT opIPAddress, opLAT, opLON " +
                    "FROM WSP_VISITOR_LOCATIONS(@AGE)";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@AGE", FbDbType.Decimal, age);

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetDecimal(1), rdr.GetDecimal(2)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SimpleStatistics GetUnpaidStatistics()
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                string SQL = "SELECT ps.DESCRIPTION, COUNT(a.ID), SUM(a.TOTALCOST) FROM WS_INVOICE a " +
                    "JOIN WS_PAYMENT_STATUS ps ON (ps.ID = a.STATUS) WHERE a.PROCESS_STATUS = 0 " +
                    "AND ps.IS_PAID = 'N' AND a.STATUS <> 10 GROUP BY ps.DESCRIPTION";

                FbCommand cmd = new FbCommand(SQL, db, tran);

                FbDataReader rdr = cmd.ExecuteReader();

                try
                {
                    while (rdr.Read())
                    {
                        Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetInt32(1), rdr.GetDecimal(2)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static string GetCampaignStats(string Campaign)
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opDESCRIPTION, opVALUE " +
                        "FROM WSP_STATS_CAMPAIGN('{0}')", Campaign);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    int iCount = 10;

                    try
                    {
                        while (rdr.Read())
                        {
                            if (iCount % 2 != 0)
                            {
                                string Amount = String.Format(CultureInfo.CreateSpecificCulture("en-GB"), "{0:C}", rdr.GetString(1) == "" ? 0.00 : Convert.ToDouble(rdr.GetString(1)));
                                Result += String.Format("{0} {1}<br />", rdr.GetString(0), Amount);
                            }
                            else
                                Result += String.Format("{0} {1}<br />", rdr.GetString(0), rdr.GetString(1));

                            ++iCount;
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void StatisticsVisitorsByCountryToday(Statistics statistics, int Count)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST {0} COUNT(a.SESSION), a.COUNTRY_CODE, a.COUNTRY " +
                        "FROM VW_STATS_VISIT_BY_COUNTRY_TODAY a group by 2, 3 order by 1 DESC", Count);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoVisitorTotalsByCountry(rdr.GetString(2), rdr.GetString(1), rdr.GetInt32(0));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsVisitorsByCountry(Statistics statistics, int Count)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST {0} COUNT(a.SESSION), a.COUNTRY_CODE, a.COUNTRY " +
                        "FROM VW_STATS_VISITS_BY_COUNTRY a group by 2, 3 order by 1 DESC", Count);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoVisitorTotalsByCountry(rdr.GetString(2), rdr.GetString(1), rdr.GetInt32(0));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsInvoiceCountByDay(Statistics statistics, int TotalDays, DateTime StartDate)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST {0} a.INVOICE_DATE, a.TOTAL_COUNT FROM VW_STATS_INVOICE_COUNT_BY_DAY a " +
                        "order by a.INVOICE_DATE desc", TotalDays);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceCountByDay(rdr.GetDateTime(0), rdr.GetInt32(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthtoDateBySalons(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MTD_SALONS p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDate(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateTop5Salons(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                    "p.OPDATEEND, p.OPMEMBERBUSINESSNAME FROM WSP_STATS_MTD_TOP_5_SALONS p;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        statistics.DoInvoiceMonthToDateTop5(rdr.GetString(7), rdr.GetInt32(0),
                            rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4),
                            rdr.GetDateTime(5), rdr.GetDateTime(6));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsInvoiceTotalByMonth(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT INVOICE_YEAR, INVOICE_MONTH, INVOICE_TOTAL " +
                    "FROM VW_STATS_INVOICES_BY_MONTH " +
                    "WHERE INVOICE_YEAR = {0} ORDER BY 1, 2", StartMonth.Year);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        statistics.DoInvoicesTotalsByMonth(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateTop5Countries(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND, p.OPCOUNTRYNAME FROM WSP_STATS_MONTH_TO_DATE_TOP_5 p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateTop5(rdr.GetString(7), rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateTop10Countries(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND, p.OPCOUNTRYNAME FROM WSP_STATS_MONTH_TO_DATE_TOP_10 p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateTop10(rdr.GetString(7), rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateCount(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE_TOTAL p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceTotalCountByMonth(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetInt32(2), rdr.GetInt32(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static void StatisticsMonthToDate(Statistics statistics, DateTime StartMonth, string countryCode, int dataType)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE2(@IPSTARTDATE, @ipCOUNTRY_CODES, @ipTYPE) p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@IPSTARTDATE", FbDbType.TimeStamp, StartMonth);
                    AddParam(cmd, "@ipCOUNTRY_CODES", FbDbType.VarChar, 2, countryCode);
                    AddParam(cmd, "@ipTYPE", FbDbType.Integer, dataType);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            switch (dataType)
                            {
                                case 0: // all
                                    statistics.DoInvoiceMonthToDate(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                                    break;
                                case 1: // office
                                    statistics.DoInvoiceMonthToDateOffice(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                                    break;
                                case 2: // salon
                                    statistics.DoInvoiceMonthToDateSalon(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                                    break;
                                case 3: // online
                                    statistics.DoInvoiceMonthToDateOnline(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                                    break;
                                default:
                                    throw new Exception("Invalid Type");
                            }
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDate(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDate(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateOnline(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE_ONLINE p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateOnline(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateSalon(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE_SALON p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateSalon(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateOffice(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND FROM WSP_STATS_MONTH_TO_DATE_OFFICE p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateOffice(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Returns Sales Summary By Day
        /// </summary>
        /// <param name="statistics">Statistics object
        /// Used for callback
        /// </param>
        /// <param name="from">Date From</param>
        /// <param name="to">Date To</param>
        /// <param name="countryCode">Country Code or blank for all countries</param>
        internal static void StatisticsDailyTotals(Statistics statistics, DateTime month, string countryCode)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT CAST(io.PURCHASEDATE AS DATE), SUM(io.TOTALCOST) FROM WS_INVOICE_ORDERS io {0} WHERE " +
                        " (io.PROCESS_STATUS IN (0, 1, 2)) {1} AND EXTRACT(MONTH FROM io.PURCHASEDATE) = {2} AND EXTRACT(YEAR FROM io.PURCHASEDATE) = {3} " +
                        "GROUP BY 1 ORDER BY 1;", "{0}", "{1}", month.Month, month.Year);

                    if (!String.IsNullOrEmpty(countryCode))
                        SQL = String.Format(SQL, "LEFT JOIN WS_MEMBERS m ON (m.ID = io.USERID) LEFT JOIN WS_COUNTRIES c ON (c.ID = m.COUNTRY)",
                            String.Format("AND (c.COUNTRYCODE = '{0}') ", countryCode));
                    else
                        SQL = String.Format(SQL, String.Empty, String.Empty);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoDailySalesTotal(rdr.GetDateTime(0), rdr.GetDecimal(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthToDateBySalonOwners(Statistics statistics, DateTime StartMonth)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPYEAR, p.OPMONTH, p.OPTOTAL, p.OPDIFFERENCE, p.OPDIFFPERCENT, p.OPDATESTART, " +
                        "p.OPDATEEND, p.OPMEMBERNAME FROM WSP_STATS_MTD_TOP_SALONOWNERS p;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoiceMonthToDateTop5(rdr.GetString(7), rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDecimal(2), rdr.GetDecimal(3), rdr.GetInt32(4), rdr.GetDateTime(5), rdr.GetDateTime(6));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsMonthlyTotals(Statistics statistics, int year, string countryCode)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT EXTRACT(MONTH FROM io.PURCHASEDATE), SUM(io.TOTALCOST) FROM WS_INVOICE_ORDERS io {0} WHERE " +
                        " (io.PROCESS_STATUS IN (0, 1, 2)) {1} AND EXTRACT(YEAR FROM io.PURCHASEDATE) = {2} " +
                        "GROUP BY 1 ORDER BY 1;", "{0}", "{1}", year);

                    if (!String.IsNullOrEmpty(countryCode))
                        SQL = String.Format(SQL, "LEFT JOIN WS_MEMBERS m ON (m.ID = io.USERID) LEFT JOIN WS_COUNTRIES c ON (c.ID = m.COUNTRY)",
                            String.Format("AND (c.COUNTRYCODE = '{0}') ", countryCode));
                    else
                        SQL = String.Format(SQL, String.Empty, String.Empty);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoInvoicesTotalsByMonth(year, rdr.GetInt32(0), rdr.GetDecimal(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StatisticsTimeLineEventsGet(Statistics statistics)
        {
            if (statistics == null)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.EVENT_ID, a.EVENT_DATE, a.EVENT_DESCRIPTION, a.EVENT_TEXT, EVENT_COST, EVENT_VISITS, EVENT_SALES, EVENT_COUNRY_ID, EVENT_CIRCULATION " +
                        "FROM WS_TIMELINE_EVENTS a ORDER BY a.EVENT_DATE DESC";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            statistics.DoTimeLineEvent(rdr.GetInt64(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetDecimal(6), rdr.GetInt32(7), rdr.GetInt64(8));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    //tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Takings StatisticsSalesSalonProducts(DateTime from, DateTime to)
        {
            Takings Result = new BOL.Therapists.Takings();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPITEM, SUM(p.OPITEMCOUNT) FROM WSP_THERAPIST_TAKINGS(2, @DATEFROM, @DATETO) p " +
                        "WHERE p.opITEM_TYPE = 1 GROUP BY 1 ORDER BY 2 DESC, 1";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TherapistTakings(
                            rdr.IsDBNull(0) ? "" : rdr.GetString(0),
                            rdr.IsDBNull(1) ? 0 : rdr.GetInt32(1),
                            ProductCostItemType.Product));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Takings StatisticsSalesSalonTreatments(DateTime from, DateTime to)
        {
            Takings Result = new BOL.Therapists.Takings();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPITEM, SUM(p.OPITEMCOUNT) FROM WSP_THERAPIST_TAKINGS(2, @DATEFROM, @DATETO) p " +
                        "WHERE p.opITEM_TYPE = 2 GROUP BY 1 ORDER BY 2 DESC, 1";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TherapistTakings(
                            rdr.IsDBNull(0) ? "" : rdr.GetString(0),
                            rdr.IsDBNull(1) ? 0 : rdr.GetInt32(1),
                            ProductCostItemType.Treatment));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Takings StatisticsSalesSalonSummary(DateTime from, DateTime to)
        {
            Takings Result = new BOL.Therapists.Takings();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT io.ID, CAST(io.PURCHASEDATE AS DATE), m.USERNAME, cust.USERNAME, io.TOTALCOST, CASE io.STATUS WHEN 26 THEN 'Cash' WHEN 27 THEN 'Card' WHEN 28 THEN 'Cheque' END " +
                        "FROM WS_INVOICE_ORDERS io INNER join WS_MEMBERS m on (upper(m.EMAIL) = upper(io.USER_SESSION)) " +
                        "INNER JOIN WS_MEMBERS cust ON (cust.ID = io.USERID) " +
                        "WHERE ((cast(io.PURCHASEDATE as date) >= @DATEFROM) AND (cast(io.PURCHASEDATE as date) <= @DATETO)) " +
                        "AND (io.STATUS IN (26, 27, 28)) AND (io.PROCESS_STATUS IN (0, 1, 2)) order by io.ID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TherapistTakings(
                            rdr.IsDBNull(0) ? -1 : rdr.GetInt64(0),
                            rdr.IsDBNull(1) ? DateTime.Now.AddYears(-10) : rdr.GetDateTime(1),
                            rdr.IsDBNull(2) ? "unknown" : rdr.GetString(2),
                            rdr.IsDBNull(3) ? "unknown" : rdr.GetString(3),
                            rdr.IsDBNull(4) ? -100.00m : rdr.GetDecimal(4),
                            rdr.IsDBNull(5) ? "unknown" : rdr.GetString(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void StatisticsUpdateRedirectHitCount(string url)
        {
            UpdateStatistics(url, 0);
        }

        internal static int StatisticsRedirectGetHitCount(string url)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.HIT_COUNT FROM WS_REDIRECT_STATS a WHERE a.URL = '{0}'", url.ToUpper());
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            if (Result < 0)
                Result = 0;

            return (Result);
        }

        /// <summary>
        /// Statistics for appointment types by date period
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        internal static SimpleStatistics StatisticsAppointmentSummary(DateTime startDate, DateTime endDate)
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "SELECT ass.DESCRIPTION, count(a.ID) FROM WS_APPOINTMENTS a " +
                        "JOIN WS_APPOINTMENT_STATUS ass ON (ass.ID = a.STATUS) WHERE a.MASTER_APPOINTMENT IS NULL " +
                        "AND a.APPOINTMENT_TYPE = 0   AND a.APPOINTMENT_DATE >= @STARTDATE " +
                        "AND a.APPOINTMENT_DATE <= @FINISHDATE GROUP BY ass.DESCRIPTION " +
                        "ORDER BY ass.DESCRIPTION";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@STARTDATE", FbDbType.Date, startDate);
                    AddParam(cmd, "@FINISHDATE", FbDbType.Date, endDate);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetInt32(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Stats Code

        #region US States

        internal static USStates GetUSStates()
        {
            USStates Result = new USStates();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.STATE, a.REDIRECT_URL, a.SHOW_PRICES, a.STATE_CODE FROM WS_US_STATES a order by a.STATE;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new USState(rdr.GetInt64(0), rdr.GetString(1), rdr.IsDBNull(2) ? "" : rdr.GetString(2), rdr.GetString(3) == "Y", rdr.GetString(4)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static USState GetUSState(string StateCode)
        {
            USState Result = new USState(-1, "Unknown", "", true, "ZZ");

            if (String.IsNullOrEmpty(StateCode))
                StateCode = "ZZ";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.STATE, a.REDIRECT_URL, a.SHOW_PRICES, a.STATE_CODE " +
                        "FROM WS_US_STATES a WHERE a.STATE_CODE = @STATECODE;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@STATECODE", FbDbType.VarChar, 2, StateCode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new USState(rdr.GetInt64(0), rdr.GetString(1), rdr.IsDBNull(2) ? "" : rdr.GetString(2), rdr.GetString(3) == "Y", rdr.GetString(4));
                        }
                        else
                        {
                            Result = new USState(-1, "Unknown", "", true, "ZZ");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static USState GetUSState(Int64 ID)
        {
            USState Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.STATE, a.REDIRECT_URL, a.SHOW_PRICES, a.STATE_CODE FROM WS_US_STATES a WHERE a.ID = {0};", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new USState(rdr.GetInt64(0), rdr.GetString(1), rdr.IsDBNull(2) ? "" : rdr.GetString(2), rdr.GetString(3) == "Y", rdr.GetString(4));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion US States

        #region Videos

        internal static int VideoCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_VIDEOS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Videos VideoGet()
        {
            Videos Result = new Videos();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, a.VIDEO_REFERENCE FROM WS_VIDEOS a ORDER BY a.ID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Video(rdr.GetInt32(0), rdr.GetString(2), rdr.GetString(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Video VideoGet(int ID)
        {
            Video Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION, a.VIDEO_REFERENCE FROM WS_VIDEOS a WHERE a.ID = {0}", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Video(rdr.GetInt32(0), rdr.GetString(2), rdr.GetString(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void VideoUpdate(Video video)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_VIDEOS SET DESCRIPTION = @DESCRIPTION, " +
                        "VIDEO_REFERENCE = @VIDEO_REFERENCE WHERE ID = {0}", video.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, video.Description);
                    AddParam(cmd, "@VIDEO_REFERENCE", FbDbType.VarChar, 50, video.VideoReference);

                    try
                    {
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                    finally
                    {
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void VideoDelete(Video video)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_VIDEOS WHERE ID = {0}", video.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    try
                    {
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                    finally
                    {
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static int VideoCreate(string description, string reference)
        {
            int Result = -1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_VIDEOS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPDESCRIPTION", FbDbType.VarChar, 100, description);
                    AddParam(cmd, "@IPVIDEO_REFERENCE", FbDbType.VarChar, 50, reference);
                    AddParam(cmd, "@OPID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    Result = (int)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch //(Exception err)
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Videos

        #region Export Replication Data

        #region IBLM

        #region Helper Methods

        //encloses a string in single quotes
        private static string QuoteDBStr(string S)
        {
            return ("'" + S + "'");
        }

        private static string DBDateToString(DateTime datetime)
        {
            return (datetime.ToString("dd.MM.yyyy hh:mm:ss"));
        }

        /// <summary>
        /// replaces single quotes with double quotes
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        private static string PrepareString(string s)
        {
            string Result = s.Replace("'", "''");

            return (Result);
        }

        #endregion Helper Methods

        private static void DownloadIBLMColumnLog(FbConnection db, FbTransaction tran, Int64 OperationLogID, StreamWriter writer)
        {
            try
            {
                string SQL = String.Format("SELECT r.ID, r.OPERATIONLOG_ID, r.COLUMN_NAME, CAST(SUBSTRING(r.OLD_VALUE_BLOB FROM 1 FOR 32000) AS VARCHAR(32000)), CAST(SUBSTRING(r.NEW_VALUE_BLOB FROM 1 FOR 32000) AS VARCHAR(32000)), r.OLD_VALUE, r.NEW_VALUE " +
                    "FROM IBLM$COLUMNLOG r WHERE r.OPERATIONLOG_ID = {0} ORDER BY r.ID ", OperationLogID);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                FbDataReader rdr = cmd.ExecuteReader();

                try
                {
                    while (rdr.Read())
                    {
                        string strInsert = "INSERT INTO IBLM$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE_BLOB, NEW_VALUE_BLOB, OLD_VALUE, NEW_VALUE) VALUES (";

                        strInsert += rdr.GetInt64(0).ToString() + ", ";
                        strInsert += rdr.GetInt64(1).ToString() + ", ";
                        strInsert += rdr.IsDBNull(2) ? "NULL, " : QuoteString(rdr.GetString(2)) + ", ";
                        strInsert += rdr.IsDBNull(3) ? "NULL, " : QuoteString(rdr.GetString(3)) + ", ";
                        strInsert += rdr.IsDBNull(4) ? "NULL, " : QuoteString(rdr.GetString(4)) + ", ";
                        strInsert += rdr.IsDBNull(5) ? "NULL, " : QuoteString(rdr.GetString(5)) + ", ";
                        strInsert += rdr.IsDBNull(6) ? "NULL);" : QuoteString(rdr.GetString(6)) + ");";
                        writer.WriteLine(strInsert);
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                catch
                {

                    throw;
                }
            }
            catch
            {
                throw;
            }
        }

        private static string QuoteString(string s)
        {
            string Result = "'" + PrepareString(s) + "'";

            return (Result);
        }

        private static void DownloadIBLMOperationsLog(Int64 Start, string FileName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQLRemote = String.Format("SELECT FIRST 1000 r.ID, r.DATETIME, r.USER_NAME, r.TABLE_NAME, r.OPERATION, r.PKEY1, r.PKEY1_VALUE, r.PKEY2, " +
                        "r.PKEY2_VALUE, r.PKEY3, r.PKEY3_VALUE, r.PKEY4, r.PKEY4_VALUE, r.PKEY5, r.PKEY5_VALUE, r.TRANSACTIONID, r.CLIENT_ADDRESS, " +
                        "r.NETWORK_PROTOCOL, r.DB_NAME, r.ISOLATION_LEVEL FROM IBLM$OPERATIONLOG r WHERE r.ID >= {0} ORDER BY r.ID ",
                        Start);
                    FbCommand cmd = new FbCommand(SQLRemote, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    System.IO.StreamWriter file = new System.IO.StreamWriter(FileName);
                    try
                    {
                        while (rdr.Read())
                        {
                            //date removed
                            string strInsert = "INSERT INTO IBLM$OPERATIONLOG (ID, USER_NAME, TABLE_NAME, OPERATION, PKEY1, PKEY1_VALUE, PKEY2, " +
                                "PKEY2_VALUE, PKEY3, PKEY3_VALUE, PKEY4, PKEY4_VALUE, PKEY5, PKEY5_VALUE, TRANSACTIONID, CLIENT_ADDRESS, " +
                                "NETWORK_PROTOCOL, DB_NAME, ISOLATION_LEVEL) VALUES (";


                            strInsert += rdr.GetInt64(0).ToString() + ", ";
                            strInsert += QuoteString(rdr.GetString(2)) + ", ";
                            strInsert += QuoteString(rdr.GetString(3)) + ", ";
                            strInsert += QuoteString(rdr.GetString(4)) + ", ";
                            strInsert += QuoteString(rdr.GetString(5)) + ", ";
                            strInsert += QuoteString(rdr.GetString(6)) + ", ";
                            strInsert += rdr.IsDBNull(7) ? "NULL, " : QuoteString(rdr.GetString(7)) + ", ";
                            strInsert += rdr.IsDBNull(8) ? "NULL, " : QuoteString(rdr.GetString(8)) + ", ";
                            strInsert += rdr.IsDBNull(9) ? "NULL, " : QuoteString(rdr.GetString(9)) + ", ";
                            strInsert += rdr.IsDBNull(10) ? "NULL, " : QuoteString(rdr.GetString(10)) + ", ";
                            strInsert += rdr.IsDBNull(11) ? "NULL, " : QuoteString(rdr.GetString(11)) + ", ";
                            strInsert += rdr.IsDBNull(12) ? "NULL, " : QuoteString(rdr.GetString(12)) + ", ";
                            strInsert += rdr.IsDBNull(13) ? "NULL, " : QuoteString(rdr.GetString(13)) + ", ";
                            strInsert += rdr.IsDBNull(14) ? "NULL, " : QuoteString(rdr.GetString(14)) + ", ";
                            strInsert += rdr.IsDBNull(15) ? "NULL, " : rdr.GetString(15).ToString() + ", ";
                            strInsert += QuoteString(rdr.GetString(16)) + ", ";
                            strInsert += QuoteString(rdr.GetString(17)) + ", ";
                            strInsert += QuoteString(rdr.GetString(18)) + ", ";
                            strInsert += QuoteString(rdr.GetString(19));
                            strInsert += ");";
                            file.WriteLine(strInsert);

                            DownloadIBLMColumnLog(db, tran, rdr.GetInt64(0), file);
                        }

                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Rollback();
                    }
                    finally
                    {
                        file.Flush();
                        file.Close();
                        file.Dispose();
                        file = null;
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }


        #endregion IBLM

        internal static string ExportIBLMData(Int64 Start)
        {
            string Result = System.IO.Path.GetRandomFileName() + ".txt";
            Result = DALHelper.Path.Replace("file:\\", "").Replace("\\bin", "\\Admin\\Export\\Data\\") + Result;

            DownloadIBLMOperationsLog(Start, Result);

            return (Result);
        }

        internal static int IBLMMaxOperationID()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT GEN_ID(GEN_IBLM$OPERATIONLOG_ID, 0) FROM RDB$DATABASE";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Export Replication Data

        #region Celebrities

        internal static Celebrity CelebritiesGet(int ID)
        {
            Celebrity Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.NAME, a.IMAGE, a.DESCRIPTION FROM WS_CELEBRITIES a WHERE a.ID = {0}", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Celebrity(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Celebrities CelebritiesGet()
        {
            Celebrities Result = new Celebrities();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.NAME, a.IMAGE, a.DESCRIPTION FROM WS_CELEBRITIES a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Celebrity(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void CelebrityUpdate(Celebrity celebrity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_CELEBRITIES SET NAME = @NAME, DESCRIPTION = @DESCRIPTION, " +
                        "IMAGE = @IMAGE WHERE ID = {0}", celebrity.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@NAME", FbDbType.VarChar, 100, celebrity.Name);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 2000, celebrity.Description);
                    AddParam(cmd, "@IMAGE", FbDbType.VarChar, 100, celebrity.Image);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void CelebrityDelete(Celebrity celebrity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_CELEBRITIES WHERE ID = {0}", celebrity.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static int CelebrityCreate(string name, string description, string image)
        {
            int Result = -1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CELEBRITY_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 100, name);
                    AddParam(cmd, "@IPDESCRIPTION", FbDbType.VarChar, 2000, description);
                    AddParam(cmd, "@IPVIDEO_REFERENCE", FbDbType.VarChar, 100, image);
                    AddParam(cmd, "@OPID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    Result = (int)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch //(Exception err)
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Celebrities

        #region News

        internal static NewsItems NewsGet()
        {
            NewsItems Result = new NewsItems();



            return (Result);
        }

        internal static NewsItems NewsGet(int PageSize, int PageNumber)
        {
            NewsItems Result = new NewsItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPDATETIME, p.OPTITLE, p.OPNEWS, p.OPIMAGE, p.opURL " +
                        "FROM WSP_NEWS_PAGE ({1}, {0}) p", PageSize, PageNumber);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new NewsItem(rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetString(4), rdr.IsDBNull(5) ? "" : rdr.GetString(5)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static NewsItem NewsGet(int ID)
        {
            NewsItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.NEWS_ID, r.NEWS_DATE, r.NEWS_TEXT, r.TITLE, r.IMAGE, r.HYPER_LINK " +
                        "FROM WS_NEWS r WHERE r.NEWS_ID = {0}", ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new NewsItem(rdr.GetInt32(0), rdr.GetDateTime(1), rdr.GetString(3), rdr.GetString(2), rdr.GetString(4), rdr.IsDBNull(5) ? "" : rdr.GetString(5));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int NewsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_NEWS";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion News

        #region Backup

        internal static void BackupDatabase(string Path)
        {
            try
            {
                FirebirdSql.Data.Services.FbBackup backupSvc = new FirebirdSql.Data.Services.FbBackup();
                backupSvc.ConnectionString = DALHelper.BackupConnectionString();

                backupSvc.BackupFiles.Add(new FirebirdSql.Data.Services.FbBackupFile(Path, 2048));
                backupSvc.Verbose = true;

                backupSvc.Options = FirebirdSql.Data.Services.FbBackupFlags.IgnoreLimbo;

                //backupSvc.ServiceOutput += new ServiceOutputEventHandler(ServiceOutput);

                backupSvc.Execute();
            }
            catch (Exception exc)
            {
                EmailAdd("web.master@sieradelta.com", "webmaster", "web.master@sieradelta.com", "webmaster", "fb backup failed", exc.Message);
            }
            finally
            {
            }
        }

        #endregion Backup

        #region Appointments

        /// <summary>
        /// Count of future appointments for the member of staff
        /// </summary>
        /// <param name="staff">Staff Member</param>
        /// <param name="fromDate">Date to search from</param>
        /// <returns>int - number of future salon appointments</returns>
        internal static int AppointmentFutureCount(User staff, DateTime fromDate)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(a.ID) FROM WS_APPOINTMENTS a WHERE a.APPOINTMENT_DATE >= @FROM_DATE " +
                        "AND a.STATUS IN (0, 1, 2) AND a.APPOINTMENT_TYPE = 0 AND a.EMPLOYEE_ID = @EMPLOYEE_ID";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@FROM_DATE", FbDbType.Date, fromDate);
                    AddParam(cmd, "@EMPLOYEE_ID", FbDbType.BigInt, staff.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, staff, fromDate);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #region Special Dates

        internal static SpecialDates SpecialDatesGet()
        {
            SpecialDates Result = new SpecialDates();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.SPECIAL_DATE, a.DESCRIPTION, a.SPECIAL_DATE_END FROM WS_APPOINTMENTS_SPECIAL_DATES a ORDER BY a.SPECIAL_DATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SpecialDate(rdr.GetInt32(0), rdr.GetString(2), rdr.GetDateTime(1), rdr.GetDateTime(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Special Dates

        internal static string AppointmentLastChangedBy(Appointment appointment)
        {
            string Result = "Unknown";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT m.USERNAME FROM WS_APPOINTMENTS a " +
                        "INNER JOIN WS_MEMBERS m on (m.ID = a.LAST_ALTERED_USER) WHERE a.ID = {0}", appointment.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.IsDBNull(0) ? Result : rdr.GetString(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, appointment);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static void AppointmentDeleteChildren(Appointment appointment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("DELETE FROM WS_APPOINTMENTS WHERE MASTER_APPOINTMENT = {0}", appointment.ID);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        //internal static AppointmentOptions AppointmentOptionsGet(int EmployeeID)
        //{
        //    AppointmentOptions Result = null;

        //    FbTransaction tran = null;
        //    FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
        //    try
        //    {
        //        try
        //        {
        //            string SQL = String.Format("SELECT r.EMPLOYEE_ID, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, r.ALLOW_WEDNESDAY, r.ALLOW_THURSDAY, " +
        //                "r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, r.START_TIME, r.END_TIME, r.LUNCH_START, " +
        //                "r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, r.PUBLIC_DIARY, m.USERNAME FROM WS_APPOINTMENT_OPTIONS r " +
        //                "LEFT JOIN WS_MEMBERS m ON (m.ID = r.EMPLOYEE_ID) WHERE r.EMPLOYEE_ID = {0}", EmployeeID);
        //            FbCommand cmd = new FbCommand(SQL, db, tran);

        //            FbDataReader rdr = cmd.ExecuteReader();

        //            if (rdr.Read())
        //            {
        //                Result = new AppointmentOptions(EmployeeID, rdr.GetString(14), rdr.GetString(1) == "T", rdr.GetString(2) == "T",
        //                    rdr.GetString(3) == "T", rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T",
        //                    rdr.GetString(7) == "T", rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetInt32(11),
        //                    rdr.GetString(12) == "T", rdr.GetString(13) == "T");
        //            }
        //            else
        //                throw new Exception(String.Format("Employee Options not found, Employee ID: {0}", EmployeeID));

        //CloseAndDispose(ref cmd, ref rdr);

        //            tran.Commit();
        //        }
        //        catch
        //        {
        //            tran.Rollback();
        //            throw;
        //        }
        //    }
        //    finally
        //    {
        //        CloseAndDispose(ref db, ref tran);
        //    }

        //    return (Result);
        //}

        internal static Appointment AppointmentGet(Int64 AppointmentID)
        {
            Appointment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, " +
                        "MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_ID = {0}", AppointmentID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, AppointmentID);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGetRequested()
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, " +
                        "CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_STATUS = 1 ORDER BY APPT_DATE, APPT_START_TIME");

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime Date, Int64 EmployeeID)
        {
            Therapist therapist = TherapistGet(EmployeeID);
            Appointments Result = new Appointments(therapist);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, " +
                        "CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE = @DATE AND EMPLOYEE_ID = @EMPLOYEE_ID ORDER BY APPT_START_TIME";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@DATE", FbDbType.Date, Date.Date);
                        AddParam(cmd, "@EMPLOYEE_ID", FbDbType.BigInt, EmployeeID);
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Appointment appt = new Appointment(rdr.GetInt64(0), EmployeeID, rdr.GetDateTime(1),
                                rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4),
                                rdr.GetInt32(5), rdr.GetInt32(7), rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10),
                                rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12), rdr.GetDateTime(13),
                                rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                                rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15),
                                rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                            Result.Add(appt);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Date, EmployeeID);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(int PageNumber, int PageSize)
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPEMPLOYEEID, p.OPAPPOINTMENT_DATE, p.OPSTART_TIME, p.opDURATION, " +
                        "p.OPSTATUS, p.opAPPOINTMENTTYPE, p.opTREATMENTTYPE, p.OPTREATMENTNAME, p.opNOTES, p.OPUSERID, " +
                        "p.OPUSERNAME, p.OPMASTER_APPOINTMENT, p.opCREATED, p.opLAST_ALTERED, p.opLOCKED_BY, p.opReminderSent " +
                        "FROM wsp_APPOINTMENTS_PAGE ({1}, {0}) p ORDER BY p.OPAPPOINTMENT_DATE", PageNumber, PageSize);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Appointment(rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDouble(3),
                                rdr.GetInt32(4), (Enums.AppointmentStatus)rdr.GetInt32(5), rdr.GetInt32(6), rdr.GetInt32(7), rdr.GetString(8), rdr.GetInt32(10),
                                rdr.GetString(11), rdr.GetString(9), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageNumber, PageSize);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);

        }

        internal static Appointments AppointmentsGet(User user, int PageNumber, int PageSize)
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPEMPLOYEEID, p.OPAPPOINTMENT_DATE, p.OPSTART_TIME, p.opDURATION, " +
                        "p.OPSTATUS, p.opAPPOINTMENTTYPE, p.opTREATMENTTYPE, p.OPTREATMENTNAME, p.opNOTES, p.opMASTER_APPOINTMENT, " +
                        "p.OPCREATED, p.OPLAST_ALTERED, p.opLOCKEDBY, OPREMINDERSENT " +
                        "FROM WSP_APPOINTMENTS_PAGE_MEMBER ({0}, {2}, {1}) p ORDER BY p.OPAPPOINTMENT_DATE DESC",
                        user.ID, PageNumber, PageSize);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Appointment(rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDouble(3),
                                rdr.GetInt32(4), (Enums.AppointmentStatus)rdr.GetInt32(5), rdr.GetInt32(6), rdr.GetInt32(7), rdr.GetString(8), user.ID,
                                user.UserName, rdr.GetString(9), rdr.IsDBNull(10) ? -1 : rdr.GetInt64(10),
                                rdr.GetDateTime(11), rdr.IsDBNull(12) ? rdr.GetDateTime(11) : rdr.GetDateTime(12),
                                rdr.IsDBNull(13) ? -1 : rdr.GetInt64(13), rdr.IsDBNull(14) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(14)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, PageNumber, PageSize);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(Appointment MasterAppointment)
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, " +
                        "CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE MASTER_APPOINTMENT = {0} ORDER BY APPT_START_TIME ",
                       MasterAppointment.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, MasterAppointment);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime StartDate, DateTime EndDate, Therapist Therapist)
        {
            Appointments Result = new Appointments();
            int Count = GetDBCount(String.Format("SELECT COUNT(APPT_ID) FROM VW_APPOINTMENTS WHERE APPT_DATE >= '{0}' AND APPT_DATE <= '{1}'", StartDate.ToString("MM/dd/yyyy"), EndDate.ToString("MM/dd/yyyy")));
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, " +
                        "CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE >= '{0}' AND APPT_DATE <= '{1}' AND EMPLOYEE_ID = {2} ORDER BY APPT_START_TIME ",
                       StartDate.ToString("MM/dd/yyyy"), EndDate.ToString("MM/dd/yyyy"), Therapist.EmployeeID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, StartDate, EndDate, Therapist);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGetNew(Int64 MaxID, DateTime LastChecked)
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT " +
                        "FROM VW_APPOINTMENTS WHERE (APPT_ID < 0 or APPT_ID > {0})  UNION " +
                        "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, " +
                        "NOTES, MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT " +
                        "FROM VW_APPOINTMENTS WHERE LAST_ALTERED >= @LAST_CHECKED",
                        MaxID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@LAST_CHECKED", FbDbType.Date, LastChecked);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, MaxID, LastChecked);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime minimumDate, Progress progress)
        {
            Appointments Result = new Appointments();
            int Total = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM VW_APPOINTMENTS WHERE APPT_DATE >= @APPT_DATE;";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@APPT_DATE", FbDbType.Date, minimumDate);
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Total = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            ProgressEventArgs args = new ProgressEventArgs(100, 0);

            if (progress != null)
                progress.RaiseOnProgress(args);

            tran = null;
            db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, " +
                        "MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE >= @MINDATE ORDER BY APPT_DATE, APPT_START_TIME";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MINDATE", FbDbType.Date, minimumDate);
                    FbDataReader rdr = cmd.ExecuteReader();

                    int i = 0;
                    double Percent;

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                        ++i;
                        Percent = (100 / Total) * i;
                        args.Percent = Convert.ToInt32(Percent);

                        if (progress != null)
                            progress.RaiseOnProgress(args);
                    }

                    args.Percent = 100;
                    if (progress != null)
                        progress.RaiseOnProgress(args);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, minimumDate, progress);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime Date)
        {
            Appointments Result = new Appointments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, MASTER_APPOINTMENT, " +
                        "CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE = '{0}' ORDER BY APPT_START_TIME ",
                       Date.ToString("MM/dd/yyyy"));
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Appointment appt = new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16));
                        Result.Add(appt);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Date);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Int64 AppointmentCreate(Appointment appointment, User currentUser)
        {
            Int64 Result = -1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_APPOINTMENTS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipAPPOINTMENT_DATE", FbDbType.TimeStamp, appointment.AppointmentDate);
                    AddParam(cmd, "@ipSTART_TIME", FbDbType.Double, appointment.StartTime);
                    AddParam(cmd, "@ipDURATION", FbDbType.Integer, appointment.Duration);
                    AddParam(cmd, "@ipSTATUS", FbDbType.Integer, appointment.Status);
                    AddParam(cmd, "@ipAPPOINTMENT_TYPE", FbDbType.Integer, appointment.AppointmentType);
                    AddParam(cmd, "@ipUSER_ID", FbDbType.BigInt, appointment.UserID);
                    AddParam(cmd, "@ipEMPLOYEE_ID", FbDbType.BigInt, appointment.EmployeeID);
                    AddParam(cmd, "@ipTREATMENT_ID", FbDbType.Integer, appointment.TreatmentID);
                    AddParam(cmd, "@ipNOTES", FbDbType.VarChar, 240, appointment.Notes);
                    AddParam(cmd, "@ipMASTER_APPOINTMENT", FbDbType.BigInt, appointment.MasterAppointment);
                    AddParam(cmd, "@IPCURRENT_USER", FbDbType.BigInt, currentUser.ID);
                    AddParam(cmd, "@IPCREATE_DATE", FbDbType.TimeStamp, DateTime.Now);
                    AddParam(cmd, "@IPLOCKED_BY", FbDbType.BigInt, appointment.LockedBy);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);


                    cmd.ExecuteNonQuery();

                    Result = (Int64)cmd.Parameters["@opNEWID"].Value;
                    appointment.ID = Result;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, appointment, currentUser);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AppointmentUpdate(Appointment appointment, User user)
        {
            for (int i = 0; i < Library.DAL.DALHelper.MAX_LOCK_CONFLICT_ATTEMPTS; i++)
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = "WSP_APPOINTMENTS_UPD";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        PrepareCommand(cmd);

                        AddParam(cmd, "@ipID", FbDbType.BigInt, appointment.ID);
                        AddParam(cmd, "@ipAPPOINTMENT_DATE", FbDbType.TimeStamp, appointment.AppointmentDate);
                        AddParam(cmd, "@ipSTART_TIME", FbDbType.Double, appointment.StartTime);
                        AddParam(cmd, "@ipDURATION", FbDbType.Integer, appointment.Duration);
                        AddParam(cmd, "@ipSTATUS", FbDbType.Integer, appointment.Status);
                        AddParam(cmd, "@ipAPPOINTMENT_TYPE", FbDbType.Integer, appointment.AppointmentType);
                        AddParam(cmd, "@ipUSER_ID", FbDbType.BigInt, appointment.UserID);
                        AddParam(cmd, "@ipEMPLOYEE_ID", FbDbType.BigInt, appointment.EmployeeID);
                        AddParam(cmd, "@ipTREATMENT_ID", FbDbType.Integer, appointment.TreatmentID);
                        AddParam(cmd, "@ipNOTES", FbDbType.VarChar, 240, appointment.Notes);
                        AddParam(cmd, "@ipUSER", FbDbType.BigInt, user.ID);
                        AddParam(cmd, "@ipMASTER_APPOINTMENT", FbDbType.BigInt, appointment.MasterAppointment);
                        AddParam(cmd, "@IPLOCKED_BY", FbDbType.BigInt, appointment.IsLocked ? appointment.LockedBy : -1);
                        AddParam(cmd, "@ipReminderSent", FbDbType.TimeStamp, appointment.ReminderDate);

                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);

                        tran.Commit();
                        break;
                    }
                    catch (Exception err)
                    {
                        if (i < Library.DAL.DALHelper.MAX_LOCK_CONFLICT_ATTEMPTS & err.Message.Contains("update conflicts with concurrent update"))
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, appointment, user);
                            tran.Rollback();
                            throw;
                        }
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }
        }

        internal static Appointments AppointmentsGet(DateTime AppointmentDate, bool ShowCancelledAppointment)
        {
            Appointments Result = new Appointments();
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, " +
                        "MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE = @DATE ";

                    if (!ShowCancelledAppointment)
                        SQL += " AND (APPT_STATUS NOT IN (4, 5))";

                    SQL += " ORDER BY APPT_START_TIME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DATE", FbDbType.Date, AppointmentDate);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    if (!ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, AppointmentDate, ShowCancelledAppointment))
                        throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime AppointmentDateStart, DateTime AppointmentDateFinish,
            bool ShowCancelledAppointment)
        {
            Appointments Result = new Appointments();
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, " +
                        "MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE CAST(APPT_DATE AS DATE) >= @DATESTART AND CAST(APPT_DATE AS DATE) <= @DATEFINNISH ";

                    if (!ShowCancelledAppointment)
                        SQL += " AND (APPT_STATUS NOT IN (4, 5))";

                    SQL += " ORDER BY APPT_START_TIME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DATESTART", FbDbType.Date, AppointmentDateStart);
                    AddParam(cmd, "@DATEFINNISH", FbDbType.Date, AppointmentDateFinish);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Appointment(rdr.GetInt64(0), rdr.GetInt32(6), rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    if (!ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, AppointmentDateStart, AppointmentDateFinish, ShowCancelledAppointment))
                        throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Appointments AppointmentsGet(DateTime AppointmentDate, Therapist therapist, bool ShowCancelledAppointment)
        {
            Appointments Result = new Appointments(therapist);
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT APPT_ID, APPT_DATE, APPT_START_TIME, APPT_DURATION, APPT_STATUS, " +
                        "APPT_TYPE, EMPLOYEE_ID, TREATMENT_ID, TREATMENT_NAME, USER_ID, USER_NAME, NOTES, " +
                        "MASTER_APPOINTMENT, CREATED, LAST_ALTERED, LOCKED_USER, REMINDER_SENT  " +
                        "FROM VW_APPOINTMENTS WHERE APPT_DATE = @DATE AND EMPLOYEE_ID = @EMPLOYEE ";

                    if (!ShowCancelledAppointment)
                        SQL += " AND (APPT_STATUS NOT IN (4, 5))";

                    SQL += " ORDER BY APPT_START_TIME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DATE", FbDbType.Date, AppointmentDate);
                    AddParam(cmd, "EMPLOYEE", FbDbType.BigInt, therapist.EmployeeID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Appointment(rdr.GetInt64(0), therapist.EmployeeID, rdr.GetDateTime(1),
                            rdr.GetDouble(2), rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(7),
                            rdr.GetString(8), rdr.GetInt32(9), rdr.GetString(10), rdr.GetString(11), rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.GetDateTime(13), rdr.IsDBNull(14) ? rdr.GetDateTime(13) : rdr.GetDateTime(14),
                            rdr.IsDBNull(15) ? -1 : rdr.GetInt64(15), rdr.IsDBNull(16) ? DateTime.Now.AddYears(-100) : rdr.GetDateTime(16)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    if (!err.Message.Contains("Thread was being aborted"))
                    {
                        ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, AppointmentDate, therapist, ShowCancelledAppointment);
                        tran.Rollback();
                        throw;
                    }
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentChanges AppointmentChanges(Appointment appointment)
        {
            AppointmentChanges Result = new AppointmentChanges();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT DISTINCT a.ID, a.APPOINTMENT_DATE, a.START_TIME, a.DURATION, a.STATUS, a.APPOINTMENT_TYPE, emp.USERNAME, treat.NAME, a.NOTES, a.LAST_ALTERED_DATE, lastEmp.USERNAME " +
                        "FROM WS_APPOINTMENTS_CHANGES a LEFT JOIN WS_MEMBERS lastEmp ON (lastEmp.ID = a.LAST_ALTERED_USER) " +
                        "LEFT JOIN WS_MEMBERS emp ON (emp.ID = a.EMPLOYEE_ID) LEFT JOIN WS_APPOINTMENT_TREATMENTS treat ON (treat.ID = a.TREATMENT_ID) " +
                        "WHERE a.ID = {0} ORDER BY a.LAST_ALTERED_DATE DESC",
                        appointment.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentChangeItem(rdr.GetInt64(0), rdr.GetDateTime(1), rdr.GetDouble(2),
                            rdr.GetInt32(3), (Enums.AppointmentStatus)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetString(6),
                            rdr.IsDBNull(7) ? "" : rdr.GetString(7), rdr.GetString(8), rdr.IsDBNull(9) ? DateTime.MinValue : rdr.GetDateTime(9), rdr.IsDBNull(10) ? "" : rdr.GetString(10)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, appointment);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentHistory AppointmentHistory(User user)
        {
            AppointmentHistory Result = new AppointmentHistory();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT CASE WHEN a.APPOINTMENT_DATE > CURRENT_DATE -180 THEN 'Last 6 Months' ELSE 'Older' END, S.DESCRIPTION, COUNT(a.ID) " +
                        "FROM WS_APPOINTMENTS a LEFT JOIN WS_APPOINTMENT_STATUS S ON (S.ID = A.STATUS) WHERE a.USER_ID = {0} AND a.APPOINTMENT_TYPE = 0 GROUP BY 2, 1 ORDER BY 1, 2",
                        user.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentHistoryItem(rdr.GetString(0), rdr.GetString(1), rdr.GetInt32(2)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #region Appointment Status

        internal static string AppointmentStatusGet(int AppointmentStatus)
        {
            string Result = "Unknown";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT DESCRIPTION FROM WS_APPOINTMENT_STATUS WHERE ID = {0} ORDER BY SORT_ORDER", AppointmentStatus);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetString(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentStatus AppointmentStatusGet(string name)
        {
            AppointmentStatus Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, DESCRIPTION, SORT_ORDER FROM WS_APPOINTMENT_STATUS WHERE DESCRIPTION = @NAME ORDER BY SORT_ORDER");
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 50, name);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new AppointmentStatus(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentStatuses AppointmentStatusGet()
        {
            AppointmentStatuses Result = new AppointmentStatuses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, DESCRIPTION, SORT_ORDER FROM WS_APPOINTMENT_STATUS ORDER BY SORT_ORDER";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentStatus(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Appointment Status

        #region Appointment Treatements

        internal static AppointmentTreatments AppointmentTreatmentsGet(User user, bool lastTreated = false)
        {
            AppointmentTreatments Result = new AppointmentTreatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.ISACTIVE, r.NAME, r.DURATION, r.REQUIRE_FOLLOW_ON,'', " +
                        "r.COST, r.MAXIMUM_AVAILABLE, r.IMAGE_NAME " +
                        "FROM WS_APPOINTMENT_TREATMENTS r  WHERE r.ID IN (SELECT DISTINCT a.TREATMENT_ID FROM WS_APPOINTMENTS a " +
                        "WHERE a.USER_ID = {0}) AND r.ISACTIVE = 'T'", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        if (lastTreated)
                        {
                            string SQLLast = String.Format("SELECT FIRST 1 a.APPOINTMENT_DATE, m.USERNAME " +
                                "FROM WS_APPOINTMENTS a LEFT JOIN WS_MEMBERS m ON (m.ID = a.EMPLOYEE_ID) " +
                                "WHERE a.USER_ID = {0} AND a.TREATMENT_ID = {1} ORDER BY a.APPOINTMENT_DATE DESC",
                                user.ID, rdr.GetInt32(0));
                            FbCommand cmdLast = new FbCommand(SQLLast, db, tran);
                            FbDataReader rdrLast = cmdLast.ExecuteReader();

                            string LastEmployee = "";
                            DateTime LastDate = DateTime.MinValue;

                            if (rdrLast.Read())
                            {
                                LastDate = rdrLast.GetDateTime(0);
                                LastEmployee = rdrLast.GetString(1);
                            }

                            Result.Add(new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(6), rdr.GetInt32(7), LastDate, 
                                LastEmployee, rdr.GetString(8)));
                        }
                        else
                        {
                            Result.Add(new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(6), rdr.GetInt32(7),
                                rdr.GetString(8)));
                        }
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentTreatments AppointmentTreatmentsGet(Therapist therapist, bool activeTreatmentsOnly)
        {
            AppointmentTreatments Result = new AppointmentTreatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.ISACTIVE, r.NAME, r.DURATION, r.REQUIRE_FOLLOW_ON, m.USERNAME, " +
                        "r.COST, r.MAXIMUM_AVAILABLE, r.IMAGE_NAME " +
                        "FROM WS_TREATMENT_TO_THERAPIST ttt   INNER JOIN WS_APPOINTMENT_TREATMENTS r ON (ttt.TREATMENT_ID = r.ID) " +
                        "INNER JOIN WS_MEMBERS m ON (ttt.THERAPIST_ID = m.ID) WHERE m.ID = {0} ", therapist.EmployeeID);

                    if (activeTreatmentsOnly)
                        SQL += " AND r.ISACTIVE = 'T' ";

                    SQL += " ORDER BY r.NAME ";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(6), rdr.GetInt32(7),
                            rdr.GetString(8)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AppointmentsGetCount(User user)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT count(a.ID) FROM WS_APPOINTMENTS a INNER JOIN WS_MEMBERS m on (m.ID = a.USER_ID) " +
                    "INNER JOIN WS_MEMBERS e on (e.ID = a.EMPLOYEE_ID) INNER JOIN WS_APPOINTMENT_TREATMENTS t on (t.ID = a.TREATMENT_ID) " +
                    "INNER JOIN WS_APPOINTMENT_STATUS status on (status.ID = a.STATUS) WHERE USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static AppointmentTreatments AppointmentTreatmentsGet()
        {
            AppointmentTreatments Result = new AppointmentTreatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.ISACTIVE, r.NAME, r.DURATION, r.REQUIRE_FOLLOW_ON, r.COST, r.MAXIMUM_AVAILABLE, " +
                        "r.IMAGE_NAME " +
                        "FROM WS_APPOINTMENT_TREATMENTS r ORDER BY r.NAME";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(5), rdr.GetInt32(6),
                            rdr.GetString(7)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Appointment Treatments

        #endregion Appointments

        #region Appointment Treatments

        /// <summary>
        /// Gets all treatments for a waiting list
        /// </summary>
        /// <param name="waitingList"></param>
        /// <returns></returns>
        internal static AppointmentTreatments AppointmentTreatmentsGet(WaitingList waitingList)
        {
            AppointmentTreatments Result = new AppointmentTreatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.ISACTIVE, a.NAME, a.DURATION, a.REQUIRE_FOLLOW_ON, " +
                        "a.COST, a.MAXIMUM_AVAILABLE, a.IMAGE_NAME FROM WS_APPOINTMENT_TREATMENTS a " +
                        "JOIN WS_WAIT_LIST_LONG_TO_TREAT wltt ON (wltt.TREATMENT_ID = a.ID) " +
                        "WHERE wltt.WAIT_LIST_ID = @WAIT_LIST_ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@WAIT_LIST_ID", FbDbType.BigInt, waitingList.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(5), rdr.GetInt32(6),
                            rdr.GetString(7)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);

        }

        internal static AppointmentTreatment AppointmentTreatmentGet(int TreatmentID)
        {
            AppointmentTreatment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.ISACTIVE, r.NAME, r.DURATION, r.REQUIRE_FOLLOW_ON, " +
                        "r.COST, r.MAXIMUM_AVAILABLE, r.IMAGE_NAME " +
                        "FROM WS_APPOINTMENT_TREATMENTS r WHERE r.ID = {0}", TreatmentID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new AppointmentTreatment(rdr.GetInt32(0), rdr.GetString(1) == "T", rdr.GetString(2),
                            rdr.GetInt32(3), rdr.GetString(4) == "T", rdr.GetDecimal(5), rdr.GetInt32(6),
                            rdr.GetString(7));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AppointmentTreatmentsSave(AppointmentTreatments treatments)
        {
            throw new Exception("Not implemented");
        }

        internal static void AppointmentTreatmentCreate(AppointmentTreatment treatment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_APPT_TREATMENTS_INSERT";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipISACTIVE", FbDbType.VarChar, 1, treatment.IsActive ? "T" : "F");
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, treatment.Name);
                    AddParam(cmd, "@ipDURATION", FbDbType.Integer, treatment.Duration);
                    AddParam(cmd, "@ipREQUIRE_FOLLOW_ON", FbDbType.VarChar, 1, treatment.RequireFollowOn ? "T" : "F");
                    AddParam(cmd, "@ipCOST", FbDbType.Double, treatment.Cost);
                    AddParam(cmd, "@ipMAXIMUM_AVAILABLE", FbDbType.Integer, treatment.MaximumTreatments);
                    AddParam(cmd, "@ipIMAGE_NAME", FbDbType.VarChar, 150, treatment.Image);
                    AddParam(cmd, "@opNEWID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opNEWID"].Value;
                    treatment.ID = newID;
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static bool AppointmentTreatmentContains(AppointmentTreatment apptTreatment, Therapist therapist)
        {
            int Count = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT COUNT(*) FROM WS_TREATMENT_TO_THERAPIST a " +
                    "WHERE a.THERAPIST_ID = {0} AND a.TREATMENT_ID = {1}", therapist.EmployeeID, apptTreatment.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Count = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Count > 0);
        }

        internal static void AppointmentTreatmentAdd(AppointmentTreatment apptTreatment, Therapist therapist)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_TREATMENT_TO_THERAPIST_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipTHERAPIST_ID", FbDbType.BigInt, therapist.EmployeeID);
                    AddParam(cmd, "@ipTREATMENT_ID", FbDbType.Integer, apptTreatment.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AppointmentTreatmentRemove(AppointmentTreatment apptTreatment, Therapist therapist)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_TREATMENT_TO_THERAPIST WHERE THERAPIST_ID = {0} AND TREATMENT_ID = {1};", therapist.EmployeeID, apptTreatment.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AppointmentTreatmentSave(AppointmentTreatment apptTreatment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_APPOINTMENT_TREATMENTS_SAVE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, apptTreatment.ID);
                    AddParam(cmd, "@ipISACTIVE", FbDbType.VarChar, 1, apptTreatment.IsActive ? "T" : "F");
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, apptTreatment.Name);
                    AddParam(cmd, "@ipDURATION", FbDbType.Integer, apptTreatment.Duration);
                    AddParam(cmd, "@ipREQUIRE_FOLLOW_ON", FbDbType.VarChar, 1, apptTreatment.RequireFollowOn ? "T" : "F");
                    AddParam(cmd, "@ipCOST", FbDbType.Double, apptTreatment.Cost);
                    AddParam(cmd, "@ipMAXIMUM_AVAILABLE", FbDbType.Integer, apptTreatment.MaximumTreatments);
                    AddParam(cmd, "@IMAGE_NAME", FbDbType.VarChar, 150, apptTreatment.Image);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Appointment Treatments

        #region Countries

        internal static void CountrySet(Country country)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "UPDATE WS_COUNTRIES SET SORTORDER = @SORT_ORDER, " +
                        "SHIPPING_COST = @SHIPPING_COSTS, VAT_RATE = @VAT_RATE, " +
                        "SHOW_PRICE_DATA = @SHOW_PRICE_DATA, PRICE_COLUMN = @PRICE_COLUMN, " +
                        "LOCALIZED = @LOCALIZED, ADDRESS_SETTINGS = @ADDRESS_SETTINGS, " +
                        "DEFAULT_CURRENCY = @DEFAULT_CURRENCY, LOCALIZED_CULTURE = @LOCALIZED_CULTURE, " +
                        "LOCALIZED_LANGUAGE = @LOCALIZED_LANGUAGE, CURRENCY_SYMBOL = @CURRENCY_SYMBOL " +
                        "WHERE ID = @COUNTRY_ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@SORT_ORDER", FbDbType.Integer, country.SortOrder);
                    AddParam(cmd, "@SHIPPING_COSTS", FbDbType.Double, country.ShippingCosts);
                    AddParam(cmd, "@VAT_RATE", FbDbType.Double, country.VATRate);
                    AddParam(cmd, "@SHOW_PRICE_DATA", FbDbType.Char, 1, country.ShowPrices ? "T" : "F");
                    AddParam(cmd, "@PRICE_COLUMN", FbDbType.Integer, country.PriceColumn);
                    AddParam(cmd, "@LOCALIZED", FbDbType.Char, 1, country.CanLocalize ? "Y" : "N");
                    AddParam(cmd, "@ADDRESS_SETTINGS", FbDbType.BigInt, (Int64)country.AddressSettings);
                    AddParam(cmd, "@DEFAULT_CURRENCY", FbDbType.VarChar, 3, country.DefaultCurrency);
                    AddParam(cmd, "@LOCALIZED_CULTURE", FbDbType.VarChar, 6, country.LocalizedCulture);
                    AddParam(cmd, "@LOCALIZED_LANGUAGE", FbDbType.VarChar, 50, country.LocalizedLanguage);
                    AddParam(cmd, "@CURRENCY_SYMBOL", FbDbType.VarChar, 25, country.CurrencySymbol);
                    AddParam(cmd, "@COUNTRY_ID", FbDbType.Integer, country.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Countries CountriesGet()
        {
            Countries Result = new Countries();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.COUNTRYCODE, r.COUNTRY, r.SORTORDER, r.SHIPPING_COST, r.SHOW_ON_WEB, " +
                        "r.AUTO_REDIRECT, r.CULTURE, r.CONVERSION_RATE, r.VAT_RATE, r.SHOW_PRICE_DATA, r.COST_MULTIPLIER, " +
                        "r.PRICE_COLUMN, r.LOCALIZED, r.ADDRESS_SETTINGS, r.CURRENCY_SYMBOL, r.ALLOW_VAT_REMOVE, " +
                        "r.ALLOW_FREE_SPEND, r.FREE_SPEND_AMOUNT, r.ALLOW_CURRENCY_CONVERSION, r.DEFAULT_CURRENCY, " +
                        "r.LOCALIZED_CULTURE, r.LOCALIZED_LANGUAGE " +
                        "FROM WS_COUNTRIES r ORDER BY r.SORTORDER, r.COUNTRY ";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Country(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetDecimal(4), rdr.GetString(5) == "T", rdr.GetString(6),
                                rdr.GetString(7), rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetString(10) == "T",
                                rdr.GetDouble(11), rdr.GetInt32(12), rdr.GetString(13) == "Y",
                                (AddressOptions)rdr.GetInt64(14), rdr.IsDBNull(15) ? String.Empty : rdr.GetString(15),
                                rdr.GetString(16) == "Y", rdr.GetString(17) == "Y", rdr.GetDouble(18),
                                rdr.GetString(19) == "Y", rdr.GetString(20), rdr.GetString(21),
                                rdr.IsDBNull(22) ? String.Empty : rdr.GetString(22)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Country CountryGet(string CountryCode)
        {
            Country Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.COUNTRYCODE, r.COUNTRY, r.SORTORDER, r.SHIPPING_COST, r.SHOW_ON_WEB, " +
                        "r.AUTO_REDIRECT, r.CULTURE, r.CONVERSION_RATE, r.VAT_RATE, r.SHOW_PRICE_DATA, r.COST_MULTIPLIER, " +
                        "r.PRICE_COLUMN, r.LOCALIZED, r.ADDRESS_SETTINGS, r.CURRENCY_SYMBOL, r.ALLOW_VAT_REMOVE, " +
                        "r.ALLOW_FREE_SPEND, r.FREE_SPEND_AMOUNT, r.ALLOW_CURRENCY_CONVERSION, r.DEFAULT_CURRENCY, " +
                        "r.LOCALIZED_CULTURE, r.LOCALIZED_LANGUAGE " +
                        "FROM WS_COUNTRIES r WHERE r.COUNTRYCODE = '{0}'", CountryCode);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new Country(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetDecimal(4), rdr.GetString(5) == "T", rdr.GetString(6),
                                rdr.GetString(7), rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetString(10) == "T",
                                rdr.GetDouble(11), rdr.GetInt32(12), rdr.GetString(13) == "Y",
                                (AddressOptions)rdr.GetInt64(14), rdr.IsDBNull(15) ? String.Empty : rdr.GetString(15),
                                rdr.GetString(16) == "Y", rdr.GetString(17) == "Y", rdr.GetDouble(18),
                                rdr.GetString(19) == "Y", rdr.GetString(20), rdr.GetString(21),
                                rdr.IsDBNull(22) ? String.Empty : rdr.GetString(22));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Country CountryGet(CultureInfo cultureInfo)
        {
            Country Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST 1 r.ID, r.COUNTRYCODE, r.COUNTRY, r.SORTORDER, r.SHIPPING_COST, r.SHOW_ON_WEB, " +
                        "r.AUTO_REDIRECT, r.CULTURE, r.CONVERSION_RATE, r.VAT_RATE, r.SHOW_PRICE_DATA, r.COST_MULTIPLIER, " +
                        "r.PRICE_COLUMN, r.LOCALIZED, r.ADDRESS_SETTINGS, r.CURRENCY_SYMBOL, r.ALLOW_VAT_REMOVE, " +
                        "r.ALLOW_FREE_SPEND, r.FREE_SPEND_AMOUNT, r.ALLOW_CURRENCY_CONVERSION, r.DEFAULT_CURRENCY, " +
                        "r.LOCALIZED_CULTURE, r.LOCALIZED_LANGUAGE " +
                        "FROM WS_COUNTRIES r WHERE r.LOCALIZED = 'Y' AND LOWER(r.CULTURE) = '{0}' ORDER BY r.ID", cultureInfo.Name.ToLower());
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new Country(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetDecimal(4), rdr.GetString(5) == "T", rdr.GetString(6),
                                rdr.GetString(7), rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetString(10) == "T",
                                rdr.GetDouble(11), rdr.GetInt32(12), rdr.GetString(13) == "Y",
                                (AddressOptions)rdr.GetInt64(14), rdr.IsDBNull(15) ? String.Empty : rdr.GetString(15),
                                rdr.GetString(16) == "Y", rdr.GetString(17) == "Y", rdr.GetDouble(18),
                                rdr.GetString(19) == "Y", rdr.GetString(20), rdr.GetString(21),
                                rdr.IsDBNull(22) ? String.Empty : rdr.GetString(22));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Country CountryGet(int CountryID)
        {
            Country Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.COUNTRYCODE, r.COUNTRY, r.SORTORDER, r.SHIPPING_COST, r.SHOW_ON_WEB, " +
                        "r.AUTO_REDIRECT, r.CULTURE, r.CONVERSION_RATE, r.VAT_RATE, r.SHOW_PRICE_DATA, r.COST_MULTIPLIER, " +
                        "r.PRICE_COLUMN, r.LOCALIZED, r.ADDRESS_SETTINGS, r.CURRENCY_SYMBOL, r.ALLOW_VAT_REMOVE, " +
                        "r.ALLOW_FREE_SPEND, r.FREE_SPEND_AMOUNT, r.ALLOW_CURRENCY_CONVERSION, r.DEFAULT_CURRENCY, " +
                        "r.LOCALIZED_CULTURE, r.LOCALIZED_LANGUAGE " +
                        "FROM WS_COUNTRIES r WHERE r.ID = {0}", CountryID);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new Country(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                                rdr.GetInt32(3), rdr.GetDecimal(4), rdr.GetString(5) == "T", rdr.GetString(6),
                                rdr.GetString(7), rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetString(10) == "T",
                                rdr.GetDouble(11), rdr.GetInt32(12), rdr.GetString(13) == "Y",
                                (AddressOptions)rdr.GetInt64(14), rdr.IsDBNull(15) ? String.Empty : rdr.GetString(15),
                                rdr.GetString(16) == "Y", rdr.GetString(17) == "Y", rdr.GetDouble(18),
                                rdr.GetString(19) == "Y", rdr.GetString(20), rdr.GetString(21),
                                rdr.IsDBNull(22) ? String.Empty : rdr.GetString(22));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Country CountryGet(int CountryID, FbConnection conn, FbTransaction tran)
        {
            Country Result = null;

            string SQL = String.Format("SELECT r.ID, r.COUNTRYCODE, r.COUNTRY, r.SORTORDER, r.SHIPPING_COST, r.SHOW_ON_WEB, " +
                "r.AUTO_REDIRECT, r.CULTURE, r.CONVERSION_RATE, r.VAT_RATE, r.SHOW_PRICE_DATA, r.COST_MULTIPLIER, " +
                "r.PRICE_COLUMN, r.LOCALIZED, r.ADDRESS_SETTINGS, r.CURRENCY_SYMBOL, r.ALLOW_VAT_REMOVE, " +
                "r.ALLOW_FREE_SPEND, r.FREE_SPEND_AMOUNT, r.ALLOW_CURRENCY_CONVERSION, r.DEFAULT_CURRENCY, " +
                "r.LOCALIZED_CULTURE, r.LOCALIZED_LANGUAGE " +
                "FROM WS_COUNTRIES r WHERE r.ID = {0}", CountryID);
            FbDataReader rdr = null;
            FbCommand cmd = new FbCommand(SQL, conn, tran);
            try
            {
                rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    Result = new Country(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                        rdr.GetInt32(3), rdr.GetDecimal(4), rdr.GetString(5) == "T", rdr.GetString(6),
                        rdr.GetString(7), rdr.GetDouble(8), rdr.GetDouble(9), rdr.GetString(10) == "T",
                        rdr.GetDouble(11), rdr.GetInt32(12), rdr.GetString(13) == "Y",
                        (AddressOptions)rdr.GetInt64(14), rdr.IsDBNull(15) ? String.Empty : rdr.GetString(15),
                        rdr.GetString(16) == "Y", rdr.GetString(17) == "Y", rdr.GetDouble(18),
                        rdr.GetString(19) == "Y", rdr.GetString(20), rdr.GetString(21),
                        rdr.IsDBNull(22) ? String.Empty : rdr.GetString(22));
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (Result);
        }

        #endregion Countries

        #region Diary

        #region AppointmentTypes

        internal static AppointmentTypes AppointmentTypesGet()
        {
            AppointmentTypes Result = new AppointmentTypes();

            Result.Add(new AppointmentType(0, "Beauty Treatment"));
            Result.Add(new AppointmentType(1, "Lunch Break"));
            Result.Add(new AppointmentType(2, "Annual Leave"));
            Result.Add(new AppointmentType(3, "Training"));
            Result.Add(new AppointmentType(4, "Clean Salon"));
            Result.Add(new AppointmentType(13, "Front Desk"));
            Result.Add(new AppointmentType(5, "Office"));
            Result.Add(new AppointmentType(6, "Not Working"));
            Result.Add(new AppointmentType(7, "Unpaid Break"));
            Result.Add(new AppointmentType(8, "Sick Day"));
            Result.Add(new AppointmentType(9, "Product Manufacture"));
            Result.Add(new AppointmentType(10, "Internal Meeting"));
            Result.Add(new AppointmentType(11, "Meeting with client"));
            Result.Add(new AppointmentType(12, "Working Off Site"));
            Result.Add(new AppointmentType(14, "External Training"));

            return (Result);
        }


        #endregion AppointmentTypes

        #endregion Diary

        #region Distributors

        internal static int DistributorsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_SALONS WHERE SHOW_ON_WEB = 0 AND SALON_TYPE = 2;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Distributors DistributorsGet(int PageNumber, int PageSize)
        {
            Distributors Result = new Distributors();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_DISTRIBUTORS_PAGE({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Distributor(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetInt32(14) == 0 ? true : false,
                                (Enums.SalonType)rdr.GetInt32(15), rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Distributors

        #region Helpdesk

        #region Customer Comments

        internal static Int64 HelpdeskCustomerCommentsAdd(User user, string Username, string Comments)
        {
            Int64 Result = -1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CUST_COMMENTS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipIPUSERID", FbDbType.Integer, user == null ? -1 : user.ID);
                    AddParam(cmd, "@IPUSERNAME", FbDbType.VarChar, 100, Username);
                    AddParam(cmd, "@IPUSER_COMMENTS", FbDbType.VarChar, 10000, Comments);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Result = (Int64)cmd.Parameters["@opNEWID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static CustomerComments HelpdeskCustomerCommentsGet(int PageNumber, int PageSize)
        {
            CustomerComments Result = new CustomerComments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opUSERID, opUSERNAME, opUSER_COMMENTS, opSHOW_ON_WEB FROM WSP_CUST_COMMENTS_PAGE({1}, {0}) ORDER BY opID DESC;", PageNumber, PageSize);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new CustomerComment(rdr.GetInt32(0), rdr.IsDBNull(1) ? -1 : rdr.GetInt32(1), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// retrieves an individual comment
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        internal static CustomerComment HelpdeskCustomerCommentGet(int id)
        {
            CustomerComment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, USERID, USERNAME, USER_COMMENTS, SHOW_ON_WEB " +
                        "FROM WS_CUSTOMER_COMMENTS WHERE ID = {0};", id);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new CustomerComment(rdr.GetInt32(0), rdr.IsDBNull(1) ? -1 : rdr.GetInt32(1), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates an individual comment
        /// </summary>
        /// <param name="comment"></param>
        internal static void HelpdeskCustomerCommentUpdate(CustomerComment comment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_CUSTOMER_COMMENTS SET USERNAME = @USERNAME, " +
                        "USER_COMMENTS = @USERCOMMENTS, SHOW_ON_WEB = @SHOWONWEB WHERE ID = {0};", comment.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@USERNAME", FbDbType.VarChar, 100, comment.UserName);
                    AddParam(cmd, "@USERCOMMENTS", FbDbType.VarChar, 8000, comment.Comments);
                    AddParam(cmd, "@SHOWONWEB", FbDbType.Char, 1, comment.ShowOnWeb ? "Y" : "N");

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Deletes an individual comment
        /// </summary>
        /// <param name="comment"></param>
        internal static void HelpdeskCustomerCommentDelete(CustomerComment comment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_CUSTOMER_COMMENTS WHERE ID = {0};", comment.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static CustomerComments HelpdeskCustomerCommentsGet()
        {
            CustomerComments Result = new CustomerComments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT opID, opUSERID, opUSERNAME, opUSER_COMMENTS, opSHOW_ON_WEB FROM WSP_CUST_COMMENTS_PAGE(1000, 1) ORDER BY opID DESC;";


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new CustomerComment(rdr.GetInt32(0), rdr.IsDBNull(1) ? -1 : rdr.GetInt32(1), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Customer Comments

        #region Support Tickets

        internal static void HelpdeskSupportTicketsMaintenance()
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "wsp_ticket_maintenance;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static SupportTicket HelpdeskSupportTicketGet(string ticketKey, string eMail)
        {
            SupportTicket Result = null;

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                        "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE a.TICKET_KEY = @KEY AND a.CREATED_EMAIL = @EMAIL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@KEY", FbDbType.VarChar, 10, ticketKey);
                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 50, eMail);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTickets HelpdeskSupportTicketsGet(User user, string TicketKey)
        {
            SupportTickets Result = new SupportTickets();

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                        "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE UPPER(a.TICKET_KEY) LIKE '%{0}%'", TicketKey.ToUpper());
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTickets HelpdeskSupportTicketsGet(User user)
        {
            SupportTickets Result = new SupportTickets();

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                    "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE UPPER(a.CREATED_EMAIL) = @EMAIL";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, user.Email.ToUpper());

                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10)));
                    }

                }
                finally
                {
                    tran.Commit();

                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTicket HelpdeskSupportTicketGet(int TicketID)
        {
            SupportTicket Result = null;

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                        "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE a.TICKET_ID = {0}", TicketID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void HelpdeskSupportTicketSubmitResponse(SupportTicket supportTicket,
            string ResponseContent, string ReplierName, bool IsAdmin)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_TICKET_REPLY";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipHeader_ID", FbDbType.Integer, supportTicket.ID);
                    AddParam(cmd, "@ipContent", FbDbType.VarChar, 2500, ResponseContent);
                    AddParam(cmd, "@ipCreate_Date", FbDbType.TimeStamp, DateTime.Now);
                    AddParam(cmd, "@ipUser_Name", FbDbType.VarChar, 50, ReplierName);
                    AddParam(cmd, "@ipISADMIN", FbDbType.Char, 1, BoolToStr(IsAdmin));
                    AddParam(cmd, "@opNEWID", FbDbType.Integer);

                    // Execute Update
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    // Commit changes
                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void HelpdeskSupportTicketStatusUpdate(SupportTicket Ticket, TicketStatus Status)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_TICKET_HEADER SET STATUS = {0} " +
                        "WHERE ID = {1};", Status.ID, Ticket.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd, CommandType.Text);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void HelpdeskSupportTicketDepartmentUpdate(SupportTicket Ticket, TicketDepartment department)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_TICKET_HEADER SET DEPARTMENT = {0} " +
                        "WHERE ID = {1};", department.ID, Ticket.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd, CommandType.Text);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static SupportTicket HelpdeskSupportTicketCreate(string TicketKey, string Subject, string Content,
            string UserName, int Department, int Status, int Priority, string Email)
        {
            SupportTicket Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_TICKET_HDR_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipTICKET_KEY", FbDbType.VarChar, 10, TicketKey);
                    AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 100, Subject);
                    AddParam(cmd, "@ipDEPARTMENT", FbDbType.Integer, Department);
                    AddParam(cmd, "@ipSTATUS", FbDbType.Integer, Status);
                    AddParam(cmd, "@ipPRIORITY", FbDbType.Integer, Priority);

                    AddParam(cmd, "@ipCREATED_BY", FbDbType.VarChar, 50, UserName);
                    AddParam(cmd, "@ipCREATED_BY_EMAIL", FbDbType.VarChar, 50, Email);
                    AddParam(cmd, "@ipCONTENT", FbDbType.VarChar, 2500, Content);
                    AddParam(cmd, "@opNEWID", FbDbType.Integer);

                    // Execute Update
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    // Commit changes
                    tran.Commit();

                    //int id = (int)cmd.Parameters["@opNEWID"].Value;

                    Result = HelpdeskSupportTicketGet(TicketKey, Email);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTicketMessages HelpdeskSupportTicketMessagesGet(SupportTicket Ticket)
        {
            SupportTicketMessages Result = new SupportTicketMessages();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.HEADER_ID, a.CONTENT, a.CREATE_DATE, a.USER_NAME FROM WS_TICKET_BODY a WHERE a.HEADER_ID = {0} ORDER BY a.CREATE_DATE;", Ticket.ID);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SupportTicketMessage(rdr.GetInt32(0), Ticket, rdr.GetString(2), rdr.GetDateTime(3), rdr.GetString(4)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Support Tickets

        #region Support Ticket Collections

        internal static TicketPriorities HelpdeskTicketPrioritiesGet()
        {
            TicketPriorities Result = new TicketPriorities();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_TICKET_PRIORITY a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TicketPriority(rdr.GetInt32(0), rdr.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TicketDepartments HelpdeskTicketDepartmentsGet()
        {
            TicketDepartments Result = new TicketDepartments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_TICKET_DEPARTMENT a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TicketDepartment(rdr.GetInt32(0), rdr.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void HelpdeskTicketDepartmentDelete(TicketDepartment department)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_TICKET_DEPARTMENT WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, department.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static TicketDepartment HelpdeskTicketDepartmentInsert(string description)
        {
            TicketDepartment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_TICKET_DEPARTMENT_INSERT";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, description);
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    Result = new TicketDepartment(newID, description);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void HelpdeskTicketDepartmentSave(TicketDepartment department)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_TICKET_DEPARTMENT SET DESCRIPTION = @DESCRIPTION " +
                    "WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, department.Description);
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, department.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static TicketStatuses HelpdeskTicketStatusesGet()
        {
            TicketStatuses Result = new TicketStatuses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_TICKET_STATUS a";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TicketStatus(rdr.GetInt32(0), rdr.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Support Ticket Collections

        #endregion Helpdesk

        #region Salons

        internal static Salons SalonsFindNearest(string Postcode)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT FIRST 10 s.ID, s.NAME, s.IMAGE, s.CONTACT_NAME, s.ADDRESS, s.TELEPHONE, s.FAX, s.EMAIL, s.URL, " +
                        "s.SALON_STOCKIST, s.LOCATION, s.SORT_ORDER, s.POSTCODE, s.VIP, fns.DISTANCE, s.SALON_TYPE, " +
                        "s.OPENING_TIMES FROM WSF_FIND_NEAREST_SALON(@POSTCODE) fns " +
                        "INNER JOIN WS_SALONS s ON (s.ID = fns.SALON_ID) WHERE (s.SALON_TYPE IN (0, 1)) ORDER BY DISTANCE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@POSTCODE", FbDbType.VarChar, 15, Postcode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetFloat(14),
                                (Enums.SalonType)rdr.GetInt32(15), rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salon SalonFind(string SalonName)
        {
            Salon Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE({1}, {0}) " +
                        "WHERE opNAME = @SALONNAME;", 1, 250);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@SALONNAME", FbDbType.VarChar, 150, SalonName);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons SalonsFind(string SalonName)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE({1}, {0}) " +
                        "WHERE Lower(opNAME) LIKE '%{2}%';", 1, 250, SalonName.ToLower());
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons SalonsGet(User user)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format(String.Format("SELECT a.ID, a.NAME, a.IMAGE, a.CONTACT_NAME, a.ADDRESS, a.TELEPHONE, a.FAX, a.EMAIL, a.URL, a.SALON_STOCKIST, " +
                        "a.LOCATION, a.SORT_ORDER, a.POSTCODE, a.VIP, a.SHOW_ON_WEB, a.SALON_TYPE, a.OPENING_TIMES FROM WS_SALONS a INNER JOIN WS_SALONS_TO_MEMBERS sm on (sm.SALON_ID = a.ID) WHERE SM.MEMBER_ID = {0}", user.ID));

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons SalonsGet(int PageNumber, int PageSize)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetInt32(14) == 0 ? true : false,
                                (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int SalonsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_SALONS WHERE SHOW_ON_WEB = 0 AND SALON_TYPE IN (0, 1);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salon SalonGet(int SalonID)
        {
            Salon Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.NAME, a.IMAGE, a.CONTACT_NAME, a.ADDRESS, a.TELEPHONE, a.FAX, " +
                        "a.EMAIL, a.URL, a.SALON_STOCKIST, a.LOCATION, a.SORT_ORDER, a.POSTCODE, a.VIP, a.SHOW_ON_WEB, " +
                        "a.SALON_TYPE, a.OPENING_TIMES " +
                        "FROM WS_SALONS a where a.ID = {0} AND SALON_TYPE IN (0, 1);", SalonID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Salon(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10),
                                rdr.GetInt32(11), rdr.GetString(12), rdr.GetString(13) == "T", rdr.GetInt32(14) == 0,
                                (Enums.SalonType)rdr.GetInt32(15), rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16));

                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SalonDiscount SalonDiscountGet(Salon salon)
        {
            SalonDiscount Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.SALON_ID, a.DISCOUNT, a.CUSTOMER_DISCOUNT, a.COUPON_CODE " +
                        "FROM WS_SALON_DISCOUNTS a WHERE a.SALON_ID = {0};", salon.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new SalonDiscount(rdr.GetInt32(0), SalonGet(rdr.GetInt32(0)), rdr.GetInt32(1), rdr.GetInt32(2), rdr.GetString(3));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SalonDiscount SalonDiscountGet(string CouponCode)
        {
            SalonDiscount Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.SALON_ID, a.DISCOUNT, a.CUSTOMER_DISCOUNT, a.COUPON_CODE " +
                        "FROM WS_SALON_DISCOUNTS a WHERE UPPER(a.COUPON_CODE) = @COUPONCODE;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@COUPONCODE", FbDbType.VarChar, 150, CouponCode.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new SalonDiscount(rdr.GetInt32(0), SalonGet(rdr.GetInt32(0)), rdr.GetInt32(1), rdr.GetInt32(2), rdr.GetString(3));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Salons

        #region Therapists

        internal static Therapists TherapistsGet()
        {
            Therapists Result = new Therapists();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.EMPLOYEE_ID, m.USERNAME, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, r.ALLOW_WEDNESDAY, " +
                        "r.ALLOW_THURSDAY, r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, r.START_TIME, r.END_TIME, " +
                        "r.LUNCH_START, r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, r.PUBLIC_DIARY, r.APPOINTMENT_GROUP " +
                        "FROM WS_APPOINTMENT_OPTIONS r   INNER JOIN WS_MEMBERS m on (m.ID = r.EMPLOYEE_ID) " +
                        "WHERE m.MEMBER_LEVEL < 11 "+
                        "ORDER BY m.USERNAME;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        FbCommand cmdGroup = new FbCommand(String.Format("SELECT ID, DESCRIPTION FROM WS_APPOINTMENT_GROUPS WHERE ID = {0}", rdr.GetInt32(15)), db, tran);
                        FbDataReader rdrGroup = cmdGroup.ExecuteReader();
                        rdrGroup.Read();

                        Therapist t = new Therapist(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2) == "T", rdr.GetString(3) == "T",
                            rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T", rdr.GetString(7) == "T",
                            rdr.GetString(8) == "T", rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetDouble(11), rdr.GetInt32(12),
                            rdr.GetString(13) == "T", rdr.GetString(14) == "T", new AppointmentGroup(rdrGroup.GetInt32(0), rdrGroup.GetString(1)));
                        Result.Add(t);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }



            return (Result);
        }

        internal static Therapist TherapistsGet(Int64 TherapistID)
        {
            Therapist Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.EMPLOYEE_ID, m.USERNAME, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, " +
                        "r.ALLOW_WEDNESDAY, r.ALLOW_THURSDAY, r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, " +
                        "r.START_TIME, r.END_TIME, r.LUNCH_START, r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, " +
                        "r.PUBLIC_DIARY, r.APPOINTMENT_GROUP " +
                        "FROM WS_APPOINTMENT_OPTIONS r   INNER JOIN WS_MEMBERS m on (m.ID = r.EMPLOYEE_ID) " +
                        "WHERE r.EMPLOYEE_ID = {0};", TherapistID);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            FbCommand cmdGroup = new FbCommand(String.Format("SELECT ID, DESCRIPTION FROM WS_APPOINTMENT_GROUPS WHERE ID = {0}", rdr.GetInt32(15)), db, tran);
                            FbDataReader rdrGroup = cmdGroup.ExecuteReader();
                            rdrGroup.Read();

                            Result = new Therapist(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2) == "T", rdr.GetString(3) == "T",
                                rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T", rdr.GetString(7) == "T",
                                rdr.GetString(8) == "T", rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetDouble(11), rdr.GetInt32(12),
                                rdr.GetString(13) == "T", rdr.GetString(14) == "T", new AppointmentGroup(rdrGroup.GetInt32(0), rdrGroup.GetString(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Therapists TherapistsGet(bool PublicOnly)
        {
            Therapists Result = new Therapists();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.EMPLOYEE_ID, m.USERNAME, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, r.ALLOW_WEDNESDAY, r.ALLOW_THURSDAY, " +
                        "r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, r.START_TIME, r.END_TIME, r.LUNCH_START, r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, r.PUBLIC_DIARY, r.APPOINTMENT_GROUP " +
                        "FROM WS_APPOINTMENT_OPTIONS r   INNER JOIN WS_MEMBERS m on (m.ID = r.EMPLOYEE_ID) ";

                    if (PublicOnly)
                        SQL += " WHERE r.PUBLIC_DIARY = 'T' ";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        FbCommand cmdGroup = new FbCommand(String.Format("SELECT ID, DESCRIPTION FROM WS_APPOINTMENT_GROUPS WHERE ID = {0}", rdr.GetInt32(15)), db, tran);
                        FbDataReader rdrGroup = cmdGroup.ExecuteReader();
                        rdrGroup.Read();

                        Therapist t = new Therapist(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2) == "T", rdr.GetString(3) == "T",
                            rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T", rdr.GetString(7) == "T",
                            rdr.GetString(8) == "T", rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetDouble(11), rdr.GetInt32(12),
                            rdr.GetString(13) == "T", rdr.GetString(14) == "T", new AppointmentGroup(rdrGroup.GetInt32(0), rdrGroup.GetString(1)));
                        Result.Add(t);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }



            return (Result);
        }

        internal static Therapist TherapistGet(Int64 TherapistID)
        {
            Therapist Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.EMPLOYEE_ID, m.USERNAME, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, r.ALLOW_WEDNESDAY, r.ALLOW_THURSDAY, " +
                        "r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, r.START_TIME, r.END_TIME, r.LUNCH_START, r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, r.PUBLIC_DIARY, r.APPOINTMENT_GROUP " +
                        "FROM WS_APPOINTMENT_OPTIONS r   INNER JOIN WS_MEMBERS m on (m.ID = r.EMPLOYEE_ID) WHERE r.EMPLOYEE_ID = {0};", TherapistID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        FbCommand cmdGroup = new FbCommand(String.Format("SELECT ID, DESCRIPTION FROM WS_APPOINTMENT_GROUPS WHERE ID = {0}", rdr.GetInt32(15)), db, tran);
                        FbDataReader rdrGroup = cmdGroup.ExecuteReader();
                        rdrGroup.Read();

                        Result = new Therapist(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2) == "T", rdr.GetString(3) == "T",
                            rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T", rdr.GetString(7) == "T",
                            rdr.GetString(8) == "T", rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetDouble(11), rdr.GetInt32(12),
                            rdr.GetString(13) == "T", rdr.GetString(14) == "T", new AppointmentGroup(rdrGroup.GetInt32(0), rdrGroup.GetString(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void TherapistSave(Therapist therapist)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    //diary settings
                    string SQL = "WSP_APPOINTMENT_OPTIONS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipEMPLOYEEID", FbDbType.BigInt, therapist.EmployeeID);
                    AddParam(cmd, "@ipALLOW_MONDAY", FbDbType.VarChar, 1, therapist.AllowMonday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_TUESDAY", FbDbType.VarChar, 1, therapist.AllowTuesday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_WEDNESDAY", FbDbType.VarChar, 1, therapist.AllowWednesday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_THURSDAY", FbDbType.VarChar, 1, therapist.AllowThursday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_FRIDAY", FbDbType.VarChar, 1, therapist.AllowFriday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_SATURDAY", FbDbType.VarChar, 1, therapist.AllowSaturday ? "T" : "F");
                    AddParam(cmd, "@ipALLOW_SUNDAY", FbDbType.VarChar, 1, therapist.AllowSunday ? "T" : "F");
                    AddParam(cmd, "@ipSTART_TIME", FbDbType.Double, therapist.StartTime);
                    AddParam(cmd, "@ipEND_TIME", FbDbType.Double, therapist.EndTime);
                    AddParam(cmd, "@ipLUNCH_START", FbDbType.Double, therapist.LunchStart);
                    AddParam(cmd, "@ipLUNCH_DURATION", FbDbType.Integer, therapist.LunchDuration);
                    AddParam(cmd, "@ipALLOW_BOOK_CURRENT_DAY", FbDbType.VarChar, 1, therapist.AllowBookCurrentDay ? "T" : "F");
                    AddParam(cmd, "@ipPUBLIC_DIARY", FbDbType.VarChar, therapist.PublicDiary ? "T" : "F");
                    AddParam(cmd, "@ipGROUP", FbDbType.Integer, therapist.Group.ID);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    string currentIndexes = String.Empty;
                    bool first = true;

                    foreach (AppointmentTreatment treat in therapist.Treatments)
                    {
                        if (first)
                        {
                            currentIndexes += treat.ID.ToString();
                            first = false;
                        }
                        else
                        {
                            currentIndexes += String.Format(",{0}", treat.ID.ToString());
                        }
                    }


                    if (!String.IsNullOrEmpty(currentIndexes))
                    {
                        SQL = String.Format("DELETE FROM WS_TREATMENT_TO_THERAPIST a WHERE a.THERAPIST_ID = @THERAPIST AND a.TREATMENT_ID NOT IN ({0});", currentIndexes);
                        cmd = new FbCommand(SQL, db, tran);
                        AddParam(cmd, "@THERAPIST", FbDbType.BigInt, therapist.EmployeeID);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }

                    foreach (AppointmentTreatment treat in therapist.Treatments)
                    {
                        try
                        {
                            SQL = String.Format("UPDATE OR INSERT INTO WS_TREATMENT_TO_THERAPIST (THERAPIST_ID, TREATMENT_ID) " +
                                "VALUES ({0}, {1}) MATCHING (THERAPIST_ID, TREATMENT_ID);", therapist.EmployeeID, treat.ID);
                            cmd = new FbCommand(SQL, db, tran);
                            try
                            {
                                cmd.ExecuteNonQuery();
                            }
                            finally
                            {
                                CloseAndDispose(ref cmd);
                            }
                        }
                        catch (Exception err)
                        {
                            if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint"))
                                throw;
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void TherapistDelete(Therapist therapist)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_APPOINTMENT_OPTIONS a WHERE a.EMPLOYEE_ID = {0};", therapist.EmployeeID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Therapist TherapistCreate(User StaffMember)
        {
            Therapist Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_APPOINTMENT_OPTIONS (EMPLOYEE_ID, APPOINTMENT_GROUP) VALUES ({0}, 0);", StaffMember.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            Result = TherapistGet(StaffMember.ID);
            return (Result);
        }

        internal static WorkingDays TherapistsWorkingDaysGet(Therapist therapist)
        {
            WorkingDays Result = new WorkingDays();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.EMPLOYEE_ID, a.START_DATE, a.START_HOUR, a.FINISH_HOUR, a.REPEAT_OPTION, a.REPEAT_NUMBER, a.ID, a.ALLOW_TREATMENTS " +
                        "FROM WS_APPOINTMENT_OPTIONS_EX a WHERE a.EMPLOYEE_ID = {0} ORDER BY a.REPEAT_OPTION DESC, a.START_DATE DESC;", therapist.EmployeeID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new WorkingDay(rdr.GetInt32(6), therapist, rdr.GetDateTime(1), rdr.GetDouble(2), rdr.GetDouble(3),
                            (Enums.AppointmentRepeatType)rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetString(7) == "Y" ? true : false));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void TherapistsWorkingDaysDelete(WorkingDay Day)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_APPOINTMENT_OPTIONS_EX a WHERE a.ID = {0}", Day.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void TherapistsWorkingDaysSave(WorkingDay Day)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_WORKINGHOURS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, Day.ID);
                    AddParam(cmd, "@IPEMPLOYEE_ID", FbDbType.Integer, Day.User.EmployeeID);
                    AddParam(cmd, "@IPSTART_DATE", FbDbType.Date, Day.Date);
                    AddParam(cmd, "@IPSTART_HOUR", FbDbType.Double, Day.StartTime);
                    AddParam(cmd, "@IPFINISH_HOUR", FbDbType.Double, Day.FinishTime);
                    AddParam(cmd, "@IPREPEAT_OPTION", FbDbType.Integer, (int)Day.RepeatOption);
                    AddParam(cmd, "@IPREPEAT_NUMBER", FbDbType.Integer, Day.RepeatDuration);
                    AddParam(cmd, "@ipALLOW_TREATMENTS", FbDbType.Char, 1, Day.AllowTreatments ? "Y" : "N");

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static WorkingDay TherapistWorkingDaysCreate(Therapist therapist)
        {
            WorkingDay Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_WORKINGHOURS_CREATE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPEMPLOYEE_ID", FbDbType.Integer, therapist.EmployeeID);
                    AddParam(cmd, "@IPSTART_DATE", FbDbType.Date, DateTime.Now);
                    AddParam(cmd, "@IPSTART_HOUR", FbDbType.Double, 10.0);
                    AddParam(cmd, "@IPFINISH_HOUR", FbDbType.Double, 12.0);
                    AddParam(cmd, "@IPREPEAT_OPTION", FbDbType.Integer, (int)Enums.AppointmentRepeatType.NoRepeat);
                    AddParam(cmd, "@IPREPEAT_NUMBER", FbDbType.Integer, 0);
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int NewID = (int)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();

                    Result = new WorkingDay(NewID, therapist, DateTime.Now, 10.0, 12.0, Enums.AppointmentRepeatType.NoRepeat, 0, true);
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int TherapistsAppointments(Therapist therapist, DateTime From, DateTime To, Enums.AppointmentStatus Status)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(a.ID) " +
                        "FROM WS_APPOINTMENTS a Where a.EMPLOYEE_ID = {0} AND a.APPOINTMENT_TYPE = 0 AND a.STATUS = {1} AND (a.APPOINTMENT_DATE >= @DATEFROM and a.APPOINTMENT_DATE <= @DATETO)", therapist.EmployeeID, (int)Status);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, From);
                    AddParam(cmd, "@DATETO", FbDbType.Date, To);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.GetInt32(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static decimal TherapistRefunds(Therapist therapist, DateTime From, DateTime To)
        {
            decimal Result = 0.00m;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT sum(a.REFUND_AMOUNT) FROM WS_REFUNDS a " +
                        "WHERE CAST(a.DATE_REFUNDED as DATE) >= @DATEFROM AND CAST(a.DATE_REFUNDED AS DATE) <= @DATETO " +
                        "AND EMPLOYEE_ID = {0}", therapist.EmployeeID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, From);
                    AddParam(cmd, "@DATETO", FbDbType.Date, To);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.IsDBNull(0) ? 0.00m : rdr.GetDecimal(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static TherapistTakings TherapistTakings(Therapist therapist, DateTime from, DateTime to)
        {
            TherapistTakings Result = new BOL.Therapists.TherapistTakings(therapist, from, to, 0.00m,
                0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("select sum(opinvoicetotal), sum(optotalvouchers), sum(optotaldiscount), sum(opcash), " +
                        "sum (opcard), sum(opcheque), sum(opproducts), sum(optreatments), count(DISTINCT(opInvoice)) " +
                        "from WSP_THERAPIST_TAKINGS({1}, @DATEFROM, @DATETO) WHERE OPTHERAPISTID = {0} ", therapist.EmployeeID, therapist.Group.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result.InvoiceTotal = rdr.IsDBNull(0) ? 0.00m : rdr.GetDecimal(0);
                        Result.VoucherTotal = rdr.IsDBNull(1) ? 0.00m : rdr.GetDecimal(1);
                        Result.DiscountTotal = rdr.IsDBNull(2) ? 0.00m : rdr.GetDecimal(2);
                        Result.Cash = rdr.IsDBNull(3) ? 0.00m : rdr.GetDecimal(3);
                        Result.Card = rdr.IsDBNull(4) ? 0.00m : rdr.GetDecimal(4);
                        Result.Cheque = rdr.IsDBNull(5) ? 0.00m : rdr.GetDecimal(5);
                        Result.Products = rdr.IsDBNull(6) ? 0.00m : rdr.GetDecimal(6);
                        Result.Treatments = rdr.IsDBNull(7) ? 0.00m : rdr.GetDecimal(7);
                        Result.InvoiceCount = rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Takings TherapistSales(Therapist therapist, DateTime from, DateTime to)
        {
            Takings Result = new BOL.Therapists.Takings();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("select opinvoicetotal, optotalvouchers, optotaldiscount, opcash, " +
                        "opcard, opcheque, opproducts, optreatments, opInvoice, OPITEMPRICE, OPITEMCOUNT, OPITEM " +
                        "from WSP_THERAPIST_TAKINGS(2, @DATEFROM, @DATETO) WHERE OPTHERAPISTID = {0}", therapist.EmployeeID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TherapistTakings(therapist, from, to, rdr.IsDBNull(0) ? 0.00m : rdr.GetDecimal(0),
                            rdr.IsDBNull(1) ? 0.00m : rdr.GetDecimal(1),
                            rdr.IsDBNull(2) ? 0.00m : rdr.GetDecimal(2),
                            rdr.IsDBNull(3) ? 0.00m : rdr.GetDecimal(3),
                            rdr.IsDBNull(4) ? 0.00m : rdr.GetDecimal(4),
                            rdr.IsDBNull(5) ? 0.00m : rdr.GetDecimal(5),
                            rdr.IsDBNull(6) ? 0.00m : rdr.GetDecimal(6),
                            rdr.IsDBNull(7) ? 0.00m : rdr.GetDecimal(7),
                            rdr.IsDBNull(8) ? 0 : rdr.GetInt64(8),
                            rdr.IsDBNull(9) ? 0.00m : rdr.GetDecimal(9),
                            rdr.IsDBNull(10) ? 1 : rdr.GetInt32(10),
                            rdr.IsDBNull(11) ? "" : rdr.GetString(11)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static decimal TherapistSales(Therapist therapist, DateTime from, DateTime to, PaymentStatus paymentStatus, bool totals = true)
        {
            decimal Result = 0.00m;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT SUM(ii.COST) FROM WS_INVOICE_ORDERS io INNER JOIN WS_INVOICE_ITEMS ii ON (ii.INVOICEID = io.ORDER_ID) " +
                        "WHERE io.PROCESS_STATUS IN (2,3)  AND ii.STAFFMEMBER = {0} AND io.STATUS = {1} AND " +
                        "(CAST(io.PURCHASEDATE AS DATE) >= @DATEFROM and CAST(io.PURCHASEDATE AS DATE) <= @DATETO)", therapist.EmployeeID, paymentStatus.ID
                        );
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.IsDBNull(0) ? 0.00m : rdr.GetDecimal(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static decimal TherapistSales(Therapist therapist, DateTime From, DateTime To, ProductCostItemType Type)
        {
            decimal Result = 0.00m;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT SUM(ii.COST) FROM WS_INVOICE_ORDERS io INNER JOIN WS_INVOICE_ITEMS ii ON (ii.INVOICEID = io.ORDER_ID) " +
                        "WHERE io.PROCESS_STATUS IN (2,3) AND ii.STAFFMEMBER = {0} AND ii.ITEM_TYPE = {1} AND (CAST(io.PURCHASEDATE AS DATE) >= @DATEFROM and CAST(io.PURCHASEDATE AS DATE) <= @DATETO)", therapist.EmployeeID, (int)Type);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, From);
                    AddParam(cmd, "@DATETO", FbDbType.Date, To);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.IsDBNull(0) ? 0.00m : rdr.GetDecimal(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        /// <summary>
        /// Returns the total product sales by therapist for a date period
        /// </summary>
        /// <param name="therapist">Therapist who's takings are sought</param>
        /// <param name="from">Start date to analyse</param>
        /// <param name="to">End date to analyse</param>
        /// <returns>TherapistTakings object</returns>
        internal static Takings TherapistTakingsProducts(Therapist therapist, DateTime from, DateTime to)
        {
            Takings Result = new BOL.Therapists.Takings();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPTHERAPIST, p.OPITEM, SUM(p.OPITEMCOUNT), p.OPITEMPRICE, sum(p.OPITEMPRICE * p.OPITEMCOUNT) " +
                        "FROM WSP_THERAPIST_TAKINGS({1}, @DATEFROM, @DATETO) p WHERE p.opITEM_TYPE = 1 " +
                        "AND p.OPTHERAPISTID = {0} GROUP BY 1, 2, 4 ORDER BY 1, 3 DESC, 2",
                        therapist.EmployeeID, therapist.Group.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DATEFROM", FbDbType.Date, from);
                    AddParam(cmd, "@DATETO", FbDbType.Date, to);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new TherapistTakings(rdr.GetString(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetDecimal(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Therapists

        #region Tips and Tricks

        internal static int TipsTricksCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_TIPS WHERE SHOW_ON_WEB = 0;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TipsTrick TipsTrickGet(int TipID)
        {
            TipsTrick Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, OPNAME, opSHOW_ON_WEB, opPOPUPID, OPDESCRIPTION FROM WSP_WS_TIPS_PAGE ({1}, {0}) WHERE opID = {2};", 1, 1000, TipID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new TipsTrick(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2) == 0, rdr.GetInt32(3), rdr.GetString(4));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TipsTricks TipsTricksGet(int PageNumber, int PageSize)
        {
            TipsTricks Result = new TipsTricks();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, OPNAME, opSHOW_ON_WEB, opPOPUPID, OPDESCRIPTION FROM WSP_WS_TIPS_PAGE ({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new TipsTrick(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2) == 0, rdr.GetInt32(3), rdr.GetString(4)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Treatments TreatmentsGet(int PageNumber, int PageSize, TreatmentGroup group)
        {
            Treatments Result = new Treatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT OPID, OPNAME, OPPRICE, OPTREATMENT_LENGTH, OPDESCRIPTION, OPIMAGE, OPURL, OPSORTORDER, OPDURATION, OPSPADAY FROM WSP_WS_TREATMENTS_PAGE_GROUP ({1}, {0}, {2}) WHERE OPSPADAY = 'N';", PageNumber, PageSize, group.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Treatment(rdr.GetInt32(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8), rdr.GetString(9) == "Y"));
                        }

                        tran.Rollback();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Tips and Tricks

        #region Treatments

        internal static Treatments TreatmentSpaDays(int PageNumber, int PageSize)
        {
            Treatments Result = new Treatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT OPID, OPNAME, OPPRICE, OPTREATMENT_LENGTH, OPDESCRIPTION, OPIMAGE, OPURL, OPSORTORDER, OPDURATION, opSPADAY FROM WSP_WS_TREATMENTS_SPADAYS ({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Treatment(rdr.GetInt32(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8), rdr.GetString(9) == "Y"));
                        }

                        tran.Rollback();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static Treatment TreatmentGet(int ID, bool SpaDay)
        {
            Treatment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.NAME, a.PRICE, a.TREATMENT_LENGTH, a.DESCRIPTION, a.IMAGE, a.URL, a.SORT_ORDER, a.DURATION, a.SPA_DAY " +
                        "FROM WS_TREATMENTS a WHERE a.ID = {0} AND SPA_DAY = '{1}';", ID, SpaDay ? "Y" : "N");
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Treatment(rdr.GetInt32(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8), rdr.GetString(9) == "Y");
                        }

                        tran.Rollback();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static Treatments TreatmentsGet(int PageNumber, int PageSize)
        {
            Treatments Result = new Treatments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT OPID, OPNAME, OPPRICE, OPTREATMENT_LENGTH, OPDESCRIPTION, OPIMAGE, OPURL, OPSORTORDER, OPDURATION, opSPADAY FROM WSP_WS_TREATMENTS_PAGE ({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Treatment(rdr.GetInt32(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8), rdr.GetString(9) == "Y"));
                        }

                        tran.Rollback();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static int TreatmentsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_TREATMENTS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.GetInt32(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static TreatmentGroups TreatmentGroupsGet()
        {
            TreatmentGroups Result = new TreatmentGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, DESCRIPTION, SORT_ORDER, TAGLINE FROM WS_TREATMENT_GROUPS ORDER BY SORT_ORDER;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new TreatmentGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TreatmentGroup TreatmentGroupGet(int TreatmentGroupID)
        {
            TreatmentGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, DESCRIPTION, SORT_ORDER, TAGLINE FROM WS_TREATMENT_GROUPS WHERE ID = {0} ORDER BY SORT_ORDER;", TreatmentGroupID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new TreatmentGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Treatments

        #region Products

        #region Product Group Types

        internal static ProductGroupType ProductGroupTypeGet(int id)
        {
            ProductGroupType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION FROM WS_PRODUCT_GROUP_TYPE a WHERE a.ID = {0}", id);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductGroupType(rdr.GetInt32(0), rdr.GetString(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, id);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroupType ProductGroupTypeGet(string name)
        {
            ProductGroupType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_PRODUCT_GROUP_TYPE a WHERE UPPER(a.DESCRIPTION) = @NAME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 100, name.ToUpper());
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductGroupType(rdr.GetInt32(0), rdr.GetString(1));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, name);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductGroupTypesGetProducts(ProductGroupType groupType)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pg.ID, pg.NAME, pg.DESCRIPTION, pg.SHOW_ON_WEB, pg.IMAGE, pg.SORT_ORDER, pg.SPECIAL_OFFER, " +
                        "pg.PRODUCT_GROUP, pg.POPUP_ID, pg.SKU, pg.REGAL, pg.OUT_OF_STOCK, pg.BEST_SELLER, pg.NEW_PRODUCT, pg.FEATURED_PRODUCT, pg.CAROUSEL, " +
                        "pg.FEATURES, pg.INGREDIENTS, pg.PRE_ORDER, pg.VIDEO_LiNK, pg.HOW_TO_USE, pg.PRIMARY_GROUP_TYPE, pg.FREE_SHIPPING, pg.PAGE_LINK, " +
                        "pg.FREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE FROM WS_PRODUCTS pg JOIN WS_PRODUCT_TYPE pt ON (pt.ID = pg.PRIMARY_GROUP_TYPE) " +
                        "WHERE pg.PRODUCT_GROUP = {0};", groupType.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y", rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23),
                                rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, groupType);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroupTypes ProductGroupTypesGet()
        {
            ProductGroupTypes Result = new ProductGroupTypes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION FROM WS_PRODUCT_GROUP_TYPE a ORDER BY a.ID;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductGroupType(rdr.GetInt32(0), rdr.GetString(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductGroupTypeDelete(ProductGroupType productGroupType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_PRODUCT_GROUP_TYPE WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productGroupType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ProductGroupType ProductGroupTypeInsert(string description)
        {
            ProductGroupType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_WS_PRODUCT_GROUP_TYPE_INSERT";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, description);
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    Result = new ProductGroupType(newID, description);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductGroupTypeSave(ProductGroupType productCostType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_PRODUCT_GROUP_TYPE SET DESCRIPTION = @DESCRIPTION " +
                    "WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, productCostType.Description);
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productCostType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Product Group Types

        #region Product Cost Types

        internal static ProductCostType ProductCostTypeGet(int id)
        {
            ProductCostType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION, a.ITEM_TYPE FROM WS_PRODUCT_COST_TYPE a WHERE a.ID = {0}", id);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCostType(rdr.GetInt32(0), rdr.GetString(1),
                                (ProductCostItemType)rdr.GetInt32(2));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, id);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCostType ProductCostTypeGet(string name)
        {
            ProductCostType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, a.ITEM_TYPE FROM WS_PRODUCT_COST_TYPE a WHERE UPPER(a.DESCRIPTION) = @NAME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 100, name.ToUpper());
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCostType(rdr.GetInt32(0), rdr.GetString(1), (ProductCostItemType)rdr.GetInt32(2));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, name);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCostTypes ProductCostTypesGet()
        {
            ProductCostTypes Result = new ProductCostTypes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, a.ITEM_TYPE FROM WS_PRODUCT_COST_TYPE a ORDER BY a.DESCRIPTION;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCostType(rdr.GetInt32(0), rdr.GetString(1),
                                (ProductCostItemType)rdr.GetInt32(2)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductCostTypeDelete(ProductCostType productType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_PRODUCT_COST_TYPE WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ProductCostType ProductCostTypeInsert(string description, ProductCostItemType itemType)
        {
            ProductCostType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_WS_PRODUCT_COST_TYPE_INSERT";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, description);
                    AddParam(cmd, "@ipITEM_TYPE", FbDbType.Integer, (int)itemType);
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    Result = new ProductCostType(newID, description, itemType);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductCostTypeSave(ProductCostType productCostType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_PRODUCT_COST_TYPE SET DESCRIPTION = @DESCRIPTION " +
                    "WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, productCostType.Description);
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productCostType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Product Cost Types

        /// <summary>
        /// Returns a collection of discounted products
        /// </summary>
        /// <returns>Collection of products which have been discounted</returns>
        internal static ProductCosts DiscountedProducts()
        {
            // special case for Product, the product is generic as discounted product items can come from 
            // multiple products
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, p.NAME, a.PRODUCT_ID, a.SKU, a.PRODUCT_SIZE, a.PRODUCT_COST, " +
                        "a.PRODUCT_COST2, a.PRODUCT_COST3, a.DISCOUNT_VALUE, a.MEMBER_LEVEL, p.IMAGE, a.VAT_RATE, " +
                        "a.SAVING, a.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE a JOIN WS_PRODUCTS p ON (p.ID = a.PRODUCT_ID) " +
                        "WHERE a.PRODUCT_TYPE = 15 AND a.MEMBER_LEVEL <= @MEMBER_LEVEL " +
                        "AND a.OUT_OF_STOCK = 'F' AND a.IS_GIFTWRAP = 'F' " +
                        "AND a.ITEM_TYPE = 'N' AND a.IS_DELETED = 'N' AND a.DISCOUNT_VALUE > 0.0 " +
                        "ORDER BY p.NAME, a.PRODUCT_SIZE";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MEMBER_LEVEL", FbDbType.BigInt, 0);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt64(0), null, rdr.GetString(3), rdr.GetString(4),
                                rdr.GetDecimal(5), rdr.GetInt32(9), false, null, rdr.GetString(10), false, false,
                                rdr.GetDecimal(6), rdr.GetDecimal(7), rdr.GetDecimal(8), rdr.GetString(1), 
                                (ProductCostItemType)rdr.GetInt32(13), 0, 0,
                                rdr.IsDBNull(11) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(11),
                                rdr.IsDBNull(12) ? 0.0 : rdr.GetDouble(12)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a collection of product types
        /// </summary>
        /// <returns>ProductTypes collection</returns>
        internal static ProductTypes ProductTypesGet()
        {
            ProductTypes Result = new ProductTypes();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, PRIMARY_TYPE FROM WS_PRODUCT_TYPE a";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductType(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductType ProductTypeGet(string name)
        {
            ProductType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.DESCRIPTION, a.PRIMARY_TYPE FROM WS_PRODUCT_TYPE a WHERE UPPER(a.DESCRIPTION) = @DESCRIPTION";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, name.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductType(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductTypeDelete(ProductType productType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_PRODUCT_TYPE WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ProductType ProductTypeInsert(string description, bool primary)
        {
            ProductType Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_WS_PRODUCT_TYPE_INSERT";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, description);
                    AddParam(cmd, "@PRIMARY", FbDbType.Char, primary ? "Y" : "N");
                    AddParam(cmd, "@opID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    int newID = (int)cmd.Parameters["@opID"].Value;

                    Result = new ProductType(newID, description, primary);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void ProductTypeSave(ProductType productType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE WS_PRODUCT_TYPE SET DESCRIPTION = @DESCRIPTION, " +
                    "PRIMARY_TYPE = @PRIMARY WHERE ID = @TYPE_ID";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 80, productType.Description);
                    AddParam(cmd, "@PRIMARY", FbDbType.Char, productType.PrimaryType ? "Y" : "N");
                    AddParam(cmd, "@TYPE_ID", FbDbType.Integer, productType.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static bool ProductIsValidSKU(string SKU)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(r.ID) FROM WS_PRODUCTS r WHERE r.SKU = @PRODUCT_SKU AND IS_DELETED = 'N'";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@PRODUCT_SKU", FbDbType.VarChar, 15, SKU);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.GetInt32(0) > 0;

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, SKU);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int ProductsCount(ProductType primaryProductType)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT count(*) FROM WS_PRODUCTS WHERE (SHOW_ON_WEB = 0) AND " +
                        "(PRIMARY_GROUP_TYPE = {0}) AND ID IN (SELECT PRODUCT_ID FROM WS_PRODUCTS_COST_SIZE " +
                        "WHERE MEMBER_LEVEL = 0 AND IS_DELETED = 'N');", primaryProductType.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int ProductsCountOffers()
        {
            int Result = 1;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_PRODUCTS WHERE (SHOW_ON_WEB = 0) AND (SPECIAL_OFFER > 0) AND IS_DELETED = 'N';";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int ProductsCountByProduct(int ProductGroup)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT count(*) FROM WS_PRODUCTS p LEFT join WS_PRODUCT_TO_PRODUCT_GROUP ppg ON (ppg.PRODUCT_ID = p.ID) WHERE (p.SHOW_ON_WEB = 0) AND p.IS_DELETED = 'N' " +
                        "AND (ppg.GROUP_ID = {0});", ProductGroup);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ProductGroup);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGetOffers(int PageNumber, int PageSize)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ppo.opID, ppo.opNAME, ppo.opDESCRIPTION, ppo.opSHOW_ON_WEB, ppo.opIMAGE, ppo.opSORT_ORDER, ppo.opSPECIAL_OFFER, " +
                        "ppo.opPRODUCT_GROUP, ppo.opPOPUPID, ppo.opSKU, ppo.opREGAL, ppo.opOUT_OF_STOCK, ppo.opBEST_SELLER, ppo.opNEW_PRODUCT, ppo.opFEATURED, ppo.opCAROUSEL, " +
                        "ppo.opFEATURES, ppo.opINGREDIENTS, ppo.opPRE_ORDER, ppo.opVIDEO_LiNK, ppo.opHOW_TO_USE, ppo.opPRIMARY_GROUP_TYPE, ppo.opFREE_SHIPPING, ppo.opPAGE_LINK, " +
                        "ppo.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE " +
                        "FROM WSP_WS_PRODUCTS_PAGE_OFFERS({1}, {0}, 1) ppo JOIN WS_PRODUCT_TYPE pt ON (pt.ID = ppo.opPRIMARY_GROUP_TYPE)  ORDER BY ppo.opSORT_ORDER, ppo.opNAME;", PageNumber, PageSize);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(20), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(19),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageNumber, PageSize);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGetCarousel()
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pc.opID, pc.opNAME, pc.opDESCRIPTION, pc.opSHOW_ON_WEB, pc.opIMAGE, pc.opSORT_ORDER, pc.opSPECIAL_OFFER, " +
                        "pc.opPRODUCT_GROUP, pc.opPOPUPID, pc.opSKU, pc.opREGAL, pc.opOUT_OF_STOCK, pc.opBEST_SELLER, pc.opNEW_PRODUCT, pc.OPFEATURED, " +
                        "pc.OPCAROUSEL, pc.opFEATURES, pc.opINGREDIENTS, pc.opPRE_ORDER, pc.opVIDEO_LiNK, pc.opHOW_TO_USE, pc.opPRIMARY_GROUP_TYPE, " +
                        "pc.opFREE_SHIPPING, pc.opPAGE_LINK, pc.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_PRODUCT_CAROUSEL pc JOIN WS_PRODUCT_TYPE pt ON (pt.ID = pc.opPRIMARY_GROUP_TYPE) " +
                        "ORDER BY pc.opSORT_ORDER, opNAME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(20), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(19),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Gets the product associated with a product cost item
        /// </summary>
        /// <param name="productCost">Product Cost Item</param>
        /// <returns></returns>
        internal static Product ProductGet(ProductCost productCost)
        {
            Product Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, " +
                        "p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, p.FEATURED_PRODUCT, " +
                        "p.CAROUSEL, p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LiNK, p.HOW_TO_USE, p.PRIMARY_GROUP_TYPE, " +
                        "p.FREE_SHIPPING, p.PAGE_LINK, p.FREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE " +
                        "FROM WS_PRODUCTS p JOIN WS_PRODUCT_TYPE pt ON (pt.ID = p.PRIMARY_GROUP_TYPE) " +
                        "WHERE p.ID = {0};", productCost.ProductID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23),
                                rdr.GetString(24) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, productCost);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Product ProductGetFeatured()
        {
            Product Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pf.opID, pf.opNAME, pf.opDESCRIPTION, pf.opSHOW_ON_WEB, pf.opIMAGE, pf.opSORT_ORDER, pf.opSPECIAL_OFFER, " +
                        "pf.opPRODUCT_GROUP, pf.opPOPUPID, pf.opSKU, pf.opREGAL, pf.opOUT_OF_STOCK, pf.opBEST_SELLER, pf.opNEW_PRODUCT, pf.OPFEATURED, " +
                        "pf.opCAROUSEL, pf.opFEATURES, pf.opINGREDIENTS, pf.opPRE_ORDER, pf.opVIDEO_LiNK, pf.opHOW_TO_USE, pf.opPRIMARY_GROUP_TYPE, " +
                        "pf.opFREE_SHIPPING, pf.opPAGE_LINK, pf.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_PRODUCT_FEATURED pf JOIN WS_PRODUCT_TYPE pt ON (pt.ID = pf.opPRIMARY_GROUP_TYPE)  " +
                        "ORDER BY pf.opSORT_ORDER, pf.opNAME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Product(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9),
                                rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Product ProductGet(Int64 ProductID)
        {
            Product Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, " +
                        "p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, p.FEATURED_PRODUCT, " +
                        "p.CAROUSEL, p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LiNK, p.HOW_TO_USE, p.PRIMARY_GROUP_TYPE, " +
                        "p.FREE_SHIPPING, p.PAGE_LINK, p.FREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE " +
                        "FROM WS_PRODUCTS p JOIN WS_PRODUCT_TYPE pt ON (pt.ID = p.PRIMARY_GROUP_TYPE) " +
                        "WHERE p.ID = {0};", ProductID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23),
                                rdr.GetString(24) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ProductID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductGetBlackLabel(User user)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, " +
                        "p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT,  p.FEATURED_PRODUCT, p.CAROUSEL, p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LiNK, p.HOW_TO_USE, " +
                        "p.PRIMARY_GROUP_TYPE, p.FREE_SHIPPING, p.PAGE_LINK, p.FREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE " +
                        "FROM WS_PRODUCTS p JOIN WS_PRODUCT_TYPE pt ON (pt.ID = p.PRIMARY_GROUP_TYPE) " +
                        "INNER JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.PRODUCT_ID = p.ID) WHERE pcs.PRODUCT_TYPE = 1 AND pcs.PRODUCT_COST > 0.00 " +
                        "AND pcs.MEMBER_LEVEL <= 10 ORDER BY p.NAME", user == null ? 0 : (int)user.MemberLevel);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23),
                                rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGet(Celebrity celebrity)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pc.opID, pc.opNAME, pc.opDESCRIPTION, pc.opSHOW_ON_WEB, pc.opIMAGE, pc.opSORT_ORDER, pc.opSPECIAL_OFFER, " +
                        "pc.opPRODUCT_GROUP, pc.opPOPUPID, pc.opSKU, pc.opREGAL, pc.opOUT_OF_STOCK, pc.opBEST_SELLER, pc.opNEW_PRODUCT, pc.opFEATURED, pc.opCAROUSEL, " +
                        "pc.opFEATURES, pc.opINGREDIENTS, pc.opPRE_ORDER, pc.opVIDEO_LiNK, pc.opHOW_TO_USE, pc.opPRIMARY_GROUP_TYPE, pc.opFREE_SHIPPING, " +
                        "pc.opPAGE_LINK, pc.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_WS_PRODUCTS_CELEBRITY ({0}) pc JOIN WS_PRODUCT_TYPE pt ON (pt.ID = pc.opPRIMARY_GROUP_TYPE) " +
                        "ORDER BY pc.opSORT_ORDER, pc.opNAME;", celebrity.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, celebrity);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGet(ProductType primaryProductType, int PageNumber, int PageSize)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT fp.opID, fp.opNAME, fp.opDESCRIPTION, fp.opSHOW_ON_WEB, fp.opIMAGE, fp.opSORT_ORDER, fp.opSPECIAL_OFFER, " +
                        "fp.opPRODUCT_GROUP, fp.opPOPUPID, fp.opSKU, fp.opREGAL, fp.opOUT_OF_STOCK, fp.opBEST_SELLER, fp.opNEW_PRODUCT, fp.opFEATURED, fp.opCAROUSEL, " +
                        "fp.opFEATURES, fp.opINGREDIENTS, fp.opPRE_ORDER, fp.opVIDEO_LiNK, fp.opHOW_TO_USE, fp.opPRIMARY_GROUP_TYPE, fp.opFREE_SHIPPING, " +
                        "fp.opPAGE_LINK, fp.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE FROM " +
                        "WSP_WS_PRODUCTS_PAGE({2}, {1}, {0}, 0) fp JOIN WS_PRODUCT_TYPE pt ON (pt.ID = fp.opPRIMARY_GROUP_TYPE)  " +
                        "ORDER BY fp.opSORT_ORDER, fp.opNAME;", PageNumber, PageSize, primaryProductType.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(5) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageNumber, PageSize);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGet(ProductType primaryProductType, int PageNumber, int PageSize, bool IncludeCosts)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pp.opID, pp.opNAME, pp.opDESCRIPTION, pp.opSHOW_ON_WEB, pp.opIMAGE, pp.opSORT_ORDER, pp.opSPECIAL_OFFER, " +
                        "pp.opPRODUCT_GROUP, pp.opPOPUPID, pp.opSKU, pp.opREGAL, pp.opOUT_OF_STOCK, pp.opBEST_SELLER, pp.opNEW_PRODUCT,  pp.OPFEATURED, opCAROUSEL, " +
                        "pp.opFEATURES, pp.opINGREDIENTS, pp.opPRE_ORDER, pp.opVIDEO_LiNK, pp.opHOW_TO_USE, pp.opPRIMARY_GROUP_TYPE, pp.OPFREE_SHIPPING, " +
                        "pp.opPAGE_LINK, pp.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_WS_PRODUCTS_PAGE({1}, {0}, 0) pp JOIN WS_PRODUCT_TYPE pt ON (pt.ID = pp.PRIMARY_GROUP_TYPE) " +
                        "ORDER BY pp.opSORT_ORDER, pp.opNAME;", PageNumber, PageSize);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            ProductCosts costs = null;

                            Product prod = new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1,
                                rdr.GetString(6) == "T", rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y");

                            if (IncludeCosts)
                            {
                                costs = new ProductCosts();

                                string SQLa = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, " +
                                    "pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +//12
                                    "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, " +
                                    "pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING " + //20
                                    "pct.ITEM_TYPE " +
                                    "FROM WS_PRODUCTS_COST_SIZE pcs WHERE pcs.PRODUCT_ID = {0} " +
                                    "INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) ",
                                    rdr.GetInt32(0));
                                FbDataReader rdra = null;
                                FbCommand sqla = new FbCommand(SQLa, db, tran);
                                try
                                {
                                    rdra = sqla.ExecuteReader();

                                    while (rdra.Read())
                                    {
                                        costs.Add(new ProductCost(rdra.GetInt32(0), prod, rdra.GetString(2),
                                            rdra.GetString(3), rdra.GetDecimal(4), rdra.GetInt32(5), rdra.GetString(6) == "T",
                                            new ProductCostType(rdra.GetInt32(7), rdra.GetString(18), (ProductCostItemType)rdr.GetInt32(21)), 
                                            rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8),
                                            rdra.GetString(9) == "T", rdra.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                            rdra.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                            (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                            rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                            rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                                    }
                                }
                                finally
                                {
                                    CloseAndDispose(ref sqla, ref rdra);
                                }

                                prod.ProductCosts = costs;
                            }

                            Result.Add(prod);

                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, PageNumber, PageSize, IncludeCosts);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGet(ProductType primaryProductType,
            int PageNumber, int PageSize, ProductGroup ProductGroup)
        {
            Products Result = new Products();

            if (ProductGroup == null)
                return (Result);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ppg.opID, ppg.opNAME, ppg.opDESCRIPTION, ppg.opSHOW_ON_WEB, ppg.opIMAGE, ppg.opSORT_ORDER, ppg.opSPECIAL_OFFER, " +
                        "ppg.opPRODUCT_GROUP, ppg.opPOPUPID, ppg.opSKU, ppg.opREGAL, ppg.opOUT_OF_STOCK, ppg.opBEST_SELLER, ppg.opNEW_PRODUCT, ppg.OPFEATURED, ppg.opCAROUSEL, " +
                        "ppg.opFEATURES, ppg.opINGREDIENTS, ppg.opPRE_ORDER, ppg.opVIDEO_LiNK, ppg.opHOW_TO_USE, ppg.opPRIMARY_GROUP_TYPE, ppg.opFREE_SHIPPING, " +
                        "ppg.opPAGE_LINK, ppg.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  FROM " +
                        "WSP_WS_PRODUCTS_PAGE_BY_GROUP({3}, {1}, {0}, 0, {2}) ppg JOIN WS_PRODUCT_TYPE pt ON (pt.ID = ppg.opPRIMARY_GROUP_TYPE) " +
                        "ORDER BY ppg.opSORT_ORDER, ppg.opNAME;",
                        PageNumber, PageSize, ProductGroup.ID, primaryProductType.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(5) == 1, rdr.GetString(6) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, primaryProductType, PageNumber, PageSize, ProductGroup);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products ProductsGetBySKU(string SKU)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, " +
                        "p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, p.FEATURED_PRODUCT, p.CAROUSEL, " +
                        "p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LiNK, p.HOW_TO_USE, p.PRIMARY_GROUP_TYPE, p.FREE_SHIPPING, " +
                        "p.PAGE_LINK, FREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE " +
                        "FROM WS_PRODUCTS p JOIN WS_PRODUCT_TYPE pt ON (pt.ID = p.PRIMARY_GROUP_TYPE) WHERE p.SKU = @SKU;";


                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@SKU", FbDbType.VarChar, 10, SKU);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3) == 0, rdr.GetString(4),
                                rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)), rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y", rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23),
                                rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, SKU);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroup ProductGroupGet(int ID)
        {
            ProductGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, " +
                        "pg.URL, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION, " +
                        "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP pg JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                        "WHERE pg.ID = {0} ORDER BY pg.SORT_ORDER;", ID);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(7), rdr.GetString(10)), rdr.GetString(8), rdr.GetString(9),
                                rdr.GetString(11), rdr.GetString(12) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroups ProductGroupsGet(MemberLevel MemberLevel,bool visibleOnWebsite)
        {
            ProductGroups Result = new ProductGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, " +
                        "pg.URL, pg.PRIMARY_GROUP_TYPE, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION,  " +
                        "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP pg JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                        "WHERE {1} pg.MEMBER_LEVEL <= {0} ORDER BY pg.SORT_ORDER;",
                        (int)MemberLevel, visibleOnWebsite ? "pg.SHOW_ON_WEBSITE = 'Y' AND" : String.Empty);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(8), rdr.GetString(11)), rdr.GetString(9), rdr.GetString(10),
                                rdr.GetString(12), rdr.GetString(13) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, MemberLevel);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroups ProductGroupsGet(ProductGroupType groupType, MemberLevel MemberLevel)
        {
            ProductGroups Result = new ProductGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, " +
                        "pg.URL, pg.PRIMARY_GROUP_TYPE, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION,  " +
                        "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP pg  JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                        "WHERE pg.SHOW_ON_WEBSITE = 'Y' AND pg.MEMBER_LEVEL <= {0} AND pg.GROUP_TYPE = {1} ORDER BY pg.SORT_ORDER;",
                        (int)MemberLevel, groupType.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(8), rdr.GetString(11)), rdr.GetString(9), rdr.GetString(10),
                                rdr.GetString(12), rdr.GetString(13) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, MemberLevel);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGet(Product product, MemberLevel memberLevel)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " + // 6
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " + // 12
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " + //21
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.PRODUCT_ID = {0} AND pcs.MEMBER_LEVEL <= {1} AND pcs.IS_DELETED = 'N';", product.ID, (int)memberLevel);
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), product, rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)), 
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8),
                                rdr.GetString(9) == "T", rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product, memberLevel);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGet(Product product, User user, Country country)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcc.OPID, pcc.OPPRODUCT_ID, pcc.OPSKU, pcc.OPPRODUCT_SIZE, " +
                        "pcc.OPPRODUCT_COST, pcc.OPMEMBER_LEVEL, pcc.OPOUT_OF_STOCK, pcc.OPPRODUCT_TYPE, pcc.OPBARCODE, " +//8
                        "pcc.opHIDE_GLOBALLY, pcc.opIS_GIFTWRAP, pcc.opPRODUCT_COST2, pcc.opPRODUCT_COST3, " +
                        "pcc.opDISCOUNT_VALUE, pcc.opADDITIONAL_TEXT, pcc.opITEM_TYPE, pcc.opLICENCE_TYPE, pcc.opLICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcc.opVAT_RATE, pcc.opSAVING, pct.ITEM_TYPE " + // 21
                        "FROM WSP_PRODUCT_COST_COUNTRY({0}, {1}) pcc INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcc.OPPRODUCT_TYPE)", 
                        country.ID, product.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), product, rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product, user, country);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGet(Product product, User user)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +//12
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " + //21
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.PRODUCT_ID = {0} AND pcs.MEMBER_LEVEL <= {1} AND pcs.IS_DELETED = 'N' " +
                        "ORDER BY pcs.PRODUCT_SIZE, pcs.PRODUCT_COST ",
                        product.ID, user == null ? 0 : (int)user.MemberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        decimal vatRate = Convert.ToDecimal(DALHelper.DefaultVATRate);

                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), product, rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? vatRate : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product, user);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGetFreeOffers()
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, " +
                        "pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " + //12
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " + //21
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE)" +
                        "WHERE pcs.ID IN (SELECT a.product_cost_id FROM WS_PRODUCTS_FREE a ) AND pcs.IS_DELETED = 'N'";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGetFree(ProductCost productCost)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.ID IN (SELECT a.FREE_PRODUCT_COST_ID FROM WS_PRODUCTS_FREE a " +
                        "WHERE a.PRODUCT_COST_ID = {0}) AND pcs.IS_DELETED = 'N'", productCost.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, productCost);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCosts ProductCostsGet(Product product)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                    "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, " +
                    "pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                    "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                    "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                    "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                    "WHERE pcs.PRODUCT_ID = {0} AND pcs.MEMBER_LEVEL = 0 AND pcs.IS_DELETED = 'N' order by pcs.PRODUCT_SIZE;",
                    product.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new ProductCost(rdr.GetInt32(0), product, rdr.GetString(2),
                            rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                            rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                            rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                            rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                            (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                            rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                            rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product);
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a product cost item based on it's barcode
        /// </summary>
        /// <param name="barcode">barcode of item</param>
        /// <returns>ProductCost item if found, otherwise null</returns>
        internal static ProductCost ProductCostGetByBarcode(string barcode)
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, " +
                        "pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, " +
                        "pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.BARCODE = '{0}' AND pcs.IS_DELETED = 'N';", barcode);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, barcode);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCost ProductCostGetSKU(string sku)
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST 1 pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, " +
                        "pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, " +
                        "pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, pct.DESCRIPTION, " +
                        "pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.SKU = @SKU AND pcs.IS_DELETED = 'N';", sku);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@SKU", FbDbType.VarChar, 10, sku);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, sku);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCost ProductCostGet(Int64 ID)
        {
            ProductCost Result = null;

            if (ID == -1)
                return (Result);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.ID = {0} AND pcs.IS_DELETED = 'N';", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCost ProductCostGet(Int64 ID, MemberLevel memberLevel)
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, " +
                        "pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, pct.DESCRIPTION, " +
                        "pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.ID = {0} AND pcs.MEMBER_LEVEL <= {1} AND pcs.IS_DELETED = 'N';", ID, (int)memberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductCost ProductCostGet(Int64 ID, User user)
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, " +
                        "pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, pct.DESCRIPTION, " +
                        "pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.ID = {0} AND pcs.MEMBER_LEVEL <= {1} AND pcs.IS_DELETED = 'N';",
                        ID, user == null ? 0 : (int)user.MemberLevel);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID, user);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Products

        #region Templates

        //Template function
        internal static void template(int UserID)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@USERID", FbDbType.Integer, UserID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Templates

        #region Shopping Basket

        internal static int BasketGetTotalItems(Int64 BasketID)
        {
            int Result = 0;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(*) FROM WS_SHOPPINGBASKET WHERE BASKETID = {0}", BasketID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Int64 BasketGetNextID(int increment)
        {
            if (increment < 1)
                throw new ArgumentOutOfRangeException();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(String.Format("select gen_id(gen_shopping_basket_id, {0}) " +
                        "from RDB$DATABASE;", increment), db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                            return rdr.GetInt64(0);
                        else
                            return -1;
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Coupon BasketValidateCouponCode(string CouponCode)
        {
            Coupon Result = null;

            CouponCode = CouponCode.Trim();

            if (CouponCode == String.Empty)
                return (Result);

            string SQL = "SELECT r.DISCOUNT_COUPON, r.EXPIRES, r.ISACTIVE, " +
                "r.DISCOUNT, r.FREE_PRODUCT_CODE, r.MAIN_PRODUCT_CODE, r.VOUCHER_TYPE, r.VOUCHER_USAGE, r.ID, " +
                "r.FREE_POSTAGE, r.MAX_USAGE, r.MINIMUM_SPEND, r.MEMBER_ID, r.START_DATE_TIME, " +
                "r.RESTRICT_USAGE " +
                "FROM WS_COUPONS r WHERE UPPER(r.DISCOUNT_COUPON) = @COUPON " +
                "AND r.EXPIRES > CURRENT_TIMESTAMP AND (r.START_DATE_TIME IS NULL OR r.START_DATE_TIME <= CURRENT_TIMESTAMP)";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@COUPON", FbDbType.VarChar, 30, CouponCode.ToUpper());

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Coupon(rdr.GetInt32(8), rdr.GetString(0), rdr.GetDateTime(1),
                            rdr.GetInt32(2) == 0, rdr.GetInt32(3),
                            rdr.IsDBNull(4) ? null : ProductCosts.Get(rdr.GetInt32(4)),
                            rdr.IsDBNull(5) ? null : ProductCosts.Get(rdr.GetInt32(5)),
                            (Enums.InvoiceVoucherType)rdr.GetInt32(6), rdr.GetInt32(7),
                            rdr.GetString(9) == "Y", rdr.GetInt32(10), rdr.GetDecimal(11),
                            rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.IsDBNull(13) ? rdr.GetDateTime(1).AddDays(-80) : rdr.GetDateTime(13),
                            rdr.IsDBNull(14) ? false : rdr.GetString(14) == "Y");
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Order BasketSendEmailForPayment(ShoppingBasket basket, PaymentStatus PayMethod, string UserSession,
            string RemoteHost, Enums.InvoiceVoucherType VoucherType, Currency currency, int version)
        {
            Order Result = null;

            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = "WSF_CREATE_ORDER_SEND_EMAIL13";
                        FbDataReader rdr = null;
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        try
                        {
                            PrepareCommand(cmd);

                            decimal costMulitplier = currency.Multiplier;

                            if (currency.Multiplier == 1.0m)
                            {
                                if (basket.User.Country.Multiplier > 0.0 && basket.User.Country.Multiplier != 1.0)
                                {
                                    costMulitplier = (decimal)basket.User.Country.Multiplier;
                                }
                            }

                            AddParam(cmd, "@ipBASKETID", FbDbType.Integer, basket.ID);
                            AddParam(cmd, "@ipUSERID", FbDbType.Integer, basket.User.ID);
                            AddParam(cmd, "@ipPAYMETHOD", FbDbType.Integer, PayMethod.ID);
                            AddParam(cmd, "@ipTOTAL", FbDbType.Double, basket.TotalAmount);
                            AddParam(cmd, "@IPDISCOUNTAMMOUNT", FbDbType.Decimal, basket.DiscountAmount);
                            AddParam(cmd, "@IPDISCOUNT", FbDbType.Integer, basket.Discount);
                            AddParam(cmd, "@ipSHIPPING", FbDbType.Decimal, basket.ShippingCosts);
                            AddParam(cmd, "@ipVATAMMOUNT", FbDbType.Decimal, basket.VATAmount);
                            AddParam(cmd, "@ipSHIPPINGADDRESS", FbDbType.Integer, basket.ShippingAddress == null ?
                                basket.User.DeliveryAddresses.First().ID : basket.ShippingAddress.ID);
                            AddParam(cmd, "@IPCONVERSION_RATE", FbDbType.Decimal, currency.ConversionRate);
                            AddParam(cmd, "@IPVAT_RATE", FbDbType.Decimal, basket.VATRate);
                            AddParam(cmd, "@IPCULTURE", FbDbType.VarChar, 50, currency.Culture);
                            AddParam(cmd, "@IPCOUPONCODE", FbDbType.VarChar, 30, basket.DiscountCouponName);
                            AddParam(cmd, "@IPUSER_SESSION", FbDbType.VarChar, 200, UserSession);
                            AddParam(cmd, "@IPREMOTE_HOST", FbDbType.VarChar, 25, RemoteHost);
                            AddParam(cmd, "@IPSTOREID", FbDbType.Integer, DALHelper.StoreID);
                            AddParam(cmd, "@IPTILLID", FbDbType.Integer, DALHelper.TillID);
                            AddParam(cmd, "@IPCOST_MULTIPLIER", FbDbType.Double, costMulitplier);
                            AddParam(cmd, "@IPVOUCHERTYPE", FbDbType.Integer, (int)VoucherType);
                            AddParam(cmd, "@IPNOTES", FbDbType.VarChar, 1000,
                                basket.DeliveryInstructions == null ? "" : basket.DeliveryInstructions);
                            AddParam(cmd, "@ipWEBSITE_ID", FbDbType.Integer, DALHelper.WebsiteID);
                            AddParam(cmd, "@ipCurrencyChanged", FbDbType.Char, 1, "Y");
                            AddParam(cmd, "@ipOriginalCountry", FbDbType.Integer, basket.Country.ID);
                            AddParam(cmd, "@IPSHIPPINGREMOVETAX", FbDbType.Char, 1, basket.ShippingIsTaxable ? "Y" : "N");
                            AddParam(cmd, "@ipVERSION", FbDbType.Integer, Consts.INVOICE_VERSION_VAT_ADD_OPTIONS);
                            AddParam(cmd, "@ipSUBTOTAL", FbDbType.Decimal, basket.SubTotalMinusVAT);
                            AddParam(cmd, "@ipOPTIONS", FbDbType.BigInt, (Int64)basket.Options);

                            AddParam(cmd, "@opINVOICEID", FbDbType.Integer);

                            rdr = cmd.ExecuteReader();
                            int NewOrderID = 0;

                            if (rdr.Read())
                            {
                                NewOrderID = rdr.GetInt32(0);
                            }

                            tran.Commit();

                            Result = OrderGet(NewOrderID);
                        }
                        finally
                        {
                            CloseAndDispose(ref cmd, ref rdr);
                        }
                    }
                    catch
                    {
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                Library.ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, basket, PayMethod, UserSession,
                     RemoteHost, VoucherType);
                throw;
            }

            return (Result);
        }


        internal static BasketItem BasketAddToBasket(ShoppingBasket basket, Int64 itemID, decimal quantity,
            ProductCostItemType itemType, User user, int priceColumn, string description)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("EXECUTE PROCEDURE WSP_WS_SHOPPINGBASKET_INS({0}, {1}, {2}, {3}, {4}, {5}, @DESC);",
                    basket.ID, itemID, quantity, (int)itemType, user == null ? -1 : user.ID, priceColumn);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@DESC", FbDbType.VarChar, 130, description);
                    AddParam(cmd, "@opID", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    string SQLA = String.Format("SELECT p.OPID, p.OPITEMID, p.OPDESCRIPTION, p.OPQTY, " +
                        "p.OPPRICE, p.OPIMAGE, p.OPOUT_OF_STOCK, " +
                        "p.OPITEM_TYPE, p.opUSER_ID, p.OPPRODUCTTYPE, p.opPRICE_COLUMN, p.opDISCOUNT_VALUE, " +
                        "p.opUSER_DISCOUNT, p.OPPRODUCTTYPETEXT, p.opPRODUCTTYPEITEM " +
                        "FROM WSP_SHOPPINGBASKET ({0}) p WHERE p.opID = {1} ",
                        basket.ID, newID);

                    FbDataReader rdr = null;
                    FbCommand cmdA = new FbCommand(SQLA, db, tran);
                    try
                    {
                        rdr = cmdA.ExecuteReader();

                        if (rdr.Read())
                        {
                            return (new BasketItem(basket, rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetDecimal(3),
                                rdr.GetDecimal(4), rdr.GetString(5), rdr.GetString(6) == "T",
                                (ProductCostItemType)rdr.GetInt32(7), rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                new ProductCostType(rdr.GetInt32(9), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(14)),
                                rdr.GetInt32(10), rdr.GetDecimal(11), rdr.IsDBNull(12) ? 0.00m : rdr.GetDecimal(12)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmdA, ref rdr);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (null);
        }

        internal static void BasketDeleteFromBasket(BasketItem item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_SHOPPINGBASKET WHERE (ID = {0});", item.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                        tran.Commit();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void BasketEmpty(Int64 BasketID)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_SHOPPINGBASKET WHERE (BASKETID = {0});", BasketID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void BasketUpdateBasket(Int64 BasketID, BasketItem basketItem, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("UPDATE WS_SHOPPINGBASKET SET QTY = {2}, STAFFMEMBER = {3}, " +
                    "DESCRIPTION = @DESCRIPTION, USER_DISCOUNT = {4} WHERE ID = {0};",
                    basketItem.ID, basketItem.ItemID, basketItem.Quantity, user == null ? -1 : user.ID, basketItem.UserDiscount);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 130, basketItem.Description);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static BasketItems BasketItemsGet(ShoppingBasket basket)
        {
            BasketItems Result = new BasketItems(basket);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT p.OPID, p.OPITEMID, p.OPDESCRIPTION, p.OPQTY, " +
                        "p.OPPRICE, p.OPIMAGE, p.OPOUT_OF_STOCK, " +
                        "p.OPITEM_TYPE, p.opUSER_ID, p.OPPRODUCTTYPE, p.opPRICE_COLUMN, p.opDISCOUNT_VALUE, " +
                        "p.opUSER_DISCOUNT, p.OPPRODUCTTYPETEXT, p.opPRODUCTTYPEITEM " +
                        "FROM WSP_SHOPPINGBASKET ({0}) p  ",
                        basket.ID);

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new BasketItem(basket, rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetDecimal(3),
                                rdr.GetDecimal(4), rdr.GetString(5), rdr.GetString(6) == "T",
                                (ProductCostItemType)rdr.GetInt32(7), rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                new ProductCostType(rdr.GetInt32(9), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(14)),
                                rdr.GetInt32(10), rdr.GetDecimal(11), rdr.IsDBNull(12) ? 0.00m : rdr.GetDecimal(12)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        /// <summary>
        /// Saves a basket item
        /// </summary>
        /// <param name="basket"></param>
        /// <param name="item"></param>
        internal static void BasketItemSave(ShoppingBasket basket, BasketItem item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("UPDATE WS_SHOPPINGBASKET a SET a.PRICE_COLUMN = {0}, " +
                    "DESCRIPTION = @DESCRIPTION " +
                    "WHERE a.ID = {1};", item.PriceColumn, item.ID);

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 130, item.Description);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Returns a collection of saved baskets
        /// </summary>
        /// <returns></returns>
        internal static SavedBaskets BasketSavedGet()
        {
            SavedBaskets Result = new SavedBaskets();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.BASKET_ID, a.USER_ID, a.DESCRIPTION, a.COUPON_NAME " +
                        "FROM POS_SAVED_ORDERS a";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SavedBasket(rdr.GetInt64(0), rdr.GetInt64(1), rdr.GetString(2),
                            rdr.GetString(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                catch
                {
                    throw;
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Deletes a saved basket
        /// </summary>
        /// <param name="basket"></param>
        internal static bool BasketSavedDelete(SavedBasket basket)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_SHOPPINGBASKET a WHERE a.BASKETID = {0}",
                        basket.BasketID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    return (true);
                }
                catch
                {
                    throw;
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }



        #endregion Shopping Basket

        #region Shipping

        internal static Double GetShippingCosts(string countryCode)
        {
            Double Result = 3.95;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.SHIPPING_COST FROM VW_COUNTRIES r WHERE r.COUNTRYCODE = @COUNTRYCODE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@COUNTRYCODE", FbDbType.VarChar, 5, countryCode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetDouble(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Double GetShippingCosts(int UserID, int AddressID)
        {
            Double Result = 3.95;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT c.SHIPPING_COST " +
                        "FROM WS_MEMBERS_ADDRESSES r INNER JOIN VW_COUNTRIES c ON (c.ID = r.COUNTRY) " +
                        "WHERE r.MEMBER_ID = {0} AND r.ID = {1};", UserID, AddressID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetDouble(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Double GetShippingCostsDefault(string CountryCode)
        {
            Double Result = 0.0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.SHIPPING_COST FROM VW_COUNTRIES r WHERE r.COUNTRYCODE = @COUNTRYCODE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@COUNTRYCODE", FbDbType.VarChar, 5, CountryCode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetDouble(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Shipping

        #region IP Address

        internal static void IPCodeReset()
        {

        }

        /// <summary>
        /// Determines wether an IP Address should be banned
        /// </summary>
        /// <param name="path">Path on website</param>
        /// <param name="IPAddress">IP Address for User</param>
        /// <param name="ForceBan">Force the ban regardless of settings</param>
        /// <returns></returns>
        internal static bool AutoBanIPAddress(string path, string IPAddress, bool ForceBan = false)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(a.PAGE_NAME) FROM AUTO_BAN_IP_FROM_REQUEST a " +
                        "WHERE UPPER(a.PAGE_NAME) = @PAGE";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@PAGE", FbDbType.VarChar, 1000, path.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0) > 0;
                        }

                        if (Result || ForceBan)
                        {
                            //ban the address
                            try
                            {
                                Result = true;
                                SQL = "INSERT INTO WS_BANNED_IP (IPADDRESS, BANTYPE) VALUES (@IPADDRESS, 1);";
                                cmd = new FbCommand(SQL, db, tran);

                                AddParam(cmd, "@IPADDRESS", FbDbType.VarChar, 15, IPAddress);

                                cmd.ExecuteNonQuery();

                                CloseAndDispose(ref cmd);
                            }
                            catch (Exception err)
                            {
                                if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint \"IDX_BANNED_IP_ADDRESS"))
                                    throw;
                            }
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AutoBanIPAddress(string ipAddress)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    try
                    {
                        string SQL = "INSERT INTO WS_BANNED_IP (IPADDRESS, BANTYPE) VALUES (@IPADDRESS, 1);";
                        FbCommand cmd = new FbCommand(SQL, db, tran);

                        AddParam(cmd, "@IPADDRESS", FbDbType.VarChar, 15, ipAddress);

                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }
                    catch (Exception err)
                    {
                        if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint \"IDX_BANNED_IP_ADDRESS"))
                            throw;
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static bool IPAddressIsBanned(string IPAddress, out int BanType)
        {
            BanType = 0;
            bool Result = false;
            return (Result);

            //FbTransaction tran = null;
            //FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            //try
            //{
            //    try
            //    {
            //        string SQL = String.Format("SELECT IPADDRESS, BANTYPE FROM WS_BANNED_IP WHERE IPADDRESS = '{0}';", IPAddress);
            //        FbCommand cmd = new FbCommand(SQL, db, tran);

            //        FbDataReader rdr = cmd.ExecuteReader();
            //        try
            //        {
            //            if (rdr.Read())
            //            {
            //                Result = rdr.GetString(0) == IPAddress;
            //                BanType = rdr.GetInt32(1);
            //            }
            //        }
            //        finally
            //        {
            //            CloseAndDispose(ref cmd, ref rdr);
            //        }
            //    }
            //    finally
            //    {
            //        tran.Rollback();
            //    }
            //}
            //finally
            //{
            //    CloseAndDispose(ref db, ref tran);
            //}

            //return (Result);
        }

        internal static USState IPAddressToState(string IPAddr)
        {
            USState Result = null;

            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = String.Format("SELECT a.WD$REGION " +
                            "FROM WD$IPCITY a inner join WD$IPTOCOUNTRY c on (c.WD$CITY_ID = a.WD$ID) " +
                            "WHERE c.WD$FROM_IP <= {0} and c.WD$TO_IP >= {0}",
                            Shared.Utilities.IPToLong(IPAddr));
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        FbDataReader rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            SQL = String.Format("SELECT a.ID, a.STATE, a.REDIRECT_URL, a.SHOW_PRICES, a.STATE_CODE FROM WS_US_STATES a WHERE a.STATE_CODE = '{0}';", rdr.GetString(0));
                            cmd = new FbCommand(SQL, db, tran);
                            rdr = cmd.ExecuteReader();

                            if (rdr.Read())
                            {
                                Result = new USState(rdr.GetInt64(0), rdr.GetString(1), rdr.IsDBNull(2) ? "" : rdr.GetString(2), rdr.GetString(3) == "Y", rdr.GetString(4));
                            }
                            else
                            {
                                Result = new USState(-1, "Unknown", "", true, "ZZ");
                            }
                        }
                        else
                        {
                            Result = new USState(-1, "Unknown", "", true, "ZZ");
                        }

                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Commit();
                    }
                    catch
                    {
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }

                return (Result);
            }
            catch
            {
                throw;
            }
        }

        internal static string IPAddressToCountryCreateUpdateSQL(Int64 version)
        {
            string Result = String.Empty;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.FROMIP, a.TOIP, a.COUNTRY_CODE " +
                        "FROM WS_IPTOCOUNTRY a WHERE a.GEO_IP_VERSION = {0}", version);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result += String.Format("INSERT INTO WD$IPTOCOUNTRY (WD$FROM_IP, WD$TO_IP, WD$COUNTRY_CODE) VALUES " +
                            "('{0}', '{1}', '{2}');\r\n", rdr.GetDouble(0), rdr.GetDouble(1), rdr.GetString(2));
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static string IPAddressToCountry(string ipAddress)
        {
            string Result = "ZZ";

            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = String.Format("SELECT a.WD$COUNTRY_CODE FROM WD$IPTOCOUNTRY a " +
                            "WHERE a.WD$FROM_IP <= {0} AND a.WD$TO_IP >= {0}",
                            Shared.Utilities.IPToLong(ipAddress));
                        FbDataReader rdr = null;
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        try
                        {
                            rdr = cmd.ExecuteReader();

                            if (rdr.Read())
                            {
                                Result = rdr.GetString(0);
                            }
                        }
                        finally
                        {
                            CloseAndDispose(ref cmd, ref rdr);
                        }

                        if (String.IsNullOrEmpty(Result))
                            Result = "ZZ";

                        tran.Commit();
                    }
                    catch
                    {
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }

                return (Result);
            }
            catch
            {
                if (String.IsNullOrEmpty(Result))
                    Result = "ZZ";

                return (Result);
            }
        }

        internal static string IPAddressToCountryA(string ipAddress)
        {
            string Result = "ZZ";
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = String.Format("SELECT a.WD$COUNTRY_CODE FROM WD$IPTOCOUNTRY a " +
                            "WHERE a.WD$FROM_IP <= {0} AND a.WD$TO_IP >= {0}",
                            Shared.Utilities.IPToLong(ipAddress));
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        FbDataReader rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = rdr.GetString(0);
                        }

                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Commit();
                    }
                    catch
                    {
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }

                return (Result);
            }
            catch
            {
                return (Result);
            }
        }

        internal static int IPAddressToCountryProcessFile(string GeoPath, string GeoFile, string GeoTempTable,
            out int Updated, out int Unchanged, out int Added, out int Unknown, out Int64 newVersion)
        {
            IPAddressToCountryRecreateExternalFile(GeoPath);

            int Result = 0;
            Updated = 0;
            Added = 0;
            Unchanged = 0;
            Unknown = 0;
            newVersion = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPTOTALENTRIES, p.OPUPDATED, p.OPUNCHANGED, p.OPADDED, p.OPUNKNOWN, " +
                        "p.OPNEW_VERSION FROM WSP_GEO_PROCESS_CSV p";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                        Updated = rdr.GetInt32(1);
                        Unchanged = rdr.GetInt32(2);
                        Added = rdr.GetInt32(3);
                        Unknown = rdr.GetInt32(4);
                        newVersion = rdr.GetInt64(5);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            IPCodeReset();

            return (Result);
        }

        /// <summary>
        /// Recreates an external table within the database
        /// </summary>
        /// <param name="GeoTempTable">CSV File to be recreated</param>
        internal static bool IPAddressToCountryRecreateExternalFile(string GeoTempPath)
        {
            bool Result = false;
            try
            {
                string scriptFile = String.Format("{0}\\ExternalFileScript.sql", GeoTempPath);
                //connect to local DB
                FbConnection db = new FbConnection(GetConnectionString(DatabaseType.Standard));
                db.Open();
                try
                {
                    StreamReader rdr = new StreamReader(scriptFile);
                    try
                    {
                        string statements = rdr.ReadToEnd();

                        if (statements.Contains("{0}"))
                            statements = String.Format(statements, GeoTempPath);

                        FbScript script = new FbScript(rdr.ReadToEnd());
                        script.Parse();

                        foreach (FbStatement cmd in script.Results)
                        {
                            try
                            {
                                FbBatchExecution fbe = new FbBatchExecution(db);
                                try
                                {
                                    fbe.Statements.Add(cmd);
                                    fbe.Execute();
                                }
                                finally
                                {
                                    fbe.Statements.Clear();
                                    fbe = null;
                                }
                            }
                            catch (Exception err)
                            {
                                if (!err.Message.ToUpper().Contains("ATTEMPT TO STORE DUPLICATE VALUE") && !err.Message.ToUpper().Contains("ALREADY EXISTS") &&
                                    !err.Message.Contains("violation of PRIMARY or UNIQUE") && !err.Message.Contains("violation of FOREIGN KEY constraint") &&
                                    !err.Message.Contains("Table WS_IPTOCOUNTRY_EXTERNAL does not exist"))
                                {
                                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, GeoTempPath);
                                    throw;
                                }
                            }
                        }


                        Result = true;
                    }
                    finally
                    {
                        rdr.Close();
                        rdr.Dispose();
                        rdr = null;
                    }
                }
                finally
                {
                    db.Close();
                    db.Dispose();
                    db = null;
                }
            }
            catch (Exception e)
            {
                ErrorHandling.LogError(MethodBase.GetCurrentMethod(), e, GeoTempPath);
                Result = false;
            }

            return (Result);
        }

        #endregion IP Address

        #region User Accounts

        #region Credit Cards

        internal static CreditCard UserCreditCardDetailsGet(User user)
        {
            CreditCard Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.CARD_NUMBER, a.CARD_NUMBER_LAST4, a.VALID_FROM, a.VALID_TO, a.CARD_NAME, a.LAST3_DIGITS, a.CARD_TYPE " +
                        "FROM WS_MEMBERS_CARDS a WHERE a.CUSTOMER_ID = {0}", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new CreditCard(rdr.GetInt64(0), user, rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), (AcceptedCreditCardTypes)rdr.GetInt16(7));

                        user.CardDetails = Result;
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void UserCreditCardDetailsDelete(CreditCard card, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_MEMBERS_CARDS a where a.ID = {0} AND a.CUSTOMER_ID = {1}", card.ID, user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                    user.CardDetails = null;
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, card, user);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void UserCreditCardDetailsUpdate(CreditCard card, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_WS_MEMBERS_CARDS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPID", FbDbType.BigInt, card.ID);
                    AddParam(cmd, "@ipCUSTOMER_ID", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@ipCARD_NUMBER", FbDbType.VarChar, 800, card.CardNumber);
                    AddParam(cmd, "@ipCARD_NUMBER_LAST4", FbDbType.VarChar, 4, card.Last4Digits);
                    AddParam(cmd, "@ipVALID_FROM", FbDbType.VarChar, 5, card.ValidFrom);
                    AddParam(cmd, "@ipVALID_TO", FbDbType.VarChar, 5, card.ValidTo);
                    AddParam(cmd, "@IPCARD_NAME", FbDbType.VarChar, 250, card.CardName);
                    AddParam(cmd, "@ipLAST3_DIGITS", FbDbType.VarChar, 3, card.Last3Digits);
                    AddParam(cmd, "@ipCARD_TYPE", FbDbType.Integer, (int)card.CardType);
                    AddParam(cmd, "@opID", FbDbType.BigInt);
                    cmd.ExecuteNonQuery();

                    card.ID = (Int64)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch //(Exception err)
                {
                    //ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, card, user);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Credit Cards

        #region Special Offers

        internal static void SpecialOffersGet(int UserID, out bool Email,
            out bool Phone, out bool Postal)
        {
            // default values
            Email = false;
            Phone = false;
            Postal = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opRECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "opRECEIVE_PHONE_SPECIAL_OFFERS, opRECEIVE_POSTAL_SPECIAL_OFFERS " +
                        "FROM WSP_SPECIAL_OFFERS_GET({0})", UserID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Email = rdr.GetString(0) == "T";
                        Phone = rdr.GetString(1) == "T";
                        Postal = rdr.GetString(2) == "T";
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static void SpecialOffersSet(int UserID, bool Email,
            bool Phone, bool Postal)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_SPECIAL_OFFERS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, UserID);
                    AddParam(cmd, "@opRECEIVE_EMAIL_SPECIAL_OFFERS", FbDbType.Char, 1, BoolToStr(Email));
                    AddParam(cmd, "@opRECEIVE_PHONE_SPECIAL_OFFERS", FbDbType.Char, 1, BoolToStr(Phone));
                    AddParam(cmd, "@opRECEIVE_POSTAL_SPECIAL_OFFERS", FbDbType.Char, 1, BoolToStr(Postal));

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        #endregion Special Offers

        /// <summary>
        /// Merges two user records together
        /// </summary>
        /// <param name="currentUser">User making the request</param>
        /// <param name="primaryRecord">Primary Record</param>
        /// <param name="secondaryRecord">Secondary Record</param>
        internal static void UserMergeRecords(User currentUser, User primaryRecord, User secondaryRecord)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MERGE_MEMBER_ACCOUNTS";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipCURRENT_USER", FbDbType.BigInt, currentUser.ID);
                    AddParam(cmd, "@ipPRIMARY_ACCOUNT_ID", FbDbType.BigInt, primaryRecord.ID);
                    AddParam(cmd, "@ipSECONDARY_ACCOUNT_ID", FbDbType.BigInt, secondaryRecord.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Users UsersGet(Progress progress)
        {
            Users Result = new Users();

            int total = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(ID) FROM WS_MEMBERS";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        total = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            BOLEvents.ProgressEventArgs args = new ProgressEventArgs(100, 0);
            args.User = null;

            if (progress != null)
                progress.RaiseOnProgress(args);

            tran = null;
            db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT m.ID, m.EMAIL, m.USERNAME, m.FIRSTNAME, m.LASTNAME, m.PWORD, m.LASTVISIT, m.BUSINESSNAME, m.ADDRESSLINE1, " +
                        "m.ADDRESSLINE2, m.ADDRESSLINE3, m.CITY, m.COUNTY, m.POSTCODE, m.MEMBER_LEVEL, m.COUNTRY, m.TELEPHONE, m.SALONID, " +
                        "m.RECEIVE_EMAIL_SPECIAL_OFFERS, m.RECEIVE_PHONE_SPECIAL_OFFERS, m.RECEIVE_POSTAL_SPECIAL_OFFERS, m.BIRTH_DATE, m.STYLE, " +
                        "m.RECORD_TYPE, m.AUTO_DISCOUNT, '', c.ID, c.COUNTRYCODE, c.COUNTRY, c.SORTORDER, c.SHIPPING_COST, c.SHOW_ON_WEB, " +
                        "c.AUTO_REDIRECT, c.CULTURE, c.CONVERSION_RATE, c.VAT_RATE, c.SHOW_PRICE_DATA, c.COST_MULTIPLIER, c.PRICE_COLUMN, c.LOCALIZED, " +
                        "c.ADDRESS_SETTINGS, c.CURRENCY_SYMBOL, c.ALLOW_VAT_REMOVE, " +
                        "c.ALLOW_FREE_SPEND, c.FREE_SPEND_AMOUNT, c.ALLOW_CURRENCY_CONVERSION, c.DEFAULT_CURRENCY, c.LOCALIZED_CULTURE, " +
                        "c.LOCALIZED_LANGUAGE " +
                        "FROM WS_MEMBERS m LEFT JOIN WS_COUNTRIES c ON (c.ID = m.COUNTRY)";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    int i = 0;
                    double Percent;

                    while (rdr.Read())
                    {
                        User selected = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24),

                            //country
                            new Country(rdr.GetInt32(26), rdr.GetString(27), rdr.GetString(28),
                                rdr.GetInt32(29), rdr.GetDecimal(30), rdr.GetString(31) == "T", rdr.GetString(32),
                                rdr.GetString(33), rdr.GetDouble(34), rdr.GetDouble(35), rdr.GetString(36) == "T",
                                rdr.GetDouble(37), rdr.GetInt32(38), rdr.GetString(39) == "Y",
                                (AddressOptions)rdr.GetInt64(40), rdr.IsDBNull(41) ? String.Empty : rdr.GetString(41),
                                rdr.GetString(42) == "Y", rdr.GetString(43) == "Y", rdr.GetDouble(44),
                                rdr.GetString(45) == "Y", rdr.GetString(46), rdr.GetString(47),
                                rdr.IsDBNull(48) ? String.Empty : rdr.GetString(48))
                            );

                        if (progress != null)
                        {
                            i++;
                            Percent = (100 / (double)total) * i;
                            args.Percent = Convert.ToInt32(Percent);
                            args.User = selected;

                            progress.RaiseOnProgress(args);

                            if (args.Cancel)
                                break;
                        }

                        Result.Add(selected);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    args.User = null;
                    args.Percent = 100;

                    if (progress != null)
                        progress.RaiseOnProgress(args);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, progress);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static User UserGet(string Email)
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (UPPER(r.EMAIL) = @EMAIL)";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, Email.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Email);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static User UserGet(string Email, string Password)
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (UPPER(r.EMAIL) = @EMAIL) AND (r.PWORD = @PASSWORD)";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@EMAIL", FbDbType.VarChar, 100, Email.ToUpper());
                    AddParam(cmd, "@PASSWORD", FbDbType.VarChar, 200, EncryptPassword(Password));

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Email, Password);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static User UserGet(Int64 UserID)
        {
            if (UserID == -1)
                return (null);

            User Result = null;
            string cacheName = String.Format("Internal Cached User {0}", UserID);

            if (DALHelper.AllowCaching)
            {
                CacheItem item = DALHelper.InternalCache.Get(cacheName);

                if (item != null)
                    return ((User)item.Value);
            }

            if (Result != null)
                return (Result);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (ID = {0})", UserID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, UserID);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            if (DALHelper.AllowCaching)
            {
                DALHelper.InternalCache.Add(cacheName, new CacheItem(cacheName, Result));
            }

            return (Result);
        }

        internal static User UserGetByBarcode(string Barcode)
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r LEFT JOIN POS_BARCODE_LOGIN bcl ON (bcl.USER_ID = r.ID) WHERE (bcl.BARCODE = @BARCODE)";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@BARCODE", FbDbType.VarChar, 30, Barcode);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, Barcode);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static string UserGetBarcode(User user)
        {
            string Barcode = String.Empty;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.BARCODE FROM POS_BARCODE_LOGIN a WHERE a.USER_ID = {0}", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Barcode = rdr.GetString(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Barcode);
        }

        internal static Users UserGet()
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (r.MEMBER_LEVEL > 5 AND r.MEMBER_LEVEL <= 10) ORDER BY r.USERNAME";
                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                                DecryptPassword(rdr.GetString(5)),
                                rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                                rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                                rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                                rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                                rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);

                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users UserGetSalonOwners()
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (r.MEMBER_LEVEL = 5) ORDER BY r.BUSINESSNAME, r.USERNAME";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void UserChangePassword(Int64 UserID, string CurrentPassword, string NewPassword)
        {
            if (DALHelper.AllowCaching)
            {
                CacheItem item = DALHelper.InternalCache.Get(String.Format("Internal Cached User {0}", UserID));

                if (item != null)
                    DALHelper.InternalCache.Remove(item);
            }

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MEMBERS_UPDATE_PASSWORD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        PrepareCommand(cmd);

                        AddParam(cmd, "@ipUSERID", FbDbType.Integer, UserID);
                        AddParam(cmd, "@ipCURRENTPASSWORD", FbDbType.VarChar, 200, EncryptPassword(CurrentPassword));
                        AddParam(cmd, "@ipNEWPASSWORD", FbDbType.VarChar, 200, EncryptPassword(NewPassword));
                        cmd.ExecuteNonQuery();
                   }
                    finally
                    {
                        CloseAndDispose(ref cmd);

                        tran.Commit();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, UserID, CurrentPassword, NewPassword);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static User UserCreateAccount(string FirstName, string Surname, string Telephone, string EMail, string Password,
            string ConfirmPassword, string CompanyName, string Address1, string Address2, string Address3,
            string City, string County, string PostCode, int Country, bool OffersTelephone, bool OffersEmail, bool OffersPostal,
            Enums.UserRecordType RecordType,
            DateTime BirthDate, string Notes)
        {
            User Result = null;
            ValidateDetails(EMail, 6, "EMail Address");
            ValidateDetails(Password, 6, "Password");
            ValidateDetails(ConfirmPassword, 6, "Confirm Password");

            if (Password != ConfirmPassword)
                throw (new System.Exception("Password and Confirm Password do not match!"));

            ValidateDetails(FirstName, 0, "First Name");
            ValidateDetails(Surname, 0, "Last Name");
            //ValidateDetails(Telephone, 5, "Telephone Number");
            //ValidateDetails(Address1, 0, "Address Line 1");
            //ValidateDetails(City, 0, "City");
            //ValidateDetails(County, 0, "County");
            //ValidateDetails(PostCode, 0, "Post/Zip Code");

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MEMBERS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipEMail", FbDbType.VarChar, 100, EMail.ToLower());
                    AddParam(cmd, "@ipUserName", FbDbType.VarChar, 100, FirstName + " " + Surname);
                    AddParam(cmd, "@ipFirstName", FbDbType.VarChar, 50, FirstName);
                    AddParam(cmd, "@ipLastName", FbDbType.VarChar, 80, Surname);
                    AddParam(cmd, "@ipPword", FbDbType.VarChar, 50, EncryptPassword(Password));
                    AddParam(cmd, "@ipBusinessName", FbDbType.VarChar, 100, CompanyName);
                    AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 25, Telephone);
                    AddParam(cmd, "@ipAddressLine1", FbDbType.VarChar, 50, Address1);
                    AddParam(cmd, "@ipAddressLine2", FbDbType.VarChar, 50, Address2);
                    AddParam(cmd, "@ipAddressLine3", FbDbType.VarChar, 50, Address3);
                    AddParam(cmd, "@ipCity", FbDbType.VarChar, 50, City);
                    AddParam(cmd, "@ipCounty", FbDbType.VarChar, 50, County);
                    AddParam(cmd, "@ipCountry", FbDbType.Integer, Country);
                    AddParam(cmd, "@ipPostCode", FbDbType.VarChar, 15, PostCode);
                    AddParam(cmd, "@ipRECORD_TYPE", FbDbType.Integer, (int)RecordType);
                    AddParam(cmd, "@ipBIRTHDATE", FbDbType.Date, BirthDate);
                    AddParam(cmd, "@opID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Result = new User((Int64)cmd.Parameters["@opID"].Value, EMail, FirstName, Surname, Password, DateTime.Now, CompanyName, Address1,
                        Address2, Address3, City, County, PostCode, MemberLevel.StandardUser, Country, Telephone,
                        false, OffersEmail, OffersPostal, OffersTelephone, DateTime.MinValue, "", RecordType, 0);

                    if (Result.Email == "noemail")
                        Result.Email = String.Format("W{0}", Result.ID);

                    CloseAndDispose(ref cmd);

                    //todo - if user has notes, insert them now
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static bool UserGetDetails(Int64 UserID, out string FirstName, out string Surname,
            out string EMail,
            out string Password, out string CompanyName, out string Address1,
            out string Address2, out string Address3, out string City, out string County,
            out string PostCode, out int Country)
        {
            bool Result = false;

            FirstName = String.Empty;
            Surname = String.Empty;
            EMail = String.Empty;
            Password = String.Empty;
            CompanyName = String.Empty;
            Address1 = String.Empty;
            Address2 = String.Empty;
            Address3 = String.Empty;
            City = String.Empty;
            County = String.Empty;
            PostCode = String.Empty;
            Country = 1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MEMBERS_GET";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, UserID);
                    AddParam(cmd, "@opEMAIL", FbDbType.VarChar);
                    AddParam(cmd, "@opUSERNAME", FbDbType.VarChar);
                    AddParam(cmd, "@opFIRSTNAME", FbDbType.VarChar);
                    AddParam(cmd, "@opLASTNAME", FbDbType.VarChar);
                    AddParam(cmd, "@opPWORD", FbDbType.VarChar);
                    AddParam(cmd, "@opBUSINESSNAME", FbDbType.VarChar);
                    AddParam(cmd, "@opADDRESSLINE1", FbDbType.VarChar);
                    AddParam(cmd, "@opADDRESSLINE2", FbDbType.VarChar);
                    AddParam(cmd, "@opADDRESSLINE3", FbDbType.VarChar);
                    AddParam(cmd, "@opCITY", FbDbType.VarChar);
                    AddParam(cmd, "@opCCOUNTY", FbDbType.VarChar);
                    AddParam(cmd, "@opCOUNTRY", FbDbType.Integer);
                    AddParam(cmd, "@opPOSTCODE", FbDbType.VarChar);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        EMail = rdr.GetString(0);
                        FirstName = rdr.GetString(2);
                        Surname = rdr.GetString(3);
                        Password = DecryptPassword(rdr.GetString(4));
                        CompanyName = rdr.GetString(5);
                        Address1 = rdr.GetString(6);
                        Address2 = rdr.GetString(7);
                        Address3 = rdr.GetString(8);
                        City = rdr.GetString(9);
                        County = rdr.GetString(10);
                        Country = rdr.GetInt32(11);
                        PostCode = rdr.GetString(12);
                        Result = true;
                    }

                    CloseAndDispose(ref cmd, ref rdr);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void UserAddressUpdate(Int64 UserID, string Street1,
            string Street2, string City, string County, string PostCode, int Country)
        {
            string FirstName;
            string Surname;
            string EMail;
            string Password;
            string Disregard;
            int disregard;
            string CompanyName;
            string Street3;

            if (UserGetDetails(UserID, out FirstName, out Surname, out EMail, out Password,
                out CompanyName, out Disregard, out Disregard, out Street3, out Disregard,
                out Disregard, out Disregard, out disregard))
            {
                User user = UserGet(UserID);

                if (!UserAmmendAccount(user))
                    throw new Exception("An error occurred when updating user account");
            }
            else
                throw new Exception("Could not obtain user details");
        }

        internal static void UserAddressUpdate(Int64 UserID, string CompanyName, string Street1,
            string Street2, string Street3, string City, string County, string PostCode,
            int Country)
        {
            string FirstName;
            string Surname;
            string EMail;
            string Password;
            string Disregard;
            int NotUsed;

            if (UserGetDetails(UserID, out FirstName, out Surname, out EMail, out Password,
                out Disregard, out Disregard, out Disregard, out Disregard, out Disregard,
                out Disregard, out Disregard, out NotUsed))
            {
                User user = UserGet(UserID);
                if (!UserAmmendAccount(user))
                    throw new Exception("An error occurred when updating user account");
            }
            else
                throw new Exception("Could not obtain user details");
        }

        internal static bool UserAddressGet(Int64 UserID, out string CompanyName, out string Street1,
            out string Street2, out string Street3, out string City, out string County,
            out string PostCode, out int Country)
        {
            bool Result = false;

            Street1 = String.Empty;
            Street2 = String.Empty;
            City = String.Empty;
            County = String.Empty;
            PostCode = String.Empty;
            string FirstName;
            string Surname;
            string EMail;
            string Password;

            Result = (UserGetDetails(UserID, out FirstName, out Surname, out EMail,
                out Password, out CompanyName, out Street1, out Street2, out Street3,
                out City, out County, out PostCode, out Country));

            return (Result);
        }


        internal static bool UserGetDetails(Int64 UserID, out string EMail, out string UserName)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    FbCommand cmd = new FbCommand(String.Format("SELECT EMAIL, USERNAME FROM WS_MEMBERS " +
                        "WHERE ID = {0};", UserID), db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        if (rdr.Read())
                        {
                            EMail = rdr.GetString(0);
                            UserName = rdr.GetString(1);
                            return true;
                        }
                        else
                        {
                            EMail = "";
                            UserName = "";
                            return false;
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Updates a users account
        /// </summary>
        /// <param name="user">User account to be updated</param>
        /// <returns>bool, true if succesfully updated otherwise false</returns>
        internal static bool UserAmmendAccount(User user)
        {
            bool Result = false;

            if (DALHelper.AllowCaching)
            {
                CacheItem item = DALHelper.InternalCache.Get(String.Format("Internal Cached User {0}", user.ID));

                if (item != null)
                    DALHelper.InternalCache.Remove(item);
            }

            try
            {
                ValidateDetails(user.Email, 6, "EMail Address");
                ValidateDetails(user.Password, 6, "Password");
                ValidateDetails(user.FirstName, 0, "First Name");
                ValidateDetails(user.LastName, 0, "Last Name");

                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = "WSP_MEMBERS_UPD";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        PrepareCommand(cmd);

                        AddParam(cmd, "@ipID", FbDbType.BigInt, user.ID);
                        AddParam(cmd, "@ipEMail", FbDbType.VarChar, 100, user.Email.Trim());
                        AddParam(cmd, "@ipUserName", FbDbType.VarChar, 100, user.FirstName.Trim() + " " + user.LastName.Trim());
                        AddParam(cmd, "@ipFirstName", FbDbType.VarChar, 50, user.FirstName.Trim());
                        AddParam(cmd, "@ipLastName", FbDbType.VarChar, 80, user.LastName.Trim());
                        AddParam(cmd, "@ipPword", FbDbType.VarChar, 50, EncryptPassword(user.Password));
                        AddParam(cmd, "@ipBusinessName", FbDbType.VarChar, 100, user.BusinessName.Trim());
                        AddParam(cmd, "@ipAddressLine1", FbDbType.VarChar, 50, user.AddressLine1.Trim());
                        AddParam(cmd, "@ipAddressLine2", FbDbType.VarChar, 50, user.AddressLine2.Trim());
                        AddParam(cmd, "@ipAddressLine3", FbDbType.VarChar, 50, user.AddressLine3.Trim());
                        AddParam(cmd, "@ipCity", FbDbType.VarChar, 50, user.City.Trim());
                        AddParam(cmd, "@ipCounty", FbDbType.VarChar, 50, user.County.Trim());
                        AddParam(cmd, "@ipCountry", FbDbType.Integer, user.Country.ID);
                        AddParam(cmd, "@ipPostCode", FbDbType.VarChar, 15, user.PostCode.Trim());
                        AddParam(cmd, "@ipMEMBERLEVEL", FbDbType.Integer, (int)user.MemberLevel);
                        AddParam(cmd, "@ipSTYLE", FbDbType.VarChar, 100, user.Style.Trim());
                        AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 25, user.Telephone);
                        AddParam(cmd, "@ipSALONID", FbDbType.Integer, -1);
                        AddParam(cmd, "@ipOFFERSEMAIL", FbDbType.VarChar, 1, BoolToStr(user.OffersEmail));
                        AddParam(cmd, "@ipOFFERSTEL", FbDbType.VarChar, 1, BoolToStr(user.OffersTelephone));
                        AddParam(cmd, "@ipOFFERSPOST", FbDbType.VarChar, 1, BoolToStr(user.OffersPost));
                        AddParam(cmd, "@ipBIRTHDATE", FbDbType.Date, user.BirthDate);
                        AddParam(cmd, "@ipRECORD_TYPE", FbDbType.Integer, user.RecordType);
                        AddParam(cmd, "@IPAUTODISCOUNT", FbDbType.Integer, user.AutoDiscount);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);

                        Result = true;
                    }
                    finally
                    {
                        tran.Commit();
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch //(Exception err)
            {
                //ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user);
                throw;
            }

            return (Result);
        }

        internal static bool UserLogUserOn(User user)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID FROM WS_MEMBERS WHERE " +
                        "UPPER(EMAIL) = @EMAIL AND PWORD = @PASSWORD;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.Parameters.Add("@EMAIL", FbDbType.VarChar, 100, "EMAIL");
                    cmd.Parameters[0].Value = user.Email.ToUpper();
                    cmd.Parameters.Add("@PASSWORD", FbDbType.VarChar, 200, "PWORD");
                    cmd.Parameters[1].Value = EncryptPassword(user.Password);

                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        if (rdr.Read())
                        {
                            Result = true;
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

#if !ANDROID
        internal static DataSet UserGetUserMenuItems()
        {
            DataSet Result = new DataSet();

            return (Result);
        }
#endif

        /// <summary>
        /// Retrieves all users who's birthday fall within a specific month
        /// </summary>
        /// <param name="Month">Month i.e. 9 for September</param>
        /// <returns></returns>
        internal static Users UserGetBirthdays(string currenLocation, int month, int radius)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT, " +
                        "p.LATITUDE, p.LONGITUDE, pSalon.LATITUDE, pSalon.LONGITUDE " +
                        "FROM WS_MEMBERS r  JOIN hwz_postcodes p ON (TRIM(UPPER(p.outcode)) = TRIM(LEFT(UPPER(r.POSTCODE), POSITION(' ' IN r.POSTCODE)))) " +
                        "JOIN hwz_postcodes pSalon ON (pSalon.outcode = @CURRENT_LOCATION) WHERE CHAR_LENGTH(r.POSTCODE) >= 3 AND " +
                        "EXTRACT (MONTH FROM r.BIRTH_DATE) = @MONTH_NUMBER AND r.MEMBER_LEVEL = 0 " +
                        "AND (SELECT RESULT FROM GEODISTKM(pSalon.LATITUDE, pSalon.LONGITUDE, p.LATITUDE, p.LONGITUDE)) <= @MAX_KM";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MONTH_NUMBER", FbDbType.Integer, month);
                    AddParam(cmd, "@CURRENT_LOCATION", FbDbType.VarChar, currenLocation);
                    AddParam(cmd, "@MAX_KM", FbDbType.Float, radius);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static string WhereAddAnd(string whereClause)
        {
            string Result = whereClause;

            if (whereClause.Trim().ToUpper() != "WHERE")
                Result += " AND ";

            return (Result);
        }

        internal static Users UsersGet(HookEvent eventName)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {

                    string SQL = String.Format("SELECT DISTINCT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, " +
                        "r.AUTO_DISCOUNT FROM WS_MEMBERS r JOIN SYSTEM_HOOK_NOTIFICATIONS hn ON (hn.USER_ID = r.ID) " +
                        "AND hn.HOOK_ID = {0} ", (int)eventName);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users UserSearch(string FirstName, string LastName, string Email, string telephone, int MaxRecords)
        {
            Users Result = new Users();

            if (MaxRecords < 1)
                MaxRecords = 200;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string whereClause = "WHERE ";

                    string SQL = String.Format("SELECT FIRST {0} r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, " +
                        "r.AUTO_DISCOUNT FROM WS_MEMBERS r ", MaxRecords);

                    if (!String.IsNullOrEmpty(telephone))
                        whereClause = WhereAddAnd(whereClause) + "(r.TELEPHONE LIKE @TELEPHONE )";

                    if (!String.IsNullOrEmpty(FirstName))
                        whereClause = WhereAddAnd(whereClause) + "(UPPER(r.FIRSTNAME) LIKE @FIRSTNAME)";

                    if (!String.IsNullOrEmpty(LastName))
                        whereClause = WhereAddAnd(whereClause) + "(UPPER(r.LASTNAME) LIKE @LASTNAME)";

                    if (!String.IsNullOrEmpty(Email))
                        whereClause = WhereAddAnd(whereClause) + "(UPPER(r.EMAIL) LIKE @EMAIL)";

                    if (whereClause.Length > 7)
                        SQL += whereClause;

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    if (!String.IsNullOrEmpty(FirstName))
                        AddParam(cmd, "@FIRSTNAME", FbDbType.VarChar, 150, String.Format("%{0}%", FirstName.ToUpper()));

                    if (!String.IsNullOrEmpty(LastName))
                        AddParam(cmd, "@LASTNAME", FbDbType.VarChar, 150, String.Format("%{0}%", LastName.ToUpper()));

                    if (!String.IsNullOrEmpty(Email))
                        AddParam(cmd, "@EMAIL", FbDbType.VarChar, 150, String.Format("%{0}%", Email.ToUpper()));

                    if (!String.IsNullOrEmpty(telephone))
                        AddParam(cmd, "@TELEPHONE", FbDbType.VarChar, 50, String.Format("%{0}%", telephone.ToUpper()));

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users UserSearch(string FirstName, string LastName, string Email)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (UPPER(r.EMAIL) LIKE '%{0}%') " +
                        "AND (UPPER(r.FIRSTNAME) LIKE '%{1}%') AND (UPPER(r.LASTNAME) LIKE '%{2}%')",
                       Email.ToUpper().Replace("'", "''"), FirstName.ToUpper().Replace("'", "''"), LastName.ToUpper().Replace("'", "''"));

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (Library.MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void UserSetLastVisit(User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("UPDATE WS_MEMBERS SET LASTVISIT = CURRENT_DATE WHERE ID = {0}", user.ID);
                FbCommand cmd = new FbCommand(SQL, db, tran);

                cmd.ExecuteNonQuery();

                CloseAndDispose(ref cmd);

                tran.Commit();
            }
            catch (Exception err)
            {
                tran.Rollback();

                if (!err.Message.Contains("lock conflict on no wait transaction"))
                    throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static User UserGetSystemUser()
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT FIRST 1 r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (r.MEMBER_LEVEL = {0})", (int)MemberLevel.System);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion User Accounts

        #region Members Address

        internal static DeliveryAddress MembersAddressCreate(Int64 MemberID, string Name, string AddressLine1,
            string AddressLine2, string AddressLine3, string City, string County,
            string PostCode, int Country)
        {
            DeliveryAddress Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_WS_MEMBERS_ADDRESSES_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMEMBER_ID", FbDbType.BigInt, MemberID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 100, Name);
                    AddParam(cmd, "@ipADDRESSLINE1", FbDbType.VarChar, 50, AddressLine1);
                    AddParam(cmd, "@ipADDRESSLINE2", FbDbType.VarChar, 50, AddressLine2);
                    AddParam(cmd, "@ipADDRESSLINE3", FbDbType.VarChar, 50, AddressLine3);
                    AddParam(cmd, "@ipCITY", FbDbType.VarChar, 50, City);
                    AddParam(cmd, "@ipCOUNTY", FbDbType.VarChar, 50, County);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, PostCode);
                    AddParam(cmd, "@ipCOUNTRY", FbDbType.Integer, Country);
                    AddParam(cmd, "@opNEWID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Result = new DeliveryAddress((Int64)cmd.Parameters["@opNEWID"].Value, MemberID, Name,
                        AddressLine1, AddressLine2, AddressLine3, City, County, PostCode, Country);
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static void MembersAddressDelete(DeliveryAddress deliveryAddress)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_WS_MEMBERS_ADDRESSES_DEL";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMEMBER_ID", FbDbType.Integer, deliveryAddress.MemberID);
                    AddParam(cmd, "@ipID", FbDbType.Integer, deliveryAddress.ID);

                    cmd.ExecuteNonQuery();

                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static void MembersAddressUpdate(DeliveryAddress deliveryAddress)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_WS_MEMBERS_ADDRESSES_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, deliveryAddress.ID);
                    AddParam(cmd, "@ipMEMBER_ID", FbDbType.Integer, deliveryAddress.MemberID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 100, deliveryAddress.Name);
                    AddParam(cmd, "@ipADDRESSLINE1", FbDbType.VarChar, 50, deliveryAddress.AddressLine1);
                    AddParam(cmd, "@ipADDRESSLINE2", FbDbType.VarChar, 50, deliveryAddress.AddressLine2);
                    AddParam(cmd, "@ipADDRESSLINE3", FbDbType.VarChar, 50, deliveryAddress.AddressLine3);
                    AddParam(cmd, "@ipCITY", FbDbType.VarChar, 50, deliveryAddress.City);
                    AddParam(cmd, "@ipCOUNTY", FbDbType.VarChar, 50, deliveryAddress.County);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, deliveryAddress.PostCode);
                    AddParam(cmd, "@ipCOUNTRY", FbDbType.Integer, deliveryAddress.Country.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static DeliveryAddress MembersAddressGet(Int64 DeliveryAddressID)
        {
            DeliveryAddress Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT p.OPNAME, p.OPADDRESSLINE1, " +
                    "p.OPADDRESSLINE2, p.OPADDRESSLINE3, p.OPCITY, " +
                    "p.OPCOUNTY, p.OPPOSTCODE, p.OPCOUNTRY, p.OPID, p.OPMEMBERID " +
                    "FROM WSP_WS_MEMBERS_ADDRESSES_GET_ID ({0}) p", DeliveryAddressID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new DeliveryAddress(rdr.GetInt64(8), rdr.GetInt64(9), rdr.GetString(0), rdr.GetString(1),
                            rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6),
                            rdr.GetInt32(7));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static DeliveryAddresses MembersAddressGet(User user)
        {
            DeliveryAddresses Result = new DeliveryAddresses();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT p.OPNAME, p.OPADDRESSLINE1, " +
                    "p.OPADDRESSLINE2, p.OPADDRESSLINE3, p.OPCITY, " +
                    "p.OPCOUNTY, p.OPPOSTCODE, p.OPCOUNTRY, p.OPID, p.OPMEMBERID " +
                    "FROM WSP_WS_MEMBERS_ADDRESSES_GET ({0}) p", user.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new DeliveryAddress(rdr.GetInt64(8), rdr.GetInt64(9), rdr.GetString(0), rdr.GetString(1),
                            rdr.GetString(2), rdr.GetString(3), rdr.GetString(4), rdr.GetString(5), rdr.GetString(6),
                            rdr.GetInt32(7)));
                    }

                }
                finally
                {
                    tran.Rollback();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Members Address

        #region Member Notes

        /// <summary>
        /// Set's notes for a user
        /// </summary>
        /// <param name="member"></param>
        /// <param name="notes"></param>
        internal static void MemerNotesSet(User member, string notes)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "UPDATE OR INSERT INTO WS_MEMBER_NOTES (MEMBER_ID, NOTES) " +
                        "VALUES (@MEMBER_ID, @MEMBER_NOTES) MATCHING (MEMBER_ID);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, member.ID);
                    AddParam(cmd, "@MEMBER_NOTES", FbDbType.Text, notes);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Gets notes for a user
        /// </summary>
        /// <param name="member"></param>
        /// <returns></returns>
        internal static string MemberNotesGet(User member)
        {
            String Result = String.Empty;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT NOTES FROM WS_MEMBER_NOTES WHERE MEMBER_ID = @MEMBER_ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, member.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result = rdr.GetString(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Member Notes

        #region Recurring Invoices

        internal static void RecurringInvoiceSave(RecurringInvoice invoice)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("UPDATE RECURRING_BILLING rb " +
                    "SET DESCRIPTION = @DESCRIPTION, " +
                    "FREQUENCY_TYPE = @FREQUENCY_TYPE, " +
                    "FREQUENCY_PERIOD = @FREQUENCY_PERIOD, " +
                    "AUTO_DISCOUNT = @AUTO_DISCOUNT, " +
                    "NEXT_RUN = @NEXT_RUN, " +
                    "OPTIONS = @OPTIONS " +
                    "WHERE rb.ID = {0}", invoice.ID);

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@FREQUENCY_TYPE", FbDbType.Integer, (int)invoice.Type);
                    AddParam(cmd, "@FREQUENCY_PERIOD", FbDbType.Integer, invoice.Frequency);
                    AddParam(cmd, "@AUTO_DISCOUNT", FbDbType.Decimal, invoice.Discount);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, invoice.Description);
                    AddParam(cmd, "@NEXT_RUN", FbDbType.TimeStamp, invoice.NextRun);
                    AddParam(cmd, "@OPTIONS", FbDbType.BigInt, (Int64)invoice.Options);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }

                // remove items that were originally there, but are no longer there
                string remove = String.Empty;
                bool first = true;

                foreach (RecurringInvoiceItem item in invoice.Items)
                {
                    if (item.ID == -1)
                        continue;

                    if (first)
                    {
                        first = false;
                        remove = item.ProductItem.ID.ToString();
                    }
                    else
                    {
                        remove += ", " + item.ProductItem.ID.ToString();
                    }
                }

                if (!String.IsNullOrEmpty(remove))
                {
                    SQL = String.Format("DELETE FROM RECURRING_BILLING_ITEMS WHERE RECURRING_BILLING_ID " +
                        "= {0} AND ITEM_ID NOT IN ({1});",
                        invoice.ID, remove);
                    FbCommand cmdDelete = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmdDelete.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmdDelete);
                    }
                }

                foreach (RecurringInvoiceItem itm in invoice.Items)
                {
                    if (itm.ID == -1)
                        RecurringInvoiceItemAdd(invoice, itm.ProductItem, itm.Quantity);
                    else if (itm.IsDirty)
                        RecurringInvoiceItemSave(itm);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void RecurringInvoiceDelete(RecurringInvoice invoice)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("DELETE FROM RECURRING_BILLING rb WHERE rb.ID = {0}", invoice.ID);

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static RecurringInvoice RecurringInvoiceAdd(string description, User user, DateTime nextRun,
            RecurringType type, int frequency, decimal discount, RecurringInvoiceOptions options, 
            RecurringInvoiceItems items)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_RECURRING_INVOICE_ADD";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipUSER_ID", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@ipFREQUENCY_TYPE", FbDbType.Integer, (int)type);
                    AddParam(cmd, "@ipFREQUENCY_PERIOD", FbDbType.Integer, frequency);
                    AddParam(cmd, "@ipAUTO_DISCOUNT", FbDbType.Decimal, discount);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 100, description);
                    AddParam(cmd, "@ipNEXT_RUN", FbDbType.TimeStamp, nextRun);
                    AddParam(cmd, "@ipOPTIONS", FbDbType.BigInt, (Int64)options);
                    AddParam(cmd, "@opID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    RecurringInvoice Result = new RecurringInvoice(newID, description, user, nextRun,
                        type, frequency, discount, options, null);

                    SQL = "SP_RECURRING_INVOICE_ITEM_ADD";

                    foreach (RecurringInvoiceItem item in items)
                    {
                        FbCommand cmdItem = new FbCommand(SQL, db, tran);
                        try
                        {
                            PrepareCommand(cmdItem);

                            AddParam(cmdItem, "@IPBILLING_ID", FbDbType.BigInt, Result.ID);
                            AddParam(cmdItem, "@IPITEM_ID", FbDbType.BigInt, item.ProductItem.ID);
                            AddParam(cmdItem, "@IPQUANTITY", FbDbType.Decimal, item.Quantity);

                            AddParam(cmdItem, "@opID", FbDbType.BigInt);

                            cmdItem.ExecuteNonQuery();
                        }
                        finally
                        {
                            CloseAndDispose(ref cmdItem);
                        }
                    }

                    return (Result);
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static RecurringInvoices RecurringInvoiceAll()
        {
            RecurringInvoices Result = new RecurringInvoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT rb.ID, rb.USER_ID, rb.FREQUENCY_TYPE, rb.FREQUENCY_PERIOD, " +
                    "rb.AUTO_DISCOUNT, rb.DESCRIPTION, rb.NEXT_RUN, rb.OPTIONS " +
                    "FROM RECURRING_BILLING rb";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new RecurringInvoice(rdr.GetInt64(0), rdr.GetString(5),
                            UserGet(rdr.GetInt64(1), db, tran),
                            rdr.GetDateTime(6),
                            (RecurringType)rdr.GetInt32(2),
                            rdr.GetInt32(3), 
                            rdr.GetDecimal(4),
                            rdr.IsDBNull(7) ? RecurringInvoiceOptions.None : (RecurringInvoiceOptions)rdr.GetInt64(7),
                            null));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static RecurringInvoice RecurringInvoiceGet(Int64 id)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT rb.ID, rb.USER_ID, rb.FREQUENCY_TYPE, rb.FREQUENCY_PERIOD, " +
                    "rb.AUTO_DISCOUNT, rb.DESCRIPTION, rb.NEXT_RUN, rb.OPTIONS " +
                    "FROM RECURRING_BILLING rb WHERE rb.ID = @ID";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@ID", FbDbType.BigInt, id);
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        return (new RecurringInvoice(rdr.GetInt64(0), rdr.GetString(5),
                            UserGet(rdr.GetInt64(1), db, tran),
                            rdr.GetDateTime(6),
                            (RecurringType)rdr.GetInt32(2),
                            rdr.GetInt32(3),
                            rdr.GetDecimal(4),
                            rdr.IsDBNull(7) ? RecurringInvoiceOptions.None : (RecurringInvoiceOptions)rdr.GetInt64(7),
                            null));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (null);
        }

        internal static RecurringInvoiceItem RecurringInvoiceItemAdd(RecurringInvoice invoice, 
            ProductCost productCost, decimal quantity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SP_RECURRING_INVOICE_ITEM_ADD";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPBILLING_ID", FbDbType.BigInt, invoice.ID);
                    AddParam(cmd, "@IPITEM_ID", FbDbType.BigInt, productCost.ID);
                    AddParam(cmd, "@IPQUANTITY", FbDbType.Decimal, quantity);

                    AddParam(cmd, "@opID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opID"].Value;

                    return (new RecurringInvoiceItem(newID, invoice, productCost, quantity));
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static RecurringInvoiceItems RecurringInvoiceItemsGet(RecurringInvoice invoice)
        {
            RecurringInvoiceItems Result = new RecurringInvoiceItems();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT a.ID, a.ITEM_ID, a.QUANTITY " +
                    "FROM RECURRING_BILLING_ITEMS a WHERE a.RECURRING_BILLING_ID = {0}", invoice.ID);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new RecurringInvoiceItem(rdr.GetInt64(0), invoice,
                            ProductCostGet(rdr.GetInt64(1), tran),
                            rdr.GetDecimal(2)));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void RecurringInvoiceItemSave(RecurringInvoiceItem invoiceItem)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("UPDATE RECURRING_BILLING_ITEMS rbi " +
                    "SET QUANTITY = @QUANTITY " +
                    "WHERE rbi.ID = {0}", invoiceItem.ID);

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@QUANTITY", FbDbType.Decimal, invoiceItem.Quantity);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void RecurringInvoiceItemDelete(RecurringInvoiceItem invoiceItem)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("DELETE FROM RECURRING_BILLING_ITEMS rbi WHERE rbi.ID = {0}", invoiceItem.ID);

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Recurring Invoices

        #region Invoices

        internal static void InvoiceCancel(Invoice invoice, Stock stockReturnItems, User currentUser)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("EXECUTE PROCEDURE WSF_ORDER_CANCEL({0});", invoice.OrderID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    // what stock are we moving back into the stock control
                    if (stockReturnItems != null)
                    {
                        foreach (StockItem item in stockReturnItems)
                        {
                            if (item.Available > 0)
                            {
                                SQL = String.Format("EXECUTE BLOCK AS BEGIN INSERT INTO HS_STOCK_IN (STOCK_ID, USER_ID, " +
                                    "QUANTITY, STORE_ID) values ({0}, {1}, {2}, {3});" +
                                    "UPDATE HS_STOCKCONTROL sc SET sc.TOTAL_AVAILABLE = sc.TOTAL_AVAILABLE + {2} " +
                                    "WHERE sc.ITEM_ID = {0} AND sc.STORE_ID = {3}; END ",
                                    item.ID, currentUser.ID, item.Available, item.StoreID);
                                cmd = new FbCommand(SQL, db, tran);
                                try
                                {
                                    cmd.ExecuteNonQuery();
                                }
                                finally
                                {
                                    CloseAndDispose(ref cmd);
                                }
                            }
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Invoice InvoiceGet(Order order)
        {
            Invoice Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, " +
                    "r.SHIPPING_COSTS, r.DISCOUNT, r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, " +
                    "r.CULTURE, r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, " +
                    "r.ORDER_ID, r.DATE_SHIPPED, r.PAYMENT_TYPE, r.INVOICE_VERSION, r.USER_SESSION, r.REMOTE_HOST, " +
                    "r.COUPON_NAME, r.STORE_ID, r.TILL_ID, r.TRACKING_REFERENCE, r.COST_MULTIPLIER, r.NOTES, " +
                    "r.VOUCHERTYPE, r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_INVOICE_ID, " +
                    "inote.NOTES, COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                    "FROM WS_INVOICE_ORDERS r LEFT JOIN WS_INVOICE_NOTES inote ON (inote.ID = r.ID) " +
                    "WHERE r.ORDER_ID = {0}", order.ID);

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Invoice(rdr.GetInt32(0), rdr.GetInt32(14), rdr.GetInt32(1), rdr.GetDateTime(2),
                            rdr.GetDecimal(3), PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                            rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                            rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                            rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                            rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11),
                            rdr.IsDBNull(12) ? -1 : rdr.GetDecimal(12), rdr.IsDBNull(13) ? -1m : rdr.GetDecimal(13),
                            rdr.IsDBNull(15) ? DateTime.MinValue : rdr.GetDateTime(15),
                            PaymentStatusGet(db, tran, rdr.IsDBNull(16) ? rdr.GetInt32(4) : rdr.GetInt32(16)),
                            rdr.GetInt32(17), rdr.IsDBNull(18) ? "" : rdr.GetString(18),
                            rdr.IsDBNull(19) ? "" : rdr.GetString(19), rdr.IsDBNull(20) ? "" : rdr.GetString(20),
                            rdr.GetInt32(21), rdr.GetInt32(22),
                            rdr.IsDBNull(23) ? "" : rdr.GetString(23), rdr.GetDouble(24),
                            rdr.IsDBNull(25) ? "" : rdr.GetString(25), (Enums.InvoiceVoucherType)rdr.GetInt32(26),
                            rdr.IsDBNull(28) ? -1 : rdr.GetInt32(28), rdr.IsDBNull(27) ? true : rdr.GetString(27) == "Y",
                            rdr.IsDBNull(29) ? false : rdr.GetString(29) == "Y", rdr.IsDBNull(30) ? 0 : rdr.GetInt64(30),
                            rdr.IsDBNull(31) ? String.Empty : rdr.GetString(31), rdr.GetDecimal(32),
                            (InvoiceOptions)rdr.GetInt64(33));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoice InvoiceGet(Int64 InvoiceID)
        {
            Invoice Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, " +
                        "r.SHIPPING_COSTS, r.DISCOUNT, " +
                        "r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, r.CULTURE, r.DISCOUNT_AMMOUNT, " +
                        "r.VAT_AMMOUNT, r.ORDER_ID, r.DATE_SHIPPED, r.PAYMENT_TYPE, r.INVOICE_VERSION, r.USER_SESSION, " +
                        "r.REMOTE_HOST, r.COUPON_NAME, " +
                        "r.STORE_ID, r.TILL_ID, r.TRACKING_REFERENCE, r.COST_MULTIPLIER, r.NOTES, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_INVOICE_ID, inote.NOTES, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE_ORDERS r LEFT JOIN WS_INVOICE_NOTES inote ON (inote.ID = r.ID) " +
                        "WHERE r.ID = {0}", InvoiceID);

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new Invoice(rdr.GetInt64(0), rdr.GetInt32(14), rdr.GetInt32(1), rdr.GetDateTime(2),
                                rdr.GetDecimal(3), PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                                rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                                rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                                rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11),
                                rdr.IsDBNull(12) ? -1m : rdr.GetDecimal(12), rdr.IsDBNull(13) ? -1m : rdr.GetDecimal(13),
                                rdr.IsDBNull(15) ? DateTime.MinValue : rdr.GetDateTime(15),
                                PaymentStatusGet(db, tran, rdr.IsDBNull(16) ? rdr.GetInt32(4) : rdr.GetInt32(16)),
                                rdr.GetInt32(17), rdr.IsDBNull(18) ? "" : rdr.GetString(18),
                                rdr.IsDBNull(19) ? "" : rdr.GetString(19), rdr.IsDBNull(20) ? "" : rdr.GetString(20),
                                rdr.GetInt32(21), rdr.GetInt32(22),
                                rdr.IsDBNull(23) ? "" : rdr.GetString(23), rdr.GetDouble(24),
                                rdr.IsDBNull(25) ? "" : rdr.GetString(25), (Enums.InvoiceVoucherType)rdr.GetInt32(26),
                                rdr.IsDBNull(28) ? -1 : rdr.GetInt32(28), rdr.IsDBNull(27) ? true : rdr.GetString(27) == "Y",
                                rdr.IsDBNull(29) ? false : rdr.GetString(29) == "Y", rdr.IsDBNull(30) ? 0 : rdr.GetInt64(30),
                                rdr.IsDBNull(31) ? String.Empty : rdr.GetString(31), rdr.GetDecimal(32),
                                (InvoiceOptions)rdr.GetInt64(33));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        private static Invoice InvoiceGet(int InvoiceID, FbConnection connection, FbTransaction transaction)
        {
            Invoice Result = null;

            try
            {
                string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, r.SHIPPING_COSTS, " +
                    "r.DISCOUNT, r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, r.CULTURE, " +
                    "r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, r.ORDER_ID, r.DATE_SHIPPED, r.PAYMENT_TYPE, r.INVOICE_VERSION, " +
                    "r.USER_SESSION, r.REMOTE_HOST, r.COUPON_NAME, " +
                    "r.STORE_ID, r.TILL_ID, r.TRACKING_REFERENCE, r.COST_MULTIPLIER, r.NOTES, r.VOUCHERTYPE, " +
                    "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, LOCAL_INVOICE_ID, inote.NOTES, " +
                    "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                    "FROM WS_INVOICE_ORDERS r LEFT JOIN WS_INVOICE_NOTES inote ON (inote.ID = r.ID) " +
                    "WHERE r.ID = {0}", InvoiceID);

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, connection, transaction);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Invoice(rdr.GetInt32(0), rdr.GetInt32(14), rdr.GetInt32(1), rdr.GetDateTime(2),
                            rdr.GetDecimal(3), PaymentStatusGet(connection, transaction, rdr.GetInt32(4)),
                            rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                            rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                            rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                            rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11),
                            rdr.IsDBNull(12) ? -1m : rdr.GetDecimal(12), rdr.IsDBNull(13) ? -1m : rdr.GetDecimal(13),
                            rdr.IsDBNull(15) ? DateTime.MinValue : rdr.GetDateTime(15),
                            PaymentStatusGet(connection, transaction, rdr.IsDBNull(16) ? rdr.GetInt32(4) : rdr.GetInt32(16)),
                            rdr.GetInt32(17), rdr.IsDBNull(18) ? "" : rdr.GetString(18),
                            rdr.IsDBNull(19) ? "" : rdr.GetString(19), rdr.IsDBNull(20) ? "" : rdr.GetString(20),
                            rdr.GetInt32(21), rdr.GetInt32(22),
                            rdr.IsDBNull(23) ? "" : rdr.GetString(23), rdr.GetDouble(24),
                            rdr.IsDBNull(25) ? "" : rdr.GetString(25), (Enums.InvoiceVoucherType)rdr.GetInt32(26),
                            rdr.IsDBNull(28) ? -1 : rdr.GetInt32(28), rdr.IsDBNull(27) ? true : rdr.GetString(27) == "Y",
                            rdr.IsDBNull(29) ? false : rdr.GetString(29) == "Y", rdr.IsDBNull(30) ? 0 : rdr.GetInt64(30),
                            rdr.IsDBNull(31) ? String.Empty : rdr.GetString(31), rdr.GetDecimal(32),
                            (InvoiceOptions)rdr.GetInt64(33));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            catch
            {
                throw;
            }

            return (Result);
        }

        internal static void InvoiceUpdateNotes(Invoice invoice, string notes)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "spWS_INVOICE_NOTES_IU";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, invoice.ID);
                    AddParam(cmd, "@ipNOTES", FbDbType.Text, notes);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static int InvoiceGetCount(User user)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(r.ID) FROM WS_INVOICE_ORDERS r WHERE r.USERID = {0}", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices InvoicesGet(User user)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, r.SHIPPING_COSTS, r.DISCOUNT, " +
                        "r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, r.CULTURE, r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, " +
                        "r.ORDER_ID, r.DATE_SHIPPED, r.PAYMENT_TYPE, r.INVOICE_VERSION, r.USER_SESSION, r.REMOTE_HOST, r.COUPON_NAME, " +
                        "r.STORE_ID, r.TILL_ID, r.TRACKING_REFERENCE, r.COST_MULTIPLIER, r.NOTES, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, LOCAL_INVOICE_ID, inote.NOTES, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE_ORDERS r LEFT JOIN WS_INVOICE_NOTES inote ON (inote.ID = r.ID) " +
                        "WHERE r.USERID = {0} ORDER BY r.ID DESC", user.ID);

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Invoice(rdr.GetInt32(0), rdr.GetInt32(14), rdr.GetInt32(1), rdr.GetDateTime(2),
                                rdr.GetDecimal(3), PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                                rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                                rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                                rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11),
                                rdr.IsDBNull(12) ? -1 : rdr.GetDecimal(12), rdr.IsDBNull(13) ? -1 : rdr.GetDecimal(13),
                                rdr.IsDBNull(15) ? DateTime.MinValue : rdr.GetDateTime(15),
                                PaymentStatusGet(db, tran, rdr.IsDBNull(16) ? rdr.GetInt32(4) : rdr.GetInt32(16)),
                                rdr.GetInt32(17), rdr.IsDBNull(19) ? "" : rdr.GetString(19),
                                rdr.IsDBNull(18) ? "" : rdr.GetString(18),
                                rdr.IsDBNull(20) ? "" : rdr.GetString(20), rdr.GetInt32(21), rdr.GetInt32(22),
                                rdr.IsDBNull(23) ? "" : rdr.GetString(23), rdr.GetDouble(24),
                                rdr.IsDBNull(25) ? "" : rdr.GetString(25), (Enums.InvoiceVoucherType)rdr.GetInt32(26),
                                rdr.IsDBNull(28) ? -1 : rdr.GetInt32(28), rdr.IsDBNull(27) ? true : rdr.GetString(27) == "Y",
                                rdr.IsDBNull(29) ? false : rdr.GetString(29) == "Y", rdr.IsDBNull(30) ? 0 : rdr.GetInt64(30),
                                rdr.IsDBNull(31) ? String.Empty : rdr.GetString(31), rdr.GetDecimal(32),
                                (InvoiceOptions)rdr.GetInt64(33)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void InvoiceMarkAsPaid(Order order, PaymentStatus PaymentStatus,
            int InvoiceVersion, string ResultText, string initialReferrer)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSF_INVOICE_PAID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipINVOICEID", FbDbType.Integer, order.ID);
                    AddParam(cmd, "@IPPAYMENTSTATUS", FbDbType.Integer, PaymentStatus.ID);
                    AddParam(cmd, "@IPVERSION", FbDbType.Integer, InvoiceVersion);
                    AddParam(cmd, "@ipRESULTTEXT", FbDbType.VarChar, 125, ResultText);
                    AddParam(cmd, "@ipINITIALREFERER", FbDbType.VarChar, 1000, initialReferrer);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception errInner)
                {
                    if (!errInner.Message.Contains("Invalid Process Status Change"))
                    {
                        //second try just in case...
                        Thread.Sleep(2000);
                        FbCommand cmd2ndAttempt = new FbCommand(SQL, db, tran);
                        try
                        {
                            PrepareCommand(cmd2ndAttempt);

                            AddParam(cmd2ndAttempt, "@ipINVOICEID", FbDbType.Integer, order.ID);
                            AddParam(cmd2ndAttempt, "@IPPAYMENTSTATUS", FbDbType.Integer, PaymentStatus.ID);
                            AddParam(cmd2ndAttempt, "@IPVERSION", FbDbType.Integer, InvoiceVersion);
                            AddParam(cmd2ndAttempt, "@ipRESULTTEXT", FbDbType.VarChar, 125, ResultText);
                            AddParam(cmd2ndAttempt, "@ipINITIALREFERER", FbDbType.VarChar, 1000, initialReferrer);

                            cmd2ndAttempt.ExecuteNonQuery();
                        }
                        finally
                        {
                            CloseAndDispose(ref cmd2ndAttempt);
                        }
                    } // if !invalid process change
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("Invalid Process Status Change"))
                {
                    string message = String.Format("Order ID: {0}<br />Payment Status: {1}<br />Result Text: {2}<p>Error:<br />{3}</p>", order.ID, PaymentStatus.ToString(), ResultText, err.Message);
                    Emails.Add("web.master@sieradelta.com", "web.master@sieradelta.com", "web.master@sieradelta.com", "web.master@sieradelta.com",
                        "Error processing payment", message);
                }

                throw;
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void InvoiceResendByEmail(Invoice invoice)
        {
            throw new Exception("reconfigure stored procedure");
            //			FbTransaction tran = null;
            //			FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            //			try
            //			{
            //				try
            //				{
            //					string SQL = "WSF_INVOICE_RESEND";
            //
            //					FbCommand cmd = new FbCommand(SQL, db, tran);
            //					PrepareCommand(cmd);
            //
            //					AddParam(cmd, "@ipINVOICEID", FbDbType.Integer, InvoiceID);
            //
            //					cmd.ExecuteNonQuery();

            //CloseAndDispose(ref cmd);

            //					tran.Commit();
            //				}
            //				catch
            //				{
            //					tran.Rollback();
            //					throw;
            //				}
            //			}
            //			finally
            //			{
            //				CloseAndDispose(ref db, ref tran);
            //			}
        }

        internal static void InvoiceItemUpdateSalesPerson(InvoiceItem invoiceItem, User user)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE_ITEMS SET STAFFMEMBER = {0} WHERE ID = {1};",
                        user.ID, invoiceItem.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void InvoiceUpdateProcessStatus(ProcessStatus ProcessStatus, Invoice invoice)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE_ORDERS SET PROCESS_STATUS = {1} WHERE ID = {0};",
                        invoice.ID, (int)ProcessStatus);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    if (ProcessStatus == ProcessStatus.Dispatched)
                    {
                        // remove stock for this invoice
                        foreach (InvoiceItem item in invoice.InvoiceItems)
                        {
                            if (item.ItemType == ProductCostItemType.Product)
                            {
                                string sqlStock = String.Format("UPDATE HS_STOCKCONTROL sc SET sc.TOTAL_AVAILABLE = sc.TOTAL_AVAILABLE - {0} " +
                                    "WHERE sc.ITEM_ID = {1} AND sc.STORE_ID = {2};", item.Quantity, item.ItemID, DALHelper.StoreID);
                                cmd = new FbCommand(sqlStock, db, tran);
                                try
                                {
                                    cmd.ExecuteNonQuery();
                                }
                                finally
                                {
                                    CloseAndDispose(ref cmd);
                                }
                            }
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void InvoiceUpdateProcessStatus(ProcessStatus ProcessStatus,
            Invoice invoice, string TrackingReference)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE_ORDERS SET PROCESS_STATUS = {1}, TRACKING_REFERENCE = '{2}' WHERE ID = {0};",
                        invoice.ID, (int)ProcessStatus, TrackingReference);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    // remove stock for this invoice
                    foreach (InvoiceItem item in invoice.InvoiceItems)
                    {
                        if (item.ItemType == ProductCostItemType.Product)
                        {
                            if (item.ItemStatus == ProcessItemStatus.Dispatching)
                            {
                                string sqlStock = String.Format("UPDATE HS_STOCKCONTROL sc SET sc.TOTAL_AVAILABLE = sc.TOTAL_AVAILABLE - {0} " +
                                    "WHERE sc.ITEM_ID = {1} AND sc.STORE_ID = {2};", item.Quantity, item.ItemID, DALHelper.StoreID);
                                cmd = new FbCommand(sqlStock, db, tran);
                                cmd.ExecuteNonQuery();

                                CloseAndDispose(ref cmd);

                                item.ItemStatus = ProcessItemStatus.Dispatched;
                            }

                            string sqlItemStatus = String.Format("UPDATE WS_INVOICE_ITEMS SET ITEM_STATUS = {0} WHERE ID = {1};",
                                (int)item.ItemStatus, item.ID);
                            cmd = new FbCommand(sqlItemStatus, db, tran);
                            cmd.ExecuteNonQuery();

                            CloseAndDispose(ref cmd);
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void InvoiceUpdatePaymentStatus(PaymentStatus PaymentStatus, Invoice invoice)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE SET STATUS = {1} WHERE ID = {0};", invoice.ID, PaymentStatus.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static InvoiceItems InvoiceItemsGet(Invoice invoice)
        {
            InvoiceItems Result = new InvoiceItems(invoice);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    // any treatments / products on this item?
                    string SQL = String.Format("SELECT r.ID, r.INVOICEID, r.DESCRIPTION, r.COST, r.QTY, r.PRICE, " +
                        "r.ITEM_ID, r.ITEM_TYPE, pcs.SKU, r.STAFFMEMBER, pcs.PRODUCT_TYPE, r.USER_DISCOUNT, r.PRODUCT_DISCOUNT, " + //12
                        "pct.DESCRIPTION, r.ITEM_STATUS, pct.ITEM_TYPE " +
                        "FROM WS_INVOICE_ITEMS r INNER JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = r.ITEM_ID) " +
                        "LEFT JOIN WS_PRODUCT_COST_TYPE pct ON (PCT.ID = pcs.PRODUCT_TYPE) WHERE r.INVOICEID = {0} AND r.ITEM_TYPE NOT IN (4, 6) " +
                        "UNION ALL SELECT i.ID, i.INVOICEID, i.DESCRIPTION, i.COST, i.QTY, i.PRICE, i.ITEM_ID, i.ITEM_TYPE, '', " + //8
                        "i.STAFFMEMBER, 0, i.USER_DISCOUNT, i.PRODUCT_DISCOUNT, 'Treatment', 1, 4 " +
                        "FROM WS_INVOICE_ITEMS i INNER JOIN WS_APPOINTMENT_TREATMENTS t ON (t.ID = i.ITEM_ID) " +
                        "where i.INVOICEID = {0} AND i.ITEM_TYPE = 4 " +
                        "UNION ALL SELECT g.ID, g.INVOICEID, g.DESCRIPTION, g.COST, g.QTY, g.PRICE, g.ITEM_ID, g.ITEM_TYPE, " + //7
                        "pcs.SKU, g.STAFFMEMBER, pcs.PRODUCT_TYPE, g.USER_DISCOUNT, g.PRODUCT_DISCOUNT, pct.DESCRIPTION, g.ITEM_STATUS, " + //14
                        "pct.ITEM_TYPE " +
                        "FROM WS_INVOICE_ITEMS g INNER JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = g.ITEM_ID) " +
                        "LEFT JOIN WS_PRODUCT_COST_TYPE pct ON (PCT.ID = pcs.PRODUCT_TYPE) " +
                        "where g.INVOICEID = {0} AND g.ITEM_TYPE = 6", invoice.OrderID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new InvoiceItem(rdr.GetInt32(0), rdr.GetString(2), rdr.GetDecimal(3),
                            rdr.GetDecimal(4), rdr.GetDecimal(5), rdr.GetInt32(6), 
                            (ProductCostItemType)rdr.GetInt32(7), rdr.GetString(8),
                            rdr.IsDBNull(9) ? -1 : rdr.GetInt32(9), 
                            new ProductCostType(rdr.GetInt32(10), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(15)), 
                            invoice, rdr.IsDBNull(11) ? 0.00m : rdr.GetDecimal(11), 
                            rdr.IsDBNull(12) ? 0.00m : rdr.GetDecimal(12),
                            (ProcessItemStatus)rdr.GetInt32(14)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    if (Result.Count == 0)
                    {
                        SQL = String.Format("SELECT i.ID, i.INVOICEID, i.DESCRIPTION, i.COST, i.QTY, i.PRICE, i.ITEM_ID, i.ITEM_TYPE, '', i.STAFFMEMBER, 0, i.USER_DISCOUNT, i.PRODUCT_DISCOUNT " +
                            "FROM WS_INVOICE_ITEMS i where i.INVOICEID = {0}", invoice.OrderID);
                        cmd = new FbCommand(SQL, db, tran);
                        rdr = cmd.ExecuteReader();

                        //while (rdr.Read())
                        //{
                        //    Result.Add(new InvoiceItem(rdr.GetInt32(0), rdr.GetString(2), rdr.GetDecimal(3),
                        //        rdr.GetInt32(4), rdr.GetDecimal(5), rdr.GetInt32(6), (ProductCostItemType)rdr.GetInt32(7), rdr.GetString(8),
                        //        rdr.IsDBNull(9) ? -1 : rdr.GetInt32(9), ProductCostTypeGet(db, tran, rdr.GetInt32(10)), invoice,
                        //        rdr.IsDBNull(11) ? 0.00m : rdr.GetDecimal(11), rdr.IsDBNull(12) ? 0.00m : rdr.GetDecimal(12)));
                        //}

                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static void InvoiceSetDate(Invoice invoice, DateTime newDateTime)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE_ORDERS SET PURCHASEDATE = @ipPURCHASEDATE WHERE ID = {0};", invoice.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPURCHASEDATE", FbDbType.TimeStamp, newDateTime);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    SQL = String.Format("UPDATE WS_INVOICE SET PURCHASEDATE = @ipPURCHASEDATE WHERE ID = {0};", invoice.OrderID);
                    cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@ipPURCHASEDATE", FbDbType.TimeStamp, newDateTime);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }

        #endregion Invoices

        #region Orders

        internal static void OrderCancel(Order order)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("EXECUTE PROCEDURE WSF_ORDER_CANCEL({0});", order.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void OrdersProcessUnpaid()
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "EXECUTE PROCEDURE WSP_MAINTENANCE_ORDERS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Order OrderGet(Int64 OrderID)
        {
            Order Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, r.SHIPPING_COSTS, r.DISCOUNT, " +
                        "r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, r.CULTURE, r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, " +
                        "r.COUPON_NAME, r.STORE_ID, r.TILL_ID, r.COST_MULTIPLIER, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_ORDER_ID, r.INVOICE_VERSION, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE r WHERE r.ID = {0}", OrderID);

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        if (rdr.Read())
                        {
                            Result = new Order(rdr.GetInt64(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDecimal(3),
                                PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                                rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                                rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                                rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11), rdr.GetDecimal(12),
                                rdr.IsDBNull(13) ? -1 : rdr.GetDecimal(13), rdr.IsDBNull(14) ? "" : rdr.GetString(14),
                                rdr.GetInt32(15), rdr.GetInt32(16),
                                rdr.GetDouble(17), (Enums.InvoiceVoucherType)rdr.GetInt32(18),
                                rdr.IsDBNull(20) ? -1 : rdr.GetInt32(20),
                                rdr.IsDBNull(19) ? true : rdr.GetString(19) == "Y",
                                rdr.IsDBNull(21) ? false : rdr.GetString(21) == "Y",
                                rdr.IsDBNull(22) ? 0 : rdr.GetInt64(22), rdr.IsDBNull(23) ? 6 : rdr.GetInt32(23),
                                rdr.GetDecimal(24), (InvoiceOptions)rdr.GetInt64(25));

                            OrderItemsGet(Result, db, tran);
                            UserGet(rdr.GetInt64(1), Result, db, tran);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int OrdersGetCount(User user)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(ID) FROM WS_INVOICE r WHERE r.USERID = {0}", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Orders OrdersGet(User user)
        {
            Orders Result = new Orders();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, r.SHIPPING_COSTS, r.DISCOUNT, " +
                        "r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, r.CULTURE, r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, " +
                        "r.COUPON_NAME, r.STORE_ID, r.TILL_ID, r.COST_MULTIPLIER, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_ORDER_ID, r.INVOICE_VERSION, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE r WHERE r.USERID = {0} ORDER BY r.ID DESC", user.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Order(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDecimal(3),
                            PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                            rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                            rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                            rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                            rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11), rdr.GetDecimal(12),
                            rdr.IsDBNull(13) ? -1 : rdr.GetDecimal(13), rdr.IsDBNull(14) ? "" : rdr.GetString(14),
                            rdr.GetInt32(15), rdr.GetInt32(16),
                            rdr.GetDouble(17), (Enums.InvoiceVoucherType)rdr.GetInt32(18),
                            rdr.IsDBNull(20) ? -1 : rdr.GetInt32(20),
                            rdr.IsDBNull(19) ? true : rdr.GetString(19) == "Y",
                            rdr.IsDBNull(21) ? false : rdr.GetString(21) == "Y",
                            rdr.IsDBNull(22) ? 0 : rdr.GetInt64(22), rdr.IsDBNull(23) ? 6 : rdr.GetInt32(23),
                            rdr.GetDecimal(24), (InvoiceOptions)rdr.GetInt64(25)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void OrderMarkAsPaid(Order order, string initialReferrer)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSF_INVOICE_PAID";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipINVOICEID", FbDbType.Integer, order.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void OrderResendByEmail(int InvoiceID)
        {
            throw new Exception("reconfigure stored procedure");
            //			FbTransaction tran = null;
            //			FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            //			try
            //			{
            //				try
            //				{
            //					string SQL = "WSF_INVOICE_RESEND";
            //
            //					FbCommand cmd = new FbCommand(SQL, db, tran);
            //					PrepareCommand(cmd);
            //
            //					AddParam(cmd, "@ipINVOICEID", FbDbType.Integer, InvoiceID);
            //
            //					cmd.ExecuteNonQuery();

            //CloseAndDispose(ref cmd);

            //					tran.Commit();
            //				}
            //				catch
            //				{
            //					tran.Rollback();
            //					throw;
            //				}
            //			}
            //			finally
            //			{
            //				CloseAndDispose(ref db, ref tran);
            //			}
        }

        internal static void OrderUpdateProcessStatus(ProcessStatus ProcessStatus, Order order)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE SET PROCESS_STATUS = {1} WHERE ID = {0};", order.ID, (int)ProcessStatus);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void OrderUpdatePaymentStatus(PaymentStatus PaymentStatus, Order order)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_INVOICE SET STATUS = {1} WHERE ID = {0};", order.ID, PaymentStatus.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static OrderItems OrderItemsGet(Order order)
        {
            OrderItems Result = new OrderItems(order);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.INVOICEID, r.DESCRIPTION, r.COST, r.QTY, r.PRICE, " +
                        "r.ITEM_ID, pcs.PRODUCT_TYPE, r.USER_DISCOUNT, r.PRODUCT_DISCOUNT, pct.DESCRIPTION, r.ITEM_STATUS, " +
                        "pct.ITEM_TYPE " +
                        "FROM WS_INVOICE_ITEMS r LEFT JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = r.ITEM_ID) " +
                        "INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE r.INVOICEID = {0}", order.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new OrderItem(rdr.GetInt32(0), order, rdr.GetString(2), rdr.GetDecimal(3),
                            rdr.GetDecimal(4), rdr.GetDecimal(5), rdr.GetInt32(6),
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(10), (ProductCostItemType)rdr.GetInt32(12)),
                            rdr.IsDBNull(8) ? 0.00m : rdr.GetDecimal(8),
                            rdr.IsDBNull(9) ? 0.00m : rdr.GetDecimal(9), (ProcessItemStatus)rdr.GetInt32(11)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        /// <summary>
        /// Retrieves a list of unpaid/cancelled orders for a date range
        /// </summary>
        /// <param name="startDate">Start Date</param>
        /// <param name="endDate">End Date</param>
        /// <returns>Orders collection</returns>
        internal static Orders OrdersUnpaid(DateTime startDate, DateTime endDate)
        {
            Orders Result = new Orders();

            startDate = startDate.Date.AddDays(-1).AddSeconds(1);
            endDate = endDate.Date.AddDays(1).AddSeconds(-1);
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.USERID, r.PURCHASEDATE, r.TOTALCOST, r.STATUS, r.SHIPPING_COSTS, " +
                        "r.DISCOUNT, r.PROCESS_STATUS, r.SHIPPING_ADDRESS, r.CONVERSION_RATE, r.VAT_RATE, " +
                        "r.CULTURE, r.DISCOUNT_AMMOUNT, r.VAT_AMMOUNT, r.COUPON_NAME, r.STORE_ID, r.TILL_ID, " +
                        "r.COST_MULTIPLIER, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_ORDER_ID, r.INVOICE_VERSION, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE r " +
                        "WHERE CAST(r.PURCHASEDATE AS DATE) >= @FROMDATE AND CAST(r.PURCHASEDATE AS DATE) <= @TODATE " +
                        "AND r.STATUS IN (SELECT ps.ID FROM WS_PAYMENT_STATUS ps WHERE ps.IS_PAID = 'N') ORDER BY r.ID";

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@FROMDATE", FbDbType.Date, startDate);
                        AddParam(cmd, "@TODATE", FbDbType.Date, endDate);

                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Order(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDecimal(3),
                                PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                                rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                                rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                                rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11), rdr.GetDecimal(12),
                                rdr.IsDBNull(13) ? -1 : rdr.GetDecimal(13), rdr.IsDBNull(14) ? "" : rdr.GetString(14),
                                rdr.GetInt32(15), rdr.GetInt32(16),
                                rdr.GetDouble(17), (Enums.InvoiceVoucherType)rdr.GetInt32(18),
                                rdr.IsDBNull(20) ? -1 : rdr.GetInt32(20),
                                rdr.IsDBNull(19) ? true : rdr.GetString(19) == "Y",
                                rdr.IsDBNull(21) ? false : rdr.GetString(21) == "Y",
                                rdr.IsDBNull(22) ? 0 : rdr.GetInt64(22), rdr.IsDBNull(23) ? 6 : rdr.GetInt32(23),
                                rdr.GetDecimal(24), (InvoiceOptions)rdr.GetInt64(25)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Saves the basket as an order in progress
        /// </summary>
        /// <param name="basket">Current Shopping Basket</param>
        /// <param name="name">Saved Name</param>
        internal static void OrderSave(ShoppingBasket basket, string description, bool autoOrder)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE OR INSERT INTO POS_SAVED_ORDERS " +
                    "(BASKET_ID, USER_ID, DESCRIPTION, COUPON_NAME, AUTO_ORDER) " +
                    "VALUES (@BASKET_ID, @USER_ID, @DESCRIPTION, @COUPON_NAME, @AUTO_ORDER) " +
                    "MATCHING (BASKET_ID, USER_ID);";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@BASKET_ID", FbDbType.BigInt, basket.ID);
                    AddParam(cmd, "@USER_ID", FbDbType.BigInt, basket.User.ID);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, description);
                    AddParam(cmd, "@COUPON_NAME", FbDbType.VarChar, 100, basket.DiscountCouponName);
                    AddParam(cmd, "@AUTO_ORDER", FbDbType.Char, 1, autoOrder ? "Y" : "N");

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Orders

        #region Administration Functions

        #region Admin Email

        internal static Int64 AdminEmailMassAdd(string ToName, string ToEMail, string FromName,
            string FromEMail, string Subject, string Message, DateTime SendDateTime)
        {
            Int64 Result = -1;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_MASS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipTO_NAME", FbDbType.VarChar, 50, ToName);
                    AddParam(cmd, "@ipTO_EMAIL", FbDbType.VarChar, 100, ToEMail);
                    AddParam(cmd, "@ipFROM_NAME", FbDbType.VarChar, 50, FromName);
                    AddParam(cmd, "@ipFROM_EMAIL", FbDbType.VarChar, 100, FromEMail);
                    AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 150, Subject);
                    AddParam(cmd, "@ipMAIL_MESSAGE", FbDbType.Text, Message);
                    AddParam(cmd, "@ipSEND_DATE_TIME", FbDbType.TimeStamp, SendDateTime);
                    AddParam(cmd, "@opNewID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    Result = (Int64)cmd.Parameters["@opNewID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Email

        #region Admin Stats

        internal static SimpleStatistics StatisticsSEOStatistics()
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "SELECT p.OPNAME, p.OPURL, p.OPTITLE, p.OPHASHTAGCOUNT, " +
                        "p.OPDESCRIPTION FROM WS_SEO p";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SimpleStatistic(rdr.GetString(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3),
                                rdr.GetString(4)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminStatsMailCount(Enums.MailCount Option)
        {
            int Result = 0;
            string SQL = "";

            switch (Option)
            {
                case Enums.MailCount.Failed:
                    SQL = "SELECT COUNT(*) FROM WS_EMAIL WHERE SENT = 'N' AND SEND_ATTEMPTS > 0";
                    break;
                case Enums.MailCount.Queued:
                    SQL = "SELECT COUNT(*) FROM WS_EMAIL WHERE SENT = 'N' AND SEND_ATTEMPTS = 0 AND SEND_DATE_TIME > CURRENT_TIMESTAMP";
                    break;
                case Enums.MailCount.ToProcess:
                    SQL = "SELECT COUNT(*) FROM WS_EMAIL WHERE SENT = 'N' AND SEND_ATTEMPTS = 0 AND SEND_DATE_TIME <= CURRENT_TIMESTAMP";
                    break;
                default:
                    throw new Exception("Invalid Option");
            }

            Result = GetDBCount(SQL);

            return (Result);
        }

        internal static int AdminStatsInvoices(InvoiceStatistics Option)
        {
            int Result = 0;
            string SQL = "";

            switch (Option)
            {
                case InvoiceStatistics.Today:
                    SQL = "SELECT INVOICECOUNT FROM VW_STATS_INVOICES_TODAY";
                    break;
                case InvoiceStatistics.ToProcess:
                    SQL = "SELECT * FROM VW_STATS_INVOICES_TO_PROCESS";
                    break;
                case InvoiceStatistics.OnHold:
                    SQL = "SELECT COUNT(a.ID) FROM WS_INVOICE_ORDERS a WHERE a.PROCESS_STATUS = 5 AND a.STATUS <> 10";
                    break;
                case InvoiceStatistics.VerifyPayment:
                    SQL = "SELECT COUNT(a.ID) FROM WS_INVOICE_ORDERS a WHERE a.PROCESS_STATUS = 6 AND a.STATUS <> 10";
                    break;
                case InvoiceStatistics.PartiallyDispatched:
                    SQL = "SELECT COUNT(a.ID) FROM WS_INVOICE_ORDERS a WHERE a.PROCESS_STATUS = 7 AND a.STATUS <> 10";
                    break;
                case InvoiceStatistics.Received:
                    SQL = "SELECT COUNT(a.ID) FROM WS_INVOICE_ORDERS a WHERE a.PROCESS_STATUS = 0 AND a.STATUS <> 10";
                    break;
#if DEBUG
                default:
                    throw new Exception("Invalid Option");
#else
                    return (Result);
#endif
            }

            Result = GetDBCount(SQL);

            return (Result);
        }

        internal static string AdminStatsDownloads()
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string sql = "SELECT 'Today', d.DESCRIPTION, COUNT(a.ID) FROM WS_DOWNLOAD_STATS a " +
                        "LEFT JOIN WS_DOWNLOADS d ON (d.ID = a.FILE_ID) WHERE CAST(a.DATETIME AS DATE) = CURRENT_DATE " +
                        "GROUP BY 1, 2 UNION ALL SELECT 'Past Week', d.DESCRIPTION, COUNT(a.ID) " +
                        "FROM WS_DOWNLOAD_STATS a LEFT JOIN WS_DOWNLOADS d ON (d.ID = a.FILE_ID) " +
                        "WHERE CAST(a.DATETIME AS DATE) >= CURRENT_DATE -7 GROUP BY 1, 2";

                    FbCommand cmd = new FbCommand(sql, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();
                    try
                    {
                        string description = String.Empty;

                        while (rdr.Read())
                        {
                            if (rdr.GetString(0).Trim() != description.Trim())
                            {
                                if (!String.IsNullOrEmpty(description))
                                    Result += "</p>";

                                Result += String.Format("<h3>{0}</h3><p>", rdr.GetString(0).Trim());
                                description = rdr.GetString(0).Trim();
                            }

                            Result += String.Format("{0} - {1}<br />", rdr.GetString(1).Trim(), rdr.GetInt32(2));
                        }

                        if (!String.IsNullOrEmpty(description))
                            Result += "</p>";
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminStatsComments()
        {
            int Result = GetDBCount("SELECT COUNT(r.ID) FROM WS_CUSTOMER_COMMENTS r WHERE r.SHOW_ON_WEB = 'N'");

            return (Result);
        }

        internal static int AdminStatsLicenceCount()
        {
            int Result = GetDBCount("SELECT COUNT(a.ID) FROM WS_LICENCES a");

            return (Result);
        }

        internal static int AdminStatsUserCount()
        {
            int Result = GetDBCount("SELECT COUNT(a.ID) FROM WS_MEMBERS a");

            return (Result);
        }

        internal static int AdminStatsBannedIP()
        {
            int Result = GetDBCount("SELECT COUNT(*) FROM WS_BANNED_IP");

            return (Result);
        }

        internal static int AdminStatsAppointments(Enums.AppointmentStats Option)
        {
            int Result = -1;

            switch (Option)
            {
                case Enums.AppointmentStats.NewAppointments:
                    Result = GetDBCount("SELECT COUNT(*) FROM WS_APPOINTMENTS r WHERE r.STATUS = 1;");
                    break;
                case Enums.AppointmentStats.TodaysAppointments:
                    Result = GetDBCount("SELECT COUNT(*) FROM WS_APPOINTMENTS r WHERE r.APPOINTMENT_TYPE = 0 and r.APPOINTMENT_DATE = CURRENT_DATE AND r.STATUS = 2;");
                    break;
                case Enums.AppointmentStats.WeeksAppointments:
                    Result = GetDBCount("SELECT COUNT(*) FROM WS_APPOINTMENTS r WHERE r.APPOINTMENT_TYPE = 0 and r.APPOINTMENT_DATE BETWEEN CURRENT_DATE AND CURRENT_DATE + 7 AND r.STATUS = 2;");
                    break;
                default:
                    throw new Exception("Invalid Option");
            }


            return (Result);
        }

        internal static int AdminStatsSalonUpdates()
        {
            int Result = GetDBCount("SELECT COUNT(r.USERID) FROM WS_SALON_UPDATES r");

            return (Result);
        }

        internal static int AdminStatsTickets(Enums.TicketStatus Option)
        {
            int Result = 0;
            string SQL = "";

            switch (Option)
            {
                case Enums.TicketStatus.Closed:
                    SQL = "SELECT a.TICKETCOUNT FROM VW_TICKETSTATS a WHERE a.TICKETSTATUS = 'Closed';";
                    break;
                case Enums.TicketStatus.OnHold:
                    SQL = "SELECT a.TICKETCOUNT FROM VW_TICKETSTATS a WHERE a.TICKETSTATUS = 'On Hold';";
                    break;
                case Enums.TicketStatus.Open:
                    SQL = "SELECT a.TICKETCOUNT FROM VW_TICKETSTATS a WHERE a.TICKETSTATUS = 'Open';";
                    break;
                default:
                    throw new Exception("Invalid Option");
            }

            Result = GetDBCount(SQL);
            return (Result);
        }

        #endregion Admin Stats

        #region Admin Helpdesk

        internal static SupportTicket AdminHelpdeskSupportTicketGet(string ticketKey)
        {
            SupportTicket Result = null;

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                        "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE a.TICKET_KEY = @KEY";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@KEY", FbDbType.VarChar, 10, ticketKey);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTicket AdminHelpdeskSupportTicketGet(int ID)
        {
            SupportTicket Result = null;

            // load the ticket details
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                        "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE a.TICKET_ID = {0}", ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SupportTicket AdminHelpdeskSupportTicketGet(int ID, FbConnection db, FbTransaction tran)
        {
            SupportTicket Result = null;

            // load the ticket details
            string SQL = String.Format("SELECT a.TICKET_KEY, a.LAST_UPDATED, a.LAST_REPLIER, a.SUBJECT, a.DEPARTMENT, a.STATUS, a.PRIORITY, " +
                "a.TICKET_ID, CREATED, CREATED_BY, CREATED_EMAIL FROM VW_TICKET_HEADER a WHERE a.TICKET_ID = {0}", ID);
            FbCommand cmd = new FbCommand(SQL, db, tran);

            FbDataReader rdr = cmd.ExecuteReader();

            if (rdr.Read())
            {
                Result = new SupportTicket(rdr.GetInt32(7), rdr.GetString(0), rdr.GetDateTime(1), rdr.GetString(2), rdr.GetString(3),
                    rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetDateTime(8), rdr.GetString(9), rdr.GetString(10));
            }

            CloseAndDispose(ref cmd, ref rdr);

            return (Result);
        }

        internal static SupportTickets AdminHelpdeskSupportTicketsGet(bool OnHold, bool Closed, bool Open)
        {
            SupportTickets Result = new SupportTickets();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID FROM WS_TICKET_HEADER a {0} " +
                        "ORDER BY a.PRIORITY DESC, a.LAST_UPDATED", BuildHelpdeskWhereClause(OnHold, Closed, Open));

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try //date, type, description, status, total
                    {
                        while (rdr.Read())
                        {
                            Result.Add(AdminHelpdeskSupportTicketGet(rdr.GetInt32(0), db, tran));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }
                }
                finally
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static CustomerComment AdminHelpdeskCustomerCommentGet(int CommentID)
        {
            CustomerComment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CUST_COMMENTS_GET";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, CommentID);
                    AddParam(cmd, "@opID", FbDbType.Integer);
                    AddParam(cmd, "@opUSERID", FbDbType.Integer);
                    AddParam(cmd, "@opUSERNAME", FbDbType.VarChar);
                    AddParam(cmd, "@opUSER_COMMENTS", FbDbType.VarChar);
                    AddParam(cmd, "@opSHOW_ON_WEB", FbDbType.Char);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new CustomerComment(CommentID, rdr.IsDBNull(1) ? -1 : rdr.GetInt32(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetString(4) == "Y");
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminHelpdeskCustomerCommentUpdate(CustomerComment Comment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_CUST_COMMENTS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, Comment.ID);
                    AddParam(cmd, "@ipIPUSERID", FbDbType.Integer, Comment.UserID);
                    AddParam(cmd, "@IPUSERNAME", FbDbType.VarChar, 100, Comment.UserName);
                    AddParam(cmd, "@IPUSER_COMMENTS", FbDbType.VarChar, 10000, Comment.Comments);
                    AddParam(cmd, "@ipSHOW_ON_WEB", FbDbType.Char, 1, Comment.ShowOnWeb ? "Y" : "N");

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminHelpdeskCustomercommentDelete(CustomerComment comment)
        {
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    try
                    {
                        string SQL = "WSP_CUST_COMMENTS_DEL";
                        FbCommand cmd = new FbCommand(SQL, db, tran);
                        PrepareCommand(cmd);

                        AddParam(cmd, "@ipID", FbDbType.Integer, comment.ID);

                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);

                        tran.Commit();
                    }
                    catch
                    {
                        tran.Rollback();
                        throw;
                    }
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                Library.ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, comment);
                throw;
            }
        }

        internal static CustomerComments AdminHelpdeskCustomerCommentsGet(int PageNumber, int PageSize)
        {
            CustomerComments Result = new CustomerComments();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, OPUSERID, opUSERNAME, opUSER_COMMENTS, opSHOW_ON_WEB FROM WSP_CUST_COMMENTS_PAGE_ADMIN({1}, {0});", PageNumber, PageSize);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new CustomerComment(rdr.GetInt32(0), rdr.IsDBNull(1) ? -1 : rdr.GetInt32(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4) == "Y" ? true : false));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminHelpdeskCustomerCommentsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(ID) FROM WS_CUSTOMER_COMMENTS;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Helpdesk

        #region Admin Orders

        internal static Orders AdminOrdersGet(int UserID, int InvoiceID, bool TodayOnly, ProcessStatuses processStatuses)
        {
            Orders Result = new Orders();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.USERID, a.PURCHASEDATE, a.TOTALCOST, a.STATUS, a.SHIPPING_COSTS, a.DISCOUNT, " +
                        "a.PROCESS_STATUS, a.SHIPPING_ADDRESS, a.CONVERSION_RATE, a.VAT_RATE, a.CULTURE, a.DISCOUNT_AMMOUNT, a.VAT_AMMOUNT, " +
                        "a.COUPON_NAME, a.STORE_ID, a.TILL_ID, a.COST_MULTIPLIER, r.VOUCHERTYPE, " +
                        "r.VAT_REMOVED, r.ORIGINAL_COUNTRY, r.SHIPPING_REMOVE_TAX, r.LOCAL_ORDER_ID, r.INVOICE_VERSION, " +
                        "COALESCE(r.SUB_TOTAL, 0), COALESCE(r.OPTIONS, 0) " +
                        "FROM WS_INVOICE a {0}", BuildInvoceWhereClause(UserID, InvoiceID, TodayOnly, true, processStatuses));

                    // order by clause
                    SQL += " ORDER BY a.ID DESC ";

                    FbDataReader rdr = null;
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        rdr = cmd.ExecuteReader();

                        while (rdr.Read())
                        {
                            Result.Add(new Order(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetDateTime(2), rdr.GetDecimal(3),
                                PaymentStatusGet(db, tran, rdr.GetInt32(4)),
                                rdr.GetDecimal(5), rdr.IsDBNull(6) ? 0 : rdr.GetInt32(6), (ProcessStatus)rdr.GetInt32(7),
                                rdr.IsDBNull(8) ? -1 : rdr.GetInt32(8),
                                rdr.GetDouble(9), rdr.IsDBNull(10) ? -1 : rdr.GetDouble(10),
                                rdr.IsDBNull(11) ? "en-GB" : rdr.GetString(11), rdr.GetDecimal(12),
                                rdr.IsDBNull(13) ? -1 : rdr.GetDecimal(13), rdr.IsDBNull(14) ? "" : rdr.GetString(14),
                                rdr.GetInt32(15), rdr.GetInt32(16),
                                rdr.GetDouble(17), (Enums.InvoiceVoucherType)rdr.GetInt32(18),
                                rdr.IsDBNull(20) ? -1 : rdr.GetInt32(20),
                                rdr.IsDBNull(19) ? true : rdr.GetString(19) == "Y",
                                rdr.IsDBNull(21) ? false : rdr.GetString(21) == "Y",
                                rdr.IsDBNull(22) ? 0 : rdr.GetInt64(22), rdr.IsDBNull(23) ? 6 : rdr.GetInt32(23),
                                rdr.GetDecimal(24), (InvoiceOptions)rdr.GetInt64(25)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Orders

        #region Admin Products

        /// <summary>
        /// Returns all featured products
        /// </summary>
        /// <returns></returns>
        internal static SimpleStatistics AdminProductsStatsFeaturedProducts()
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "SELECT a.NAME, a.ID FROM WS_PRODUCTS a WHERE a.FEATURED_PRODUCT = 'Y' AND a.IS_DELETED = 'N'";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetInt32(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns Invalid SKU statistics
        /// </summary>
        /// <returns></returns>
        internal static SimpleStatistics AdminProductsStatsSKUInvalidCodes()
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "SELECT a.SKU, count(a.ID) FROM WS_PRODUCTS_COST_SIZE a WHERE a.IS_DELETED = 'N' " +
                        " AND (a.SKU = 'SKU' OR a.SKU = '') AND a.MEMBER_LEVEL <= 5 group by a.SKU order by 2 DESC";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MEMBER_LEVEL", FbDbType.BigInt, 0);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetInt32(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns Invalid SKU statistics
        /// </summary>
        /// <returns></returns>
        internal static SimpleStatistics AdminProductsStatsSKUDuplicateCodes()
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "SELECT a.SKU, count(a.ID) FROM WS_PRODUCTS_COST_SIZE a WHERE a.IS_DELETED = 'N' " +
                        "AND a.SKU <> '' AND a.SKU <> 'SKU' group by a.SKU HAVING count(a.ID) > 1 order by 2 DESC";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@MEMBER_LEVEL", FbDbType.BigInt, 0);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.GetInt32(1)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminProductsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_PRODUCTS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products AdminProductsGet(int PageNumber, int PageSize)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ppa.opID, ppa.opNAME, ppa.opDESCRIPTION, ppa.opSHOW_ON_WEB, ppa.opIMAGE, ppa.opSORT_ORDER, " +
                        "ppa.opSPECIAL_OFFER, ppa.opPRODUCT_GROUP, ppa.opPOPUPID, ppa.opSKU, ppa.opREGAL, ppa.opOUT_OF_STOCK, ppa.opBEST_SELLER, ppa.opNEW_PRODUCT, " +
                        "ppa.opFeatured, ppa.opCarousel, ppa.opFEATURES, ppa.opINGREDIENTS, ppa.opPRE_ORDER, ppa.opVIDEO_LiNK, ppa.opHOW_TO_USE, ppa.opPRIMARY_GROUP_TYPE, " +
                        "ppa.opFREE_SHIPPING, ppa.opPAGE_LINK, ppa.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_WS_PRODUCTS_PAGE_ADMIN({1}, {0}) ppa JOIN WS_PRODUCT_TYPE pt ON (pt.ID = ppa.opPRIMARY_GROUP_TYPE) " +
                        "ORDER BY ppa.opNAME;", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3) == 0,
                                rdr.GetString(4), rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)),
                                rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products AdminProductsGet(ProductGroup Group, string ProductName)
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ppa.opID, ppa.opNAME, ppa.opDESCRIPTION, ppa.opSHOW_ON_WEB, ppa.opIMAGE, ppa.opSORT_ORDER, " +
                        "ppa.opSPECIAL_OFFER, ppa.opPRODUCT_GROUP, ppa.opPOPUPID, ppa.opSKU, ppa.opREGAL, ppa.opOUT_OF_STOCK, ppa.opBEST_SELLER, ppa.opNEW_PRODUCT, " +
                        "ppa.opFeatured, ppa.opCarousel, ppa.opFEATURES, ppa.opINGREDIENTS, ppa.opPRE_ORDER, ppa.opVIDEO_LiNK, ppa.opHOW_TO_USE, ppa.opPRIMARY_GROUP_TYPE, " +
                        "ppa.opFREE_SHIPPING, ppa.opPAGE_LINK, ppa.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_WS_PRODUCTS_PAGE_ADMIN(1000, 1) ppa JOIN WS_PRODUCT_TYPE pt ON (pt.ID = ppa.opPRIMARY_GROUP_TYPE)";

                    string SQLWhere = " WHERE ";

                    if (Group != null && Group.ID >= 0)
                    {
                        SQLWhere += String.Format(" ppa.opPRODUCT_GROUP = {0}", Group.ID);
                    }

                    if (ProductName != String.Empty)
                    {
                        if (SQLWhere == " WHERE ")
                            SQLWhere += String.Format(" UPPER(ppa.opNAME) LIKE '%{0}%'", ProductName.ToUpper());
                        else
                            SQLWhere += String.Format(" AND UPPER(ppa.opNAME) LIKE '%{0}%'", ProductName.ToUpper());
                    }

                    if (SQLWhere != " WHERE ")
                        SQL += SQLWhere;

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3) == 0,
                                rdr.GetString(4), rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)),
                                rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Products AdminProductsGet()
        {
            Products Result = new Products();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ppa.opID, ppa.opNAME, ppa.opDESCRIPTION, ppa.opSHOW_ON_WEB, ppa.opIMAGE, ppa.opSORT_ORDER, " +
                        "ppa.opSPECIAL_OFFER, ppa.opPRODUCT_GROUP, ppa.opPOPUPID, ppa.opSKU, ppa.opREGAL, ppa.opOUT_OF_STOCK, ppa.opBEST_SELLER, ppa.opNEW_PRODUCT, " +
                        "ppa.opFEATURED, ppa.opCAROUSEL, ppa.opFEATURES, ppa.opINGREDIENTS, ppa.opPRE_ORDER, ppa.opVIDEO_LiNK, ppa.opHOW_TO_USE, " +
                        "ppa.opPRIMARY_GROUP_TYPE, ppa.opFREE_SHIPPING, ppa.opPAGE_LINK, ppa.opFREE_PRODUCT, pt.DESCRIPTION, pt.PRIMARY_TYPE  " +
                        "FROM WSP_WS_PRODUCTS_PAGE_ADMIN({1}, {0}) ppa JOIN WS_PRODUCT_TYPE pt ON (pt.ID = ppa.opPRIMARY_GROUP_TYPE) " +
                        "ORDER BY ppa.opNAME;", 1, 10000);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Product(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetInt32(3) == 0,
                                rdr.GetString(4), rdr.GetInt32(5), rdr.GetInt32(6) == 1, ProductGroupGet(db, tran, rdr.GetInt32(7)),
                                rdr.GetInt32(8), rdr.GetString(9), rdr.GetInt32(10) == 1, rdr.GetString(11) == "T",
                                rdr.GetString(12) == "Y", rdr.GetString(13) == "Y", rdr.GetString(14) == "Y", rdr.GetString(15) == "Y",
                                rdr.GetString(19), rdr.GetString(18) == "Y", rdr.GetString(16), rdr.GetString(17), rdr.GetString(20),
                                new ProductType(rdr.GetInt32(21), rdr.GetString(25), rdr.GetString(26) == "Y"), rdr.GetString(22) == "Y",
                                rdr.IsDBNull(23) ? String.Empty : rdr.GetString(23), rdr.GetString(24) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Product AdminProductInsert(string ProductName, ProductType productType, ProductGroup group)
        {
            Product Result;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO WS_PRODUCTS (NAME, DESCRIPTION, SHOW_ON_WEB, IMAGE, SORT_ORDER, " +
                        "SPECIAL_OFFER, PRODUCT_GROUP, POPUP_ID, REGAL, PRIMARY_GROUP_TYPE) " +
                        "VALUES (@PRODUCTNAME, '', 1, '', 100, 0, {1}, 0, 0, {0});",
                        productType.ID, group.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@PRODUCTNAME", FbDbType.VarChar, 200, ProductName);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            int ProductID = -1;

            tran = null;
            db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "select gen_id(GEN_WS_PRODUCTS_ID, 0) from RDB$DATABASE;";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        ProductID = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
            Result = ProductGet(ProductID);

            return (Result);
        }

        internal static void AdminProductUpdate(Product product)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_PRODUCTS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, product.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 200, product.Name);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 4000, product.Description);
                    AddParam(cmd, "@ipSHOW_ON_WEB", FbDbType.Integer, product.ShowOnWebsite ? 0 : 1);
                    AddParam(cmd, "@IPIMAGE", FbDbType.VarChar, 300, product.Image);
                    AddParam(cmd, "@IPSORT_ORDER", FbDbType.Integer, product.SortOrder);
                    AddParam(cmd, "@IPSPECIAL_OFFER", FbDbType.Integer, product.SpecialOffer ? 1 : 0);
                    AddParam(cmd, "@IPPOPUP_ID", FbDbType.Integer, product.PopUpID);
                    AddParam(cmd, "@ipSKU", FbDbType.VarChar, 15, product.SKU);
                    AddParam(cmd, "@ipREGAL", FbDbType.Integer, product.Regal ? 1 : 0);
                    AddParam(cmd, "@ipOUTOFSTOCK", FbDbType.Char, 1, product.OutOfStock ? "T" : "F");
                    AddParam(cmd, "@ipBEST_SELLER", FbDbType.Char, 1, product.BestSeller ? "Y" : "N");
                    AddParam(cmd, "@ipNEW_PRODUCT", FbDbType.Char, 1, product.NewProduct ? "Y" : "N");
                    AddParam(cmd, "@ipFEATURED", FbDbType.Char, 1, product.Featured ? "Y" : "N");
                    AddParam(cmd, "@ipCAROUSEL", FbDbType.Char, 1, product.Carousel ? "Y" : "N");
                    AddParam(cmd, "@ipPrimaryGroup", FbDbType.Integer, product.PrimaryGroup.ID);
                    AddParam(cmd, "@IPFEATURES", FbDbType.VarChar, 2000, product.Features);
                    AddParam(cmd, "@IPINGREDIENTS", FbDbType.VarChar, 2000, product.Ingredients);
                    AddParam(cmd, "@IPPRE_ORDER", FbDbType.Char, 1, product.PreOrder ? "Y" : "N");
                    AddParam(cmd, "@IPVIDEO_LINK", FbDbType.VarChar, 1000, product.VideoLink);
                    AddParam(cmd, "@IPHOW_TO_USE", FbDbType.VarChar, 2000, product.HowToUse);
                    AddParam(cmd, "@PRIMARY_GROUP_TYPE", FbDbType.Integer, product.PrimaryProduct.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    string currentIndexes = String.Empty;
                    bool first = true;

                    foreach (ProductGroup group in product.ProductGroups)
                    {
                        if (first)
                        {
                            currentIndexes += group.ID.ToString();
                            first = false;
                        }
                        else
                        {
                            currentIndexes += String.Format(",{0}", group.ID.ToString());
                        }
                    }

                    if (!String.IsNullOrEmpty(currentIndexes))
                    {
                        SQL = String.Format("DELETE FROM WS_PRODUCT_TO_PRODUCT_GROUP a WHERE a.PRODUCT_ID = {0} AND a.GROUP_ID NOT IN ({1})", product.ID, currentIndexes);
                        cmd = new FbCommand(SQL, db, tran);
                        cmd.ExecuteNonQuery();

                        CloseAndDispose(ref cmd);
                    }


                    foreach (ProductGroup group in product.ProductGroups)
                    {
                        try
                        {
                            SQL = String.Format("EXECUTE BLOCK AS BEGIN IF (NOT EXISTS(SELECT a.PRODUCT_ID, a.GROUP_ID, " +
                                "a.ID FROM WS_PRODUCT_TO_PRODUCT_GROUP a WHERE a.PRODUCT_ID = {0} AND a.GROUP_ID = {1})) THEN " +
                                "BEGIN INSERT INTO WS_PRODUCT_TO_PRODUCT_GROUP (PRODUCT_ID, GROUP_ID) VALUES ({0}, {1}); " +
                                "END END", product.ID, group.ID);
                            cmd = new FbCommand(SQL, db, tran);
                            cmd.ExecuteNonQuery();

                            CloseAndDispose(ref cmd);
                        }
                        catch (Exception err)
                        {
                            if (!err.Message.Contains("attempt to store duplicate value") && !err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint"))
                                throw;
                        }
                    }

                    tran.Commit();
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminProductDelete(Product product)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("DELETE FROM WS_PRODUCTS_COST_SIZE WHERE PRODUCT_ID = {0};", product.ID);
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = String.Format("DELETE FROM WS_PRODUCTS WHERE ID = {0};", product.ID);
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }


        /// <summary>
        /// Removes a product from all lists by changing to is_deleted true (soft delete)
        /// </summary>
        /// <param name="product">Product to be soft deleted</param>
        internal static void AdminProductSoftDelete(Product product)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_PRODUCTS SET IS_DELETED = 'Y' WHERE ID = {0};", product.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }



        #endregion Admin Products

        #region Admin Product Groups

        internal static ProductGroups AdminProductGroupsGet(int PageNumber, int PageSize)
        {
            ProductGroups Result = new ProductGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, pg.URL, " +
                        "pg.PRIMARY_GROUP_TYPE, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION,  " +
                        "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP pg JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                        "ORDER BY pg.SORT_ORDER;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(8), rdr.GetString(11)), rdr.GetString(9), rdr.GetString(10),
                                rdr.GetString(12), rdr.GetString(13) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroups AdminProductGroupsGet(Product product)
        {
            ProductGroups Result = new ProductGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.ID, a.DESCRIPTION, a.SORT_ORDER, a.TAGLINE, a.SHOW_ON_WEBSITE, a.MEMBER_LEVEL, " +
                        "a.URL, a.PRIMARY_GROUP_TYPE, GROUP_TYPE, HEADER_MAIN_TEXT, HEADER_SUB_TEXT, pgt.DESCRIPTION,  " +
                        "a.MOBILE_IMAGE, a.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP a JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = a.GROUP_TYPE) " +
                        "INNER JOIN WS_PRODUCT_TO_PRODUCT_GROUP ppg ON (ppg.GROUP_ID = a.ID) WHERE ppg.PRODUCT_ID = {0}", product.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(8), rdr.GetString(11)), rdr.GetString(9), rdr.GetString(10),
                                rdr.GetString(12), rdr.GetString(13) == "Y"));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminProductGroupsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_PRODUCT_GROUP;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static ProductGroup AdminProductGroupCreate(string Description, int productGroupType)
        {
            ProductGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT OPNEWID FROM WSP_WS_PRODUCT_GROUP_INS (@DESCRIPTION, 100)";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, Description);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new ProductGroup(rdr.GetInt32(0), Description, 100, "", false,
                            MemberLevel.StandardUser, "",
                            ProductGroupTypeGet(productGroupType), String.Empty, String.Empty,
                            String.Empty, false);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static void AdminProductGroupDelete(ProductGroup productGroup)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_PRODUCT_GROUP WHERE ID = {0};", productGroup.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }

        internal static void AdminProductGroupUpdate(ProductGroup productGroup)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_PRODUCT_GROUP SET DESCRIPTION = @DESCRIPTION, " +
                        "SORT_ORDER = @SORTORDER, TAGLINE = @TAGLINE, MEMBER_LEVEL = @MEMBER_LEVEL, SHOW_ON_WEBSITE = @SHOW_ON_WEB, " +
                        "URL = @URL, PRIMARY_GROUP_TYPE = @PRIMARYGROUP, HEADER_MAIN_TEXT = @HEADER_MAIN_TEXT, " +
                        "HEADER_SUB_TEXT = @HEADER_SUB_TEXT, GROUP_TYPE = @GROUP_TYPE, MOBILE_WEBSITE = @MOBILE_WEBSITE, " +
                        "MOBILE_IMAGE = @MOBILE_IMAGE  WHERE ID = {0};",
                        productGroup.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, productGroup.Description);
                    AddParam(cmd, "@SORTORDER", FbDbType.Integer, productGroup.SortOrder);
                    AddParam(cmd, "@TAGLINE", FbDbType.VarChar, 255, productGroup.TagLine);
                    AddParam(cmd, "@MEMBER_LEVEL", FbDbType.Integer, (int)productGroup.MemberLevel);
                    AddParam(cmd, "@SHOW_ON_WEB", FbDbType.VarChar, 1, productGroup.ShowOnWebsite ? "Y" : "N");
                    AddParam(cmd, "@URL", FbDbType.VarChar, 150, productGroup.URL);
                    AddParam(cmd, "@PRIMARYGROUP", FbDbType.Integer, productGroup.GroupType.ID);
                    AddParam(cmd, "@HEADER_MAIN_TEXT", FbDbType.VarChar, 100, productGroup.MainHeader);
                    AddParam(cmd, "@HEADER_SUB_TEXT", FbDbType.VarChar, 100, productGroup.SubHeader);
                    AddParam(cmd, "@GROUP_TYPE", FbDbType.Integer, productGroup.GroupType.ID);
                    AddParam(cmd, "@MOBILE_IMAGE", FbDbType.VarChar, 150, productGroup.MobileImage);
                    AddParam(cmd, "@MOBILE_WEBSITE", FbDbType.Char, 1, productGroup.MobileWebsite ? "Y" : "N");

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ProductGroup AdminProductGroupGet(int GroupID)
        {
            ProductGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, " +
                        "pg.URL, pg.PRIMARY_GROUP_TYPE, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION, " +
                        "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                        "FROM WS_PRODUCT_GROUP pg JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                        "WHERE pg.ID = {0};", GroupID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                                rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                                rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                                new ProductGroupType(rdr.GetInt32(8), rdr.GetString(11)), rdr.GetString(9),
                                rdr.GetString(10), rdr.GetString(12), rdr.GetString(13) == "Y");
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Product Groups

        #region Admin Treatment Groups

        internal static int AdminTreatmentGroupsCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_TREATMENT_GROUPS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TreatmentGroup AdminTreatmentGroupCreate(string description)
        {
            TreatmentGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT OPNEWID FROM WSP_WS_TREATMENT_GROUP_INS (@DESCRIPTION, 100)";
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, description);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new TreatmentGroup(rdr.GetInt32(0), description, 100, "");
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        internal static void AdminTreatmentGroupDelete(TreatmentGroup productGroup)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_TREATMENT_GROUPS WHERE ID = {0};", productGroup.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }

        internal static void AdminTreatmentGroupUpdate(TreatmentGroup productGroup)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_TREATMENT_GROUPS SET DESCRIPTION = @DESCRIPTION, " +
                        "SORT_ORDER = {1}, TAGLINE = @TAGLINE WHERE  ID = {0};",
                        productGroup.ID, productGroup.SortOrder);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@DESCRIPTION", FbDbType.VarChar, 100, productGroup.Description);
                    AddParam(cmd, "@TAGLINE", FbDbType.VarChar, 255, productGroup.TagLine);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static TreatmentGroup AdminTreatmentGroupGet(int GroupID)
        {
            TreatmentGroup Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, DESCRIPTION, SORT_ORDER, TAGLINE FROM WS_TREATMENT_GROUPS WHERE ID = {0};", GroupID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new TreatmentGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TreatmentGroups AdminTreatmentGroupsGet(Treatment treatment)
        {
            TreatmentGroups Result = new TreatmentGroups();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT tg.ID, tg.DESCRIPTION, tg.SORT_ORDER, tg.TAGLINE FROM WS_TREATMENT_GROUPS tg " +
                        "INNER JOIN WS_TREAT_TO_TREAT_GROUP ttg ON (ttg.GROUP_ID = tg.ID) WHERE ttg.TREATMENT_ID = {0};", treatment.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new TreatmentGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Treatment Groups

        #region admin Product Cost / Size

        /// <summary>
        /// Removes a product cost item from all lists by changing to is_deleted true (soft delete)
        /// </summary>
        /// <param name="product">Product to be soft deleted</param>
        internal static void AdminProductCostSoftDelete(ProductCost productCost)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE WS_PRODUCTS_COST_SIZE SET IS_DELETED = 'Y' WHERE ID = {0};", productCost.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        //[Obsolete("Should never Work !!!!")]
        //internal static ProductCost AdminProductCostGet(int ProductCostID)
        //{
        //    ProductCost Result = null;

        //    FbTransaction tran = null;
        //    FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
        //    try
        //    {
        //        try
        //        {
        //            string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
        //                "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, " +
        //                "pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, pcs.DISCOUNT_VALUE, " +
        //                "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING " +
        //                "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
        //                "WHERE pcs.ID = {0} AND pcs.IS_DELETED = 'N';", ProductCostID);
        //            FbCommand cmd = new FbCommand(SQL, db, tran);
        //            FbDataReader rdr = cmd.ExecuteReader();

        //            try
        //            {
        //                while (rdr.Read())
        //                {
        //                    Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
        //                        rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
        //                        new ProductCostType(rdr.GetInt32(7), rdr.GetString(18)),
        //                        rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
        //                        rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
        //                        rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
        //                        rdr.GetString(15) == "Y", rdr.GetInt32(16), rdr.GetInt32(17),
        //                        rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
        //                        rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
        //                }
        //            }
        //            finally
        //            {
        //                CloseAndDispose(ref cmd, ref rdr);
        //                tran.Rollback();
        //            }
        //        }
        //        catch
        //        {
        //            throw;
        //        }
        //    }
        //    finally
        //    {
        //        CloseAndDispose(ref db, ref tran);
        //    }

        //    return (Result);
        //}

        /// <summary>
        /// returns the Gift Wrap Product Cost Item
        /// </summary>
        /// <returns></returns>
        internal static ProductCost ProductCostGetGiftWrap()
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, " + //9
                        "pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, pcs.DISCOUNT_VALUE, " +
                        "pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, pct.DESCRIPTION, " +
                        "pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.IS_GIFTWRAP = 'T' AND pcs.IS_DELETED = 'N';";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new ProductCost(rdr.GetInt64(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminProductCostDelete(ProductCost ProductCostSize)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_PRODUCTS_COST_SIZE WHERE ID = {0} " +
                        "AND PRODUCT_ID = {1};",
                        ProductCostSize.ID, ProductCostSize.ProductID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminProductCostUpdate(ProductCost ProductCostSize)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("update WS_PRODUCTS_COST_SIZE set sku = @SKU, " +
                        "product_size = @PRODUCT_SIZE, product_cost = @PRODUCT_COST, OUT_OF_STOCK = @OUT_OF_STOCK, " +
                        "MEMBER_LEVEL = @MEMBER_LEVEL, PRODUCT_TYPE = @PRODUCT_TYPE, BARCODE = @BARCODE, " +
                        "HIDE_GLOBALLY = @HIDE_GLOBALLY, IS_GIFTWRAP = @IS_GIFTWRAP, PRODUCT_COST2 = @PRODUCT_COST2, " +
                        "PRODUCT_COST3 = @PRODUCT_COST3, DISCOUNT_VALUE = @DISCOUNT_VALUE, SAVING = @SAVING, " +
                        "ITEM_TYPE = @ITEMTYPE " +
                        "WHERE ID = {0} AND PRODUCT_ID = {1};",
                        ProductCostSize.ID, ProductCostSize.ProductID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        AddParam(cmd, "@SKU", FbDbType.VarChar, 10, ProductCostSize.SKU);
                        AddParam(cmd, "@PRODUCT_SIZE", FbDbType.VarChar, 60, ProductCostSize.Size);
                        AddParam(cmd, "@PRODUCT_COST", FbDbType.Double, ProductCostSize.Cost1);
                        AddParam(cmd, "@PRODUCT_COST2", FbDbType.Double, ProductCostSize.Cost2);
                        AddParam(cmd, "@PRODUCT_COST3", FbDbType.Double, ProductCostSize.Cost3);
                        AddParam(cmd, "@OUT_OF_STOCK", FbDbType.VarChar, 1, ProductCostSize.OutOfStock ? "T" : "F");
                        AddParam(cmd, "@MEMBER_LEVEL", FbDbType.Integer, (int)ProductCostSize.MemberLevel);
                        AddParam(cmd, "@PRODUCT_TYPE", FbDbType.Integer, ProductCostSize.ProductCostType.ID);
                        AddParam(cmd, "@BARCODE", FbDbType.VarChar, 50, ProductCostSize.Barcode);
                        AddParam(cmd, "@HIDE_GLOBALLY", FbDbType.Char, 1, ProductCostSize.HideGlobally ? "T" : "F");
                        AddParam(cmd, "@IS_GIFTWRAP", FbDbType.Char, 1, ProductCostSize.IsGiftWrapping ? "T" : "F");
                        AddParam(cmd, "@DISCOUNT_VALUE", FbDbType.Double, ProductCostSize.Discount);
                        AddParam(cmd, "@SAVING", FbDbType.Double, ProductCostSize.Saving);
                        AddParam(cmd, "@ITEMTYPE", FbDbType.Integer, (int)ProductCostSize.ItemType);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                        tran.Commit();
                    }
                }
                catch (Exception err)
                {
                    if (!err.Message.Contains("lock conflict on no wait transaction"))
                        ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ProductCostSize);

                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static ProductCost AdminProductCostCreate(Product product, string productItemName,
            ProductCostType costType)
        {
            ProductCost Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WS_PROD_COST_INS";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@PRODUCT_ID", FbDbType.BigInt, product.ID);
                    AddParam(cmd, "@PRODUCTNAME", FbDbType.VarChar, 60, productItemName);
                    AddParam(cmd, "@COST_TYPE_ID", FbDbType.Integer, costType.ID);
                    AddParam(cmd, "@ITEM_TYPE", FbDbType.Integer, (int)costType.ItemType);
                    AddParam(cmd, "@OPNEWID", FbDbType.BigInt);
                    AddParam(cmd, "@opSKU", FbDbType.VarChar);

                    cmd.ExecuteNonQuery();

                    Int64 newID = (Int64)cmd.Parameters["@opNEWID"].Value;
                    string sku = (string)cmd.Parameters["@opSKU"].Value;

                    Result = new ProductCost(newID, product, sku, productItemName, 0.00m, 6, false,
                        costType, String.Empty, false, false, 0.00m, 0.00m, 0.00m, String.Empty,
                        ProductCostItemType.Product, 0, 0,
                        Convert.ToDecimal(DALHelper.DefaultVATRate), 0.0);

                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, product, productItemName);
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Product Cost / Size

        #region Admin Tips and Tricks

        internal static int AdminTipsTricksCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(*) FROM WS_TIPS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TipsTrick AdminTipsTrickCreate(TipsTrick tip)
        {
            TipsTrick Result = tip;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_TIPS (NAME, DESCRIPTION) VALUES (@NAME, '')";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 150, tip.Name);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "select gen_id(GEN_WS_TIPS_ID, 0) from RDB$DATABASE;";
                FbDataReader rdr = null;
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result.ID = rdr.GetInt32(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminTipsTricksDelete(TipsTrick Tip)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_TIPS WHERE ID = {0};", Tip.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminTipsTricksUpdate(TipsTrick Tip)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_TIPS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, Tip.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, Tip.Name);
                    AddParam(cmd, "@ipSHOW_ON_WEB", FbDbType.Integer, Tip.ShowOnWeb ? 0 : 1);
                    AddParam(cmd, "@ipPOPUP_ID", FbDbType.Integer, Tip.PopUpID);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 8000, Tip.Description);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static TipsTrick AdminTipsTricksGet(int TipTrickID)
        {
            TipsTrick Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, NAME, SHOW_ON_WEB, POPUP_ID, DESCRIPTION FROM WS_TIPS WHERE ID = {0};", TipTrickID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new TipsTrick(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2) == 0, rdr.GetInt32(3), rdr.GetString(4));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static TipsTricks AdminTipsTricksGet(int PageNumber, int PageSize)
        {
            TipsTricks Result = new TipsTricks();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, OPNAME, opSHOW_ON_WEB, opPOPUPID, OPDESCRIPTION FROM WSP_WS_TIPS_PAGE_ADMIN ({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new TipsTrick(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2) == 0, rdr.GetInt32(3), rdr.GetString(4)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Tips and Tricks

        #region Admin Users

        internal static Users AdminUsersGet(MemberLevel MemberLevel)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE r.MEMBER_LEVEL >= {0} ORDER BY r.USERNAME", (int)MemberLevel);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users AdminUsersGetMassEmail(bool AdminOnly)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE r.RECEIVE_EMAIL_SPECIAL_OFFERS = 'T'";

                    if (AdminOnly)
                        SQL += " AND (r.MEMBER_LEVEL > 9) ";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users AdminUsersGetMassEmailProductItem(bool AdminOnly, int ProductID)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r WHERE (r.ID IN ( " +
                        "SELECT r.USERID FROM WS_INVOICE_ORDERS r where r.ORDER_ID in (select invoiceid from WS_INVOICE_ITEMS where ITEM_ID = {0}))) " +
                        "OR r.ID = 0 ", ProductID);

                    if (AdminOnly)
                        SQL += " AND (r.MEMBER_LEVEL > 9) ";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            Shared.Utilities.Decrypt(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminUsersGetCount()
        {
            int Result = 0;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(ID) FROM WS_MEMBERS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users AdminUsersGet(int PageNumber, int PageSize)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT OPID, OPUSERNAME, " +
                        "OPBUSINESSNAME FROM WSP_WS_MEMBERS_PAGE({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(UserGet(rdr.GetInt64(0)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }


            return (Result);
        }

        #endregion Admin Users

        #region Admin Invoices

        internal static int AdminInvoicesGetCount(int UserID, int InvoiceID, bool TodayOnly, ProcessStatuses processStatuses)
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT COUNT(*) " +
                        "FROM WS_INVOICE_ORDERS a {0}",
                        BuildInvoceWhereClause(UserID, InvoiceID, TodayOnly, true, processStatuses));

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static SimpleStatistics AdminInvoicesGetStats(int UserID, int InvoiceID, bool TodayOnly,
            ProcessStatuses processStatuses)
        {
            SimpleStatistics Result = new SimpleStatistics();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Reports);
            try
            {
                try
                {
                    string SQL = "WSP_INVOICEORDERS_TOTALS1";
                    string WhereClause = BuildInvoceWhereClause(UserID, InvoiceID, TodayOnly, true, processStatuses);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPWHERECLAUSE", FbDbType.VarChar, 1000, WhereClause);
                    AddParam(cmd, "@OPWEBSITE", FbDbType.VarChar);
                    AddParam(cmd, "@OPCOUNT", FbDbType.BigInt);
                    AddParam(cmd, "@OPSUM", FbDbType.Double);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new SimpleStatistic(rdr.GetString(0), rdr.IsDBNull(1) ? 0 : rdr.GetInt32(1), rdr.IsDBNull(2) ? 0.00m : rdr.GetDecimal(2)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices AdminInvoicesGet(int PageNumber, int PageSize, int UserID, int InvoiceID, bool TodayOnly,
            ProcessStatuses processStatuses)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_INVOICEORDERS_PAGE";
                    string WhereClause = BuildInvoceWhereClause(UserID, InvoiceID, TodayOnly, false, processStatuses);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@IPPAGESIZE", FbDbType.BigInt, PageSize);
                    AddParam(cmd, "@IPPAGENUMBER", FbDbType.BigInt, PageNumber);
                    AddParam(cmd, "@WHERECLAUSE", FbDbType.VarChar, 1000, WhereClause);
                    AddParam(cmd, "@OPINVOICEID", FbDbType.Integer);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(InvoiceGet(rdr.GetInt32(0), db, tran));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices AdminInvoicesGet(ProcessStatuses processStatuses, PaymentStatus PaymentStatus)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string InClause = "";

                    if (processStatuses.HasFlag(ProcessStatuses.OrderReceived))
                        InClause = AddToInClause(InClause, ProcessStatus.OrderReceived);

                    if (processStatuses.HasFlag(ProcessStatuses.Processing))
                        InClause = AddToInClause(InClause, ProcessStatus.Processing);

                    if (processStatuses.HasFlag(ProcessStatuses.Complete))
                        InClause = AddToInClause(InClause, ProcessStatus.Completed);

                    if (processStatuses.HasFlag(ProcessStatuses.Dispatched))
                    { 
                        InClause = AddToInClause(InClause, ProcessStatus.Dispatched);

                        if (!processStatuses.HasFlag(ProcessStatuses.Complete))
                            InClause = AddToInClause(InClause, ProcessStatus.Completed);
                    }

                    if (processStatuses.HasFlag(ProcessStatuses.Cancelled))
                        InClause = AddToInClause(InClause, ProcessStatus.Cancelled);

                    if (processStatuses.HasFlag(ProcessStatuses.OnHold))
                        InClause = AddToInClause(InClause, ProcessStatus.OnHold);

                    if (processStatuses.HasFlag(ProcessStatuses.IssueRefund))
                        InClause = AddToInClause(InClause, ProcessStatus.IssueRefund);

                    if (processStatuses.HasFlag(ProcessStatuses.PaymentPending))
                        InClause = AddToInClause(InClause, ProcessStatus.PaymentPending);

                    if (processStatuses.HasFlag(ProcessStatuses.VerifyingPayment))
                        InClause = AddToInClause(InClause, ProcessStatus.VerifyingPayment);

                    if (processStatuses.HasFlag(ProcessStatuses.PartialDispatch))
                        InClause = AddToInClause(InClause, ProcessStatus.PartialDispatch);

                    if (InClause.Length > 0)
                    {
                        InClause = String.Format("WHERE (r.PROCESS_STATUS IN ({0}))", InClause);

                        InClause += String.Format(" AND r.STATUS = {0}", PaymentStatus.ID);
                    }
                    else
                    {
                        InClause = String.Format("WHERE r.STATUS = {0}", PaymentStatus.ID);
                    }

                    string SQL = String.Format("SELECT FIRST 500 r.ID " +
                        "FROM WS_INVOICE_ORDERS r {0} ORDER BY r.PURCHASEDATE DESC", InClause);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(InvoiceGet(rdr.GetInt32(0), db, tran));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices AdminInvoicesGet(ProcessStatuses processStatuses, bool SortAscending, bool showCancelled)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string InClause = "";

                    if (processStatuses.HasFlag(ProcessStatuses.OrderReceived))
                        InClause = AddToInClause(InClause, ProcessStatus.OrderReceived);

                    if (processStatuses.HasFlag(ProcessStatuses.Processing))
                        InClause = AddToInClause(InClause, ProcessStatus.Processing);

                    if (processStatuses.HasFlag(ProcessStatuses.Complete))
                        InClause = AddToInClause(InClause, ProcessStatus.Completed);

                    if (processStatuses.HasFlag(ProcessStatuses.Dispatched))
                    {
                        InClause = AddToInClause(InClause, ProcessStatus.Dispatched);

                        if (!processStatuses.HasFlag(ProcessStatuses.Complete))
                            InClause = AddToInClause(InClause, ProcessStatus.Completed);
                    }

                    if (processStatuses.HasFlag(ProcessStatuses.Cancelled))
                        InClause = AddToInClause(InClause, ProcessStatus.Cancelled);

                    if (processStatuses.HasFlag(ProcessStatuses.OnHold))
                        InClause = AddToInClause(InClause, ProcessStatus.OnHold);

                    if (processStatuses.HasFlag(ProcessStatuses.IssueRefund))
                        InClause = AddToInClause(InClause, ProcessStatus.IssueRefund);

                    if (processStatuses.HasFlag(ProcessStatuses.PaymentPending))
                        InClause = AddToInClause(InClause, ProcessStatus.PaymentPending);

                    if (processStatuses.HasFlag(ProcessStatuses.VerifyingPayment))
                        InClause = AddToInClause(InClause, ProcessStatus.VerifyingPayment);

                    if (processStatuses.HasFlag(ProcessStatuses.PartialDispatch))
                        InClause = AddToInClause(InClause, ProcessStatus.PartialDispatch);

                    if (InClause.Length > 0)
                    {
                        InClause = String.Format("WHERE (r.PROCESS_STATUS IN ({0}))", InClause);
                    }

                    if (!showCancelled)
                    {
                        if (InClause.Contains("WHERE"))
                            InClause += " AND r.STATUS <> 10";
                        else
                            InClause = "WHERE r.STATUS <> 10";
                    }

                    string SQL = String.Format("SELECT FIRST 500 r.ID " +
                        "FROM WS_INVOICE_ORDERS r {0} ORDER BY r.PURCHASEDATE {1}", InClause, SortAscending ? "" : "DESC");
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(InvoiceGet(rdr.GetInt32(0), db, tran));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices AdminInvoicesGetAll(ProcessStatuses processStatuses)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string InClause = "";

                    if (processStatuses.HasFlag(ProcessStatuses.OrderReceived))
                        InClause = AddToInClause(InClause, ProcessStatus.OrderReceived);

                    if (processStatuses.HasFlag(ProcessStatuses.Processing))
                        InClause = AddToInClause(InClause, ProcessStatus.Processing);

                    if (processStatuses.HasFlag(ProcessStatuses.Complete))
                        InClause = AddToInClause(InClause, ProcessStatus.Completed);

                    if (processStatuses.HasFlag(ProcessStatuses.Dispatched))
                    { 
                        InClause = AddToInClause(InClause, ProcessStatus.Dispatched);

                        if (!processStatuses.HasFlag(ProcessStatuses.Complete))
                            InClause = AddToInClause(InClause, ProcessStatus.Completed);
                    }

                    if (processStatuses.HasFlag(ProcessStatuses.Cancelled))
                        InClause = AddToInClause(InClause, ProcessStatus.Cancelled);

                    if (processStatuses.HasFlag(ProcessStatuses.OnHold))
                        InClause = AddToInClause(InClause, ProcessStatus.OnHold);

                    if (processStatuses.HasFlag(ProcessStatuses.IssueRefund))
                        InClause = AddToInClause(InClause, ProcessStatus.IssueRefund);

                    if (processStatuses.HasFlag(ProcessStatuses.PaymentPending))
                        InClause = AddToInClause(InClause, ProcessStatus.PaymentPending);

                    if (processStatuses.HasFlag(ProcessStatuses.VerifyingPayment))
                        InClause = AddToInClause(InClause, ProcessStatus.VerifyingPayment);

                    if (processStatuses.HasFlag(ProcessStatuses.PartialDispatch))
                        InClause = AddToInClause(InClause, ProcessStatus.PartialDispatch);

                    if (InClause.Length > 0)
                    {
                        InClause = String.Format("WHERE (r.PROCESS_STATUS IN ({0}))", InClause);
                    }

                    string SQL = String.Format("SELECT r.ID " +
                        "FROM WS_INVOICE_ORDERS r {0} ORDER BY r.PURCHASEDATE DESC", InClause);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(InvoiceGet(rdr.GetInt32(0), db, tran));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Invoices AdminInvoicesGet(DateTime dateFrom, DateTime dateTo,
            ProcessStatuses processStatuses, int PaymentType, Coupon coupon, bool showCancelled)
        {
            Invoices Result = new Invoices();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string InClause = "";

                    if (processStatuses.HasFlag(ProcessStatuses.OrderReceived))
                        InClause = AddToInClause(InClause, ProcessStatus.OrderReceived);

                    if (processStatuses.HasFlag(ProcessStatuses.Processing))
                        InClause = AddToInClause(InClause, ProcessStatus.Processing);

                    if (processStatuses.HasFlag(ProcessStatuses.Complete))
                        InClause = AddToInClause(InClause, ProcessStatus.Completed);

                    if (processStatuses.HasFlag(ProcessStatuses.Dispatched))
                    { 
                        InClause = AddToInClause(InClause, ProcessStatus.Dispatched);

                        if (!processStatuses.HasFlag(ProcessStatuses.Complete))
                            InClause = AddToInClause(InClause, ProcessStatus.Completed);
                    }

                    if (processStatuses.HasFlag(ProcessStatuses.Cancelled))
                        InClause = AddToInClause(InClause, ProcessStatus.Cancelled);

                    if (processStatuses.HasFlag(ProcessStatuses.OnHold))
                        InClause = AddToInClause(InClause, ProcessStatus.OnHold);

                    if (processStatuses.HasFlag(ProcessStatuses.IssueRefund))
                        InClause = AddToInClause(InClause, ProcessStatus.IssueRefund);

                    if (processStatuses.HasFlag(ProcessStatuses.PaymentPending))
                        InClause = AddToInClause(InClause, ProcessStatus.PaymentPending);

                    if (processStatuses.HasFlag(ProcessStatuses.VerifyingPayment))
                        InClause = AddToInClause(InClause, ProcessStatus.VerifyingPayment);

                    if (processStatuses.HasFlag(ProcessStatuses.PartialDispatch))
                        InClause = AddToInClause(InClause, ProcessStatus.PartialDispatch);

                    if (InClause.Length > 0)
                    {
                        InClause = String.Format("WHERE (r.PROCESS_STATUS IN ({0})) AND ", InClause);
                    }
                    else
                    {
                        InClause = "WHERE ";
                    }


                    if (dateTo == DateTime.MinValue)
                    {
                        InClause += String.Format("(CAST(r.PURCHASEDATE AS DATE) = '{0}')", dateFrom.ToString("dd.MM.yyyy"));
                    }
                    else
                    {
                        InClause += String.Format("(CAST(r.PURCHASEDATE AS DATE) BETWEEN '{0}' AND '{1}')", dateFrom.ToString("dd.MM.yyyy"), dateTo.ToString("dd.MM.yyyy"));
                    }

                    if (PaymentType > -1)
                        InClause += String.Format(" AND (r.STATUS = {0})", PaymentType);

                    if (coupon != null)
                    {
                        if (coupon.Discount == 0)
                            InClause += String.Format(" AND (r.DISCOUNT > 0)");
                        else
                            InClause += String.Format(" AND (r.COUPON_NAME = @COUPONNAME)", coupon.Name);
                    }
                    //else
                    //{
                    //    InClause += " AND (r.DISCOUNT = 0 OR r.DISCOUNT > 0)";
                    //}

                    if (!showCancelled)
                    {
                        if (InClause.Contains("WHERE"))
                            InClause += " AND r.STATUS <> 10";
                        else
                            InClause = "WHERE r.STATUS <> 10";
                    }
                    else
                    {
                        if (InClause.Contains("WHERE"))
                            InClause += " OR r.STATUS = 10";
                        else
                            InClause = "WHERE r.STATUS = 10";
                    }

                    string SQL = String.Format("SELECT FIRST 500 r.ID " +
                        "FROM WS_INVOICE_ORDERS r {0} ORDER BY r.PURCHASEDATE DESC", InClause);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    if (coupon != null && coupon.Discount > 0)
                        AddParam(cmd, "@COUPONNAME", FbDbType.VarChar, 30, coupon.Name);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(InvoiceGet(rdr.GetInt32(0), db, tran));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Invoices

        #region Admin Treatments

        internal static Treatment AdminTreatmentGet(int TreatmentID)
        {
            Treatment Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.NAME, r.PRICE, r.TREATMENT_LENGTH, r.DESCRIPTION, r.IMAGE, r.URL, " +
                        "r.SORT_ORDER, r.DURATION, r.SPA_DAY FROM WS_TREATMENTS r WHERE r.ID = {0}", TreatmentID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result = new Treatment(rdr.GetInt32(0),
                                rdr.GetString(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetInt32(7), rdr.IsDBNull(8) ? 0 : rdr.GetInt32(8),
                                rdr.GetString(9) == "Y");
                        }

                        CloseAndDispose(ref cmd, ref rdr);
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminTreatmentDelete(Treatment treatment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_TREATMENTS WHERE ID = {0};", treatment.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Treatment AdminTreatmentCreate(Treatment treatment)
        {
            Treatment Result = treatment;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_TREATMENTS (NAME, PRICE, TREATMENT_LENGTH, DESCRIPTION, IMAGE, URL, SORT_ORDER) " +
                    "VALUES ('@TREATMENTNAME', '', '', '', '', '', 100)";

                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@TREATMENTNAME", FbDbType.VarChar, 255, treatment.Name);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "select gen_id(GEN_TREATMENTS_ID, 0) from RDB$DATABASE;";
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result.ID = rdr.GetInt32(0);
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminTreatmentUpdate(Treatment treatment)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_TREATMENTS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, treatment.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 255, treatment.Name);
                    AddParam(cmd, "@ipPRICE", FbDbType.VarChar, 100, treatment.Price);
                    AddParam(cmd, "@ipTREATMENT_LENGTH", FbDbType.VarChar, 100, treatment.TreatmentLength);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 4000, treatment.Description);
                    AddParam(cmd, "@ipIMAGE", FbDbType.VarChar, 255, treatment.Image);
                    AddParam(cmd, "@ipURL", FbDbType.VarChar, 255, treatment.URL);
                    AddParam(cmd, "@ipSORT_ORDER", FbDbType.Integer, treatment.SortOrder);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Admin Treatments

        #region Admin Salon Owners

        internal static int AdminSalonOwnersCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(m.ID) FROM WS_MEMBERS m WHERE (m.SALONID IS NOT NULL) AND (m.SALONID > -1);";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Users AdminSalonOwnersGet(int PageNumber, int PageSize)
        {
            Users Result = new Users();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID from WSP_WS_SALON_USERS_PAGE({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(UserGet(rdr.GetInt64(0)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    string s = err.Message;
                    s += "afd";
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static User AdminSalonOwnerGet(Salon salon)
        {
            User Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT first 1 r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                        "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                        "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                        "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                        "FROM WS_MEMBERS r INNER JOIN WS_SALON_UPDATES su ON (su.USERID = r.ID) WHERE (su.SALONID = {0})", salon.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new User(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                            DecryptPassword(rdr.GetString(5)),
                            rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                            rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                            rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                            rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                            rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminSalonOwnerCreate(User user, Salon salon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_SALONS_TO_MEMBERS (SALON_ID, MEMBER_ID) VALUES (@SALON_ID, @MEMBER_ID);";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SALON_ID", FbDbType.BigInt, salon.ID);
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint \"PK_SALON_TO_MEMBERS_ID\""))
                    throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminSalonOwnerDelete(User user, Salon salon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_SALONS_TO_MEMBERS WHERE SALON_ID = @SALON_ID AND MEMBER_ID = @MEMBER_ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SALON_ID", FbDbType.BigInt, salon.ID);
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminDistributorOwnerCreate(User user, Distributor distributor)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_SALONS_TO_MEMBERS (SALON_ID, MEMBER_ID) VALUES (@SALON_ID, @MEMBER_ID);";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SALON_ID", FbDbType.BigInt, distributor.ID);
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("violation of PRIMARY or UNIQUE KEY constraint \"PK_SALON_TO_MEMBERS_ID\""))
                    throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminDistributorOwnerDelete(User user, Distributor distributor)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "DELETE FROM WS_SALONS_TO_MEMBERS WHERE SALON_ID = @SALON_ID AND MEMBER_ID = @MEMBER_ID;";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SALON_ID", FbDbType.BigInt, distributor.ID);
                    AddParam(cmd, "@MEMBER_ID", FbDbType.BigInt, user.ID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminSalonOwnerUpdateDelete(User user, Salon salon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_SALON_UPDATES_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipUSERID", FbDbType.Integer, user.ID);
                    AddParam(cmd, "@ipSALONID", FbDbType.Integer, salon.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminSalonOwnerUpdateMerge(User user, Salon salon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_SALON_UPDATES_MERGE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipUSERID", FbDbType.Integer, user.ID);
                    AddParam(cmd, "@ipSALONID", FbDbType.Integer, salon.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    string s = err.Message;
                    s += "adf";
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Salon AdminSalonOwnerUpdateGet(User user, Salon salon)
        {
            Salon Result = null;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.NAME, r.IMAGE, r.CONTACT_NAME, " +
                        "r.ADDRESS, r.TELEPHONE, r.FAX, r.EMAIL, r.URL, r.POSTCODE, r.OPENING_TIMES FROM WS_SALON_UPDATES r " +
                        "WHERE r.SALONID = {0} ", salon.ID);

                    if (user != null)
                        SQL += String.Format(" AND r.USERID = {0}", user.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        string SalonImage = "";
                        string URL = "";
                        string SalonName = "";
                        string Address = "";
                        string Postcode = "";
                        string Telephone = "";
                        string Fax = "";
                        string Email = "";
                        string ContactName = "";
                        string OpeningTimes = "";

                        UpdateVarIfNotEmpty(rdr.GetString(0), ref SalonName);
                        UpdateVarIfNotEmpty(rdr.GetString(1), ref SalonImage);
                        UpdateVarIfNotEmpty(rdr.GetString(2), ref ContactName);
                        UpdateVarIfNotEmpty(rdr.GetString(3), ref Address);
                        UpdateVarIfNotEmpty(rdr.GetString(4), ref Telephone);
                        UpdateVarIfNotEmpty(rdr.GetString(5), ref Fax);
                        UpdateVarIfNotEmpty(rdr.GetString(6), ref Email);
                        UpdateVarIfNotEmpty(rdr.GetString(7), ref URL);
                        UpdateVarIfNotEmpty(rdr.GetString(8), ref Postcode);
                        UpdateVarIfNotEmpty(rdr.GetString(9), ref OpeningTimes);

                        Result = new Salon(salon.ID, SalonName, SalonImage, ContactName, Address, Telephone, Fax, Email, URL, Postcode, OpeningTimes);
                    }
                    else
                        Result = new Salon(salon.ID, salon.Name, salon.Image, salon.ContactName, salon.Address, salon.Telephone, salon.Fax, salon.Email, salon.URL, salon.PostCode, salon.OpeningTimes);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminSalonOwnerUpdateInsert(User user, Salon salon)
        {
            //delete any existing updates
            try
            {
                AdminSalonOwnerUpdateDelete(user, salon);
            }
            catch (Exception e)
            {
                string Error = e.Message;

                if (Error.IndexOf("Not found in Table") > 1)
                {
                }
                else
                    throw;
            }

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_SALON_UPDATES_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipUSERID", FbDbType.Integer, user.ID);
                    AddParam(cmd, "@ipSALONID", FbDbType.Integer, salon.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, salon.Name);
                    AddParam(cmd, "@ipIMAGE", FbDbType.VarChar, 250, salon.Image);
                    AddParam(cmd, "@ipCONTACT_NAME", FbDbType.VarChar, 100, salon.ContactName);
                    AddParam(cmd, "@ipADDRESS", FbDbType.VarChar, 2000, salon.Address);
                    AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 100, salon.Telephone);
                    AddParam(cmd, "@ipFAX", FbDbType.VarChar, 100, salon.Fax);
                    AddParam(cmd, "@ipEMAIL", FbDbType.VarChar, 255, salon.Email);
                    AddParam(cmd, "@ipURL", FbDbType.VarChar, 250, salon.URL);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, salon.PostCode);
                    AddParam(cmd, "@OPENING_TIMES", FbDbType.VarChar, 250, salon.OpeningTimes);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static int AdminSalonOwnersUpdateCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_SALON_UPDATES;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons AdminSalonUpdatesGet(int PageNumber, int PageSize)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {

                    string SQL = String.Format("SELECT OPUSERID, OPSALONID, OPNAME, OPIMAGE, OPCONTACT_NAME, OPADDRESS, OPTELEPHONE, " +
                        "OPFAX, OPEMAIL, OPURL, OPPOSTCODE, opOPENING_TIMES FROM WSP_WS_SALON_UPDATES_PAGE ({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(rdr.GetInt32(0), rdr.GetInt32(1), rdr.GetString(2), rdr.GetString(3), rdr.GetString(4),
                                rdr.GetString(5), rdr.GetString(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10),
                                rdr.IsDBNull(11) ? String.Empty : rdr.GetString(11)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Salon Owners

        #region Admin Salons

        internal static Salons AdminSalonsGet(string SalonName)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, OPSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE_ADMIN({1}, {0}) " +
                        "WHERE LOWER(opNAME) LIKE '%{2}%'", 1, 10000, SalonName.ToLower());
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons AdminSalonsGetUnassigned()
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT a.ID, a.NAME, a.IMAGE, a.CONTACT_NAME, a.ADDRESS, a.TELEPHONE, a.FAX, a.EMAIL, a.URL, " +
                        "a.SALON_STOCKIST, a.LOCATION, a.SORT_ORDER, a.POSTCODE, a.VIP, a.SHOW_ON_WEB, a.SALON_TYPE, a.OPENING_TIMES " +
                        "FROM WS_SALONS a WHERE a.ID NOT IN (SELECT SALON_ID FROM WS_SALONS_TO_MEMBERS) AND a.SHOW_ON_WEB = 0 ORDER BY a.NAME";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons AdminSalonsGet()
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE_ADMIN({1}, {0});", 1, 10000);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false,
                                rdr.GetInt32(14) == 0 ? true : false, (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salons AdminSalonsGet(int PageNumber, int PageSize)
        {
            Salons Result = new Salons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opNAME, opIMAGE, opCONTACT_NAME, opADDRESS, opTELEPHONE, opFAX, opEMAIL, opURL, " +
                        "opSALON_STOCKIST, opLOCATION, opSORT_ORDER, opPOSTCODE, opVIP, opSHOWONWEB, opSALON_TYPE, " +
                        "opOPENING_TIMES FROM WSP_WS_SALONS_PAGE_ADMIN({1}, {0});", PageNumber, PageSize);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetInt32(14) == 0 ? true : false,
                                (Enums.SalonType)rdr.GetInt32(15),
                                rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Salon AdminSalonGet(int SalonID)
        {
            Salon Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, NAME, IMAGE, CONTACT_NAME, ADDRESS, TELEPHONE, FAX, EMAIL, URL, " +
                        "SALON_STOCKIST, LOCATION, SORT_ORDER, POSTCODE, VIP, SHOW_ON_WEB, SALON_TYPE, OPENING_TIMES " +
                        "FROM WS_SALONS WHERE ID = {0} AND SALON_TYPE IN (0, 1);", SalonID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Salon(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetInt32(14) == 0 ? true : false,
                                (Enums.SalonType)rdr.GetInt32(15), rdr.IsDBNull(16) ? String.Empty : rdr.GetString(16));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminSalonDelete(Salon salon)
        {
            //db.ExecSQL();
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_SALONS WHERE ID = {0};", salon.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminSalonUpdate(Salon salon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_SALONS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, salon.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, salon.Name);
                    AddParam(cmd, "@ipIMAGE", FbDbType.VarChar, 250, salon.Image);
                    AddParam(cmd, "@ipCONTACT_NAME", FbDbType.VarChar, 100, salon.ContactName);
                    AddParam(cmd, "@ipADDRESS", FbDbType.VarChar, 2000, salon.Address);
                    AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 100, salon.Telephone);
                    AddParam(cmd, "@ipFAX", FbDbType.VarChar, 100, salon.Fax);
                    AddParam(cmd, "@ipEMAIL", FbDbType.VarChar, 255, salon.Email);
                    AddParam(cmd, "@ipURL", FbDbType.VarChar, 250, salon.URL);
                    AddParam(cmd, "@ipLOCATION", FbDbType.Integer, salon.Location);
                    AddParam(cmd, "@ipSHOW_ON_WEB", FbDbType.Integer, salon.ShowOnWeb ? 0 : 1);
                    AddParam(cmd, "@ipSORT_ORDER", FbDbType.Integer, salon.SortOrder);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, salon.PostCode);
                    AddParam(cmd, "@ipVIPSALON", FbDbType.Char, 1, BoolToStr(salon.VIPSalon));
                    AddParam(cmd, "@ipSALON_TYPE", FbDbType.Integer, (int)salon.SalonType);
                    AddParam(cmd, "@ipOPENING_TIMES", FbDbType.VarChar, 250, salon.OpeningTimes);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    Library.ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, salon);
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Salon AdminSalonCreate(string SalonName, Enums.SalonType SalonType)
        {
            Salon Result = new Salon(-1, SalonName, String.Empty, String.Empty, String.Empty, String.Empty,
                String.Empty, String.Empty, String.Empty, String.Empty, String.Empty);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_SALONS (NAME, IMAGE, CONTACT_NAME, ADDRESS, " +
                    "TELEPHONE, FAX, EMAIL, URL, SALON_STOCKIST, LOCATION, SALON_TYPE) " +
                    "VALUES (@SALONNAME, '', '', '', '', '', '', '', 1, 0, @SALONTYPE)";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@SALONNAME", FbDbType.VarChar, 150, SalonName);
                    AddParam(cmd, "@SALONTYPE", FbDbType.Integer, (int)SalonType);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "select gen_id(GEN_WS_SALONS_ID, 0) from RDB$DATABASE;";
                FbDataReader rdr = null;
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result.ID = rdr.GetInt32(0);
                        Result.SalonType = SalonType;
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminSalonCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT count(*) FROM WS_SALONS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Admin Salons

        #region Admin Missing Links

        internal static MissingLink AdminMissingLinkAdd(string DeprecatedLink, string ReplacementLink)
        {
            MissingLink Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MISSING_LINKS_INS";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMISSING_WEB_PAGE", FbDbType.VarChar, 150, DeprecatedLink);
                    AddParam(cmd, "@ipREPLACEMENT_WEB_PAGE", FbDbType.VarChar, 250, ReplacementLink);
                    AddParam(cmd, "@opID", FbDbType.BigInt);

                    cmd.ExecuteNonQuery();

                    Int64 NewID = (Int64)cmd.Parameters["@opID"].Value;

                    CloseAndDispose(ref cmd);

                    Result = new MissingLink(NewID, DeprecatedLink, "/");

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminMissingLinkUpdate(MissingLink missingLink)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MISSING_LINKS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMISSING_WEB_PAGE", FbDbType.VarChar, 150, missingLink.DeprecatedLink.ToUpper());
                    AddParam(cmd, "@ipREPLACEMENT_WEB_PAGE", FbDbType.VarChar, 250, missingLink.RedirectLink);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void AdminMissingLinkDelete(MissingLink missingLink)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_MISSING_LINKS_DEL";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMISSING_WEB_PAGE", FbDbType.VarChar, 150, missingLink.DeprecatedLink);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static MissingLink AdminMissingLinkGet(string DeprecatedLink)
        {
            MissingLink Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT REPLACEMENT_WEB_PAGE, ID FROM WS_MISSING_LINKS WHERE MISSING_WEB_PAGE = @PAGE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@PAGE", FbDbType.VarChar, 150, DeprecatedLink);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new MissingLink(rdr.GetInt64(1), DeprecatedLink, rdr.GetString(0));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static int AdminMissingLinkCount()
        {
            int Result = 1;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT COUNT(MISSING_WEB_PAGE) FROM WS_MISSING_LINKS;";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static MissingLinks AdminMissingLinksGet(int PageNumber, int PageSize)
        {
            MissingLinks Result = new MissingLinks();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT opID, opMISSING_WEB_PAGE, opREPLACEMENT_WEB_PAGE FROM WSP_MISSING_LINKS_PAGE({1}, {0}) ORDER BY opMISSING_WEB_PAGE;", PageNumber, PageSize);


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new MissingLink(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Missing Links

        #region Admin Distributors

        internal static Distributor AdminDistributorGet(int DistributorID)
        {
            Distributor Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT ID, NAME, IMAGE, CONTACT_NAME, ADDRESS, TELEPHONE, FAX, EMAIL, URL, " +
                        "SALON_STOCKIST, LOCATION, SORT_ORDER, POSTCODE, VIP, SHOW_ON_WEB, SALON_TYPE, OPENING_TIMES FROM WS_SALONS WHERE ID = {0} AND SALON_TYPE IN (2);", DistributorID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            Result = new Distributor(
                                rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                                rdr.GetString(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7),
                                rdr.GetString(8), rdr.GetInt32(9) == 0, rdr.GetInt32(10), rdr.GetInt32(11),
                                rdr.GetString(12), rdr.GetString(13) == "T" ? true : false, rdr.GetInt32(14) == 0 ? true : false,
                                (Enums.SalonType)rdr.GetInt32(15), rdr.GetString(16));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Distributors AdminDistributorsGet(int PageNumber, int PageSize)
        {
            return (DistributorsGet(PageNumber, PageSize));
        }

        internal static void AdminDistributorsDelete(Distributor distributor)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM WS_DISTRIBUTORS WHERE ID = {0};", distributor.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

        }

        internal static Distributor AdminDistributorsCreate(string Name)
        {
            Distributor Result = new Distributor(-1, Name, String.Empty, String.Empty, String.Empty, String.Empty,
                String.Empty, String.Empty, String.Empty, String.Empty, String.Empty);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_SALONS (NAME, IMAGE, CONTACT_NAME, ADDRESS, TELEPHONE, FAX, " +
                    "EMAIL, URL, SALON_STOCKIST, LOCATION, SALON_TYPE) " +
                    "VALUES (@NAME, '', '', '', '', '', '', '', 1, 0, 2)";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 150, Name);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "select gen_id(GEN_WS_SALONS_ID, 0) from RDB$DATABASE;";
                FbDataReader rdr = null;
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result.ID = rdr.GetInt32(0);
                        Result.SalonType = Enums.SalonType.Distributor;
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminDistributorsUpdate(Distributor distributor)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_SALONS_UPD";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.BigInt, distributor.ID);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 150, distributor.Name);
                    AddParam(cmd, "@ipIMAGE", FbDbType.VarChar, 250, distributor.Image);
                    AddParam(cmd, "@ipCONTACT_NAME", FbDbType.VarChar, 100, distributor.ContactName);
                    AddParam(cmd, "@ipADDRESS", FbDbType.VarChar, 2000, distributor.Address);
                    AddParam(cmd, "@ipTELEPHONE", FbDbType.VarChar, 100, distributor.Telephone);
                    AddParam(cmd, "@ipFAX", FbDbType.VarChar, 100, distributor.Fax);
                    AddParam(cmd, "@ipEMAIL", FbDbType.VarChar, 255, distributor.Email);
                    AddParam(cmd, "@ipURL", FbDbType.VarChar, 250, distributor.URL);
                    AddParam(cmd, "@ipLOCATION", FbDbType.Integer, distributor.Location);
                    AddParam(cmd, "@ipSHOW_ON_WEB", FbDbType.Integer, distributor.ShowOnWeb ? 0 : 1);
                    AddParam(cmd, "@ipSORT_ORDER", FbDbType.Integer, distributor.SortOrder);
                    AddParam(cmd, "@ipPOSTCODE", FbDbType.VarChar, 15, distributor.PostCode);
                    AddParam(cmd, "@ipVIPSALON", FbDbType.Char, 1, BoolToStr(distributor.VIPSalon));
                    AddParam(cmd, "@ipSALON_TYPE", FbDbType.Integer, (int)distributor.SalonType);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Admin Distributors

        #region Admin Coupons

        internal static int AdminCouponCount()
        {
            int Result = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(*) FROM WS_COUPONS;";
                FbCommand cmd = new FbCommand(SQL, db, tran);

                FbDataReader rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    Result = rdr.GetInt32(0);
                }

                CloseAndDispose(ref cmd, ref rdr);

                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Coupon AdminCouponGet(int CouponID)
        {
            Coupon Result = null;

            string SQL = String.Format("SELECT r.DISCOUNT_COUPON, r.EXPIRES, r.ISACTIVE, " +
                "r.DISCOUNT, r.FREE_PRODUCT_CODE, r.MAIN_PRODUCT_CODE, r.VOUCHER_TYPE, r.VOUCHER_USAGE, r.FREE_POSTAGE, " +
                "r.MAX_USAGE, r.MINIMUM_SPEND, r.MEMBER_ID, r.START_DATE_TIME, r.RESTRICT_USAGE " +
                "FROM WS_COUPONS r WHERE r.ID = {0}", CouponID);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Coupon(CouponID, rdr.GetString(0), rdr.GetDateTime(1),
                            rdr.GetInt32(2) == 0, rdr.GetInt32(3),
                            rdr.IsDBNull(4) ? null : ProductCosts.Get(rdr.GetInt32(4)),
                            rdr.IsDBNull(5) ? null : ProductCosts.Get(rdr.GetInt32(5)),
                            (Enums.InvoiceVoucherType)rdr.GetInt32(6), rdr.GetInt32(7),
                            rdr.GetString(8) == "Y", rdr.GetInt32(9), rdr.GetDecimal(10),
                            rdr.IsDBNull(11) ? -1 : rdr.GetInt64(11),
                            rdr.IsDBNull(12) ? rdr.GetDateTime(1).AddDays(-80) : rdr.GetDateTime(12),
                            rdr.IsDBNull(13) ? false : rdr.GetString(13) == "Y");
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Coupons AdminCouponsGet()
        {
            Coupons Result = new Coupons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT opID, opDISCOUNT_COUPON, opEXPIRES, opISACTIVE, opDISCOUNT, opFREE_PRODUCT, " +
                    "opMAIN_PRODUCT, opVoucher_type, opVoucher_Usage, opFREE_POSTAGE, opMAX_USAGE, opMIN_SPEND, opMEMBER_ID, " +
                    "opSTART_DATE_TIME, opRESTRICT_USAGE " +
                    "FROM WSP_WS_COUPONS_PAGE({1}, {0}) WHERE opMEMBER_ID IS NULL ORDER BY opDISCOUNT_COUPON;", 1, 10000);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Coupon(rdr.GetInt32(0), rdr.GetString(1), rdr.GetDateTime(2),
                            rdr.GetInt32(3) == 0, rdr.GetInt32(4),
                            rdr.IsDBNull(5) ? null : ProductCosts.Get(rdr.GetInt32(5)),
                            rdr.IsDBNull(6) ? null : ProductCosts.Get(rdr.GetInt32(6)),
                            (Enums.InvoiceVoucherType)rdr.GetInt32(7), rdr.GetInt32(8),
                            rdr.GetString(9) == "Y", rdr.GetInt32(10), rdr.GetDecimal(11),
                            rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.IsDBNull(13) ? rdr.GetDateTime(2).AddDays(-80) : rdr.GetDateTime(13),
                            rdr.IsDBNull(14) ? false : rdr.GetString(14) == "Y"));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Coupon AdminCouponGet(string CouponCode)
        {
            Coupon Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT opID, opDISCOUNT_COUPON, opEXPIRES, opISACTIVE, opDISCOUNT, opFREE_PRODUCT, " +
                    "opMAIN_PRODUCT, opVoucher_type, opVoucher_Usage, opFREE_POSTAGE, opMAX_USAGE, opMIN_SPEND, opMEMBER_ID, " +
                    "opSTART_DATE_TIME, opRESTRICT_USAGE " +
                    "FROM WSP_WS_COUPONS_PAGE({1}, {0}) WHERE UPPER(opDISCOUNT_COUPON) = @Coupon;", 1, 100000);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);

                try
                {
                    AddParam(cmd, "@Coupon", FbDbType.VarChar, 30, CouponCode.ToUpper());

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new Coupon(rdr.GetInt32(0), rdr.GetString(1), rdr.GetDateTime(2),
                            rdr.GetInt32(3) == 0, rdr.GetInt32(4),
                            rdr.IsDBNull(5) ? null : ProductCosts.Get(rdr.GetInt32(5)),
                            rdr.IsDBNull(6) ? null : ProductCosts.Get(rdr.GetInt32(6)),
                            (Enums.InvoiceVoucherType)rdr.GetInt32(7), rdr.GetInt32(8),
                            rdr.GetString(9) == "Y", rdr.GetInt32(10), rdr.GetDecimal(11),
                            rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.IsDBNull(13) ? rdr.GetDateTime(2).AddDays(-80) : rdr.GetDateTime(13),
                            rdr.IsDBNull(14) ? false : rdr.GetString(14) == "Y");
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }
        internal static Coupons AdminCouponsGet(int PageNumber, int PageSize)
        {
            Coupons Result = new Coupons();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT opID, opDISCOUNT_COUPON, opEXPIRES, opISACTIVE, opDISCOUNT, opFREE_PRODUCT, " +
                    "opMAIN_PRODUCT, opVoucher_type, opVoucher_Usage, opFREE_POSTAGE, opMAX_USAGE, opMIN_SPEND, opMEMBER_ID, " +
                    "opSTART_DATE_TIME, opRESTRICT_USAGE " +
                    "FROM WSP_WS_COUPONS_PAGE({1}, {0});", PageNumber, PageSize);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new Coupon(rdr.GetInt32(0), rdr.GetString(1),
                            rdr.GetDateTime(2), rdr.GetInt32(3) == 0,
                            rdr.GetInt32(4), rdr.IsDBNull(5) ? null : ProductCosts.Get(rdr.GetInt32(5)),
                            rdr.IsDBNull(6) ? null : ProductCosts.Get(rdr.GetInt32(6)),
                            (Enums.InvoiceVoucherType)rdr.GetInt32(7), rdr.GetInt32(8),
                            rdr.GetString(9) == "Y", rdr.GetInt32(10), rdr.GetDecimal(11),
                            rdr.IsDBNull(12) ? -1 : rdr.GetInt64(12),
                            rdr.IsDBNull(13) ? rdr.GetDateTime(2).AddDays(-80) : rdr.GetDateTime(13),
                            rdr.IsDBNull(14) ? false : rdr.GetString(14) == "Y"));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminCouponDelete(Coupon coupon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("DELETE FROM WS_COUPONS WHERE ID = {0}", coupon.ID);
                FbCommand cmd = new FbCommand(SQL, db, tran);

                cmd.ExecuteNonQuery();

                CloseAndDispose(ref cmd);

                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static Coupon AdminCouponCreate(string name, int value, User user, DateTime expires, DateTime startDate)
        {
            Coupon Result = new Coupon(-1, name, expires, true, value, null, null, Enums.InvoiceVoucherType.Value,
                0, false, 1, 0.00m, user.ID, startDate, false);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "INSERT INTO WS_COUPONS (DISCOUNT_COUPON, EXPIRES, PRODUCTSKU, ISACTIVE, DISCOUNT, FREE_PRODUCT_CODE, MAIN_PRODUCT_CODE, VOUCHER_USAGE, VOUCHER_TYPE, FREE_POSTAGE, MAX_USAGE, MINIMUM_SPEND, MEMBER_ID, START_DATE_TIME) " +
                        " VALUES (@NAME, @EXPIRES, NULL, 0, @DISCOUNT, -1, -1, 0, 1, 'N', 1, 0.00, @MEMBER, @STARTDATE);";

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    AddParam(cmd, "@NAME", FbDbType.VarChar, 30, name);
                    AddParam(cmd, "@EXPIRES", FbDbType.Date, expires);
                    AddParam(cmd, "@DISCOUNT", FbDbType.Integer, value);
                    AddParam(cmd, "@MEMBER", FbDbType.BigInt, user.ID);
                    AddParam(cmd, "@STARTDATE", FbDbType.TimeStamp, startDate);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();

                    tran = db.BeginTransaction(IsolationLevel.Snapshot);

                    SQL = "select gen_id(GEN_WS_COUPONS_ID, 0) from RDB$DATABASE;";
                    cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result.ID = rdr.GetInt32(0);

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Coupon AdminCouponCreate(string Name)
        {
            Coupon Result = new Coupon(Name);

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "INSERT INTO WS_COUPONS (DISCOUNT_COUPON, EXPIRES, " +
                    "PRODUCTSKU, ISACTIVE, DISCOUNT) VALUES (@NAME, CURRENT_TIMESTAMP, NULL, 1, 1);";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 30, Name);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }

                SQL = "select gen_id(GEN_WS_COUPONS_ID, 0) from RDB$DATABASE;";
                FbDataReader rdr = null;
                cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                        Result.ID = rdr.GetInt32(0);
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void AdminCouponUpdate(Coupon coupon)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_WS_COUPONS_UPD";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                PrepareCommand(cmd);

                AddParam(cmd, "@ipID", FbDbType.Integer, coupon.ID);
                AddParam(cmd, "@ipDISCOUNT_COUPON", FbDbType.VarChar, 30, coupon.Name);
                AddParam(cmd, "@ipEXPIRES", FbDbType.TimeStamp, coupon.Expires);
                AddParam(cmd, "@ipISACTIVE", FbDbType.Integer, coupon.IsActive ? 0 : 1);
                AddParam(cmd, "@ipDISCOUNT", FbDbType.Integer, coupon.Discount);
                AddParam(cmd, "@ipFreeProduct", FbDbType.BigInt, coupon.FreeProduct == null ? -1 : coupon.FreeProduct.ID);
                AddParam(cmd, "@ipMainProduct", FbDbType.BigInt, -1); // no longer used, as new methedoloy with linked table
                AddParam(cmd, "@ipVoucherType", FbDbType.Integer, (int)coupon.VoucherType);
                AddParam(cmd, "@ipFreePostage", FbDbType.Char, 1, coupon.FreePostage ? "Y" : "N");
                AddParam(cmd, "@ipMaxUsage", FbDbType.Integer, coupon.MaxUsage);
                AddParam(cmd, "@ipMinimumSpend", FbDbType.Double, coupon.MinimumSpend);
                AddParam(cmd, "@ipSTART_DATE_TIME", FbDbType.TimeStamp, coupon.StartDateTime);
                AddParam(cmd, "@ipRESTRICT_USAGE", FbDbType.Char, 1, coupon.RestrictUserUsage ? "Y" : "N");

                cmd.ExecuteNonQuery();

                CloseAndDispose(ref cmd);

                // are there any products that are not in required products list??
                bool first = true;
                string inClause = String.Empty;

                // add required products
                foreach (ProductCost item in coupon.RequiredProducts)
                {
                    SQL = String.Format("UPDATE OR INSERT INTO WS_COUPON_REQUIRED_PRODUCTS (COUPON_ID, PRODUCT_COST_SIZE_ID) " +
                        "VALUES ({0}, {1}) MATCHING (COUPON_ID, PRODUCT_COST_SIZE_ID);", coupon.ID, item.ID);
                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    if (!first)
                        inClause += ",";

                    inClause += item.ID.ToString();

                    first = false;
                }

                if (coupon.RequiredProducts.Count == 0 && String.IsNullOrEmpty(inClause))
                {
                    inClause = Int64.MinValue.ToString();
                }

                if (!String.IsNullOrEmpty(inClause))
                {
                    SQL = String.Format("DELETE FROM WS_COUPON_REQUIRED_PRODUCTS a WHERE a.COUPON_ID = {0} " +
                        "AND a.PRODUCT_COST_SIZE_ID NOT IN ({1});", coupon.ID, inClause);
                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }

                first = true;
                inClause = String.Empty;

                // add excluded products
                foreach (ProductCost item in coupon.ExcludedProducts)
                {
                    SQL = String.Format("UPDATE OR INSERT INTO WS_COUPON_EXCLUDED_PRODUCTS (COUPON_ID, PRODUCT_COST_SIZE_ID) " +
                        "VALUES ({0}, {1}) MATCHING (COUPON_ID, PRODUCT_COST_SIZE_ID);", coupon.ID, item.ID);
                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    if (!first)
                        inClause += ",";

                    inClause += item.ID.ToString();

                    first = false;
                }

                if (coupon.ExcludedProducts.Count == 0 && String.IsNullOrEmpty(inClause))
                {
                    inClause = Int64.MinValue.ToString();
                }

                if (!String.IsNullOrEmpty(inClause))
                {
                    SQL = String.Format("DELETE FROM WS_COUPON_EXCLUDED_PRODUCTS a WHERE a.COUPON_ID = {0} " +
                        "AND a.PRODUCT_COST_SIZE_ID NOT IN ({1});", coupon.ID, inClause);
                    cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }

                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Loads all products that are required by a coupon
        /// </summary>
        /// <param name="coupon">Coupon to load products for</param>
        internal static ProductCosts AdminCouponGetRequiredProducts(Coupon coupon)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, " +
                        "pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.MEMBER_LEVEL = 0 AND pcs.IS_DELETED = 'N' AND (pcs.ID IN (SELECT a.PRODUCT_COST_SIZE_ID " +
                        "FROM WS_COUPON_REQUIRED_PRODUCTS a WHERE a.COUPON_ID = @COUPON_ID));";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@COUPON_ID", FbDbType.Integer, coupon.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), null, rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, coupon);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns a list of products specifically excluded from the offer
        /// </summary>
        /// <param name="coupon"></param>
        /// <returns></returns>
        internal static ProductCosts AdminCouponGetExcludedProducts(Coupon coupon)
        {
            ProductCosts Result = new ProductCosts();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, pcs.PRODUCT_COST, " +
                        "pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                        "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, " +
                        "pcs.PRODUCT_COST3, " +
                        "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                        "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                        "WHERE pcs.MEMBER_LEVEL = 0 AND pcs.IS_DELETED = 'N' AND (pcs.ID IN (SELECT a.PRODUCT_COST_SIZE_ID " +
                        "FROM WS_COUPON_EXCLUDED_PRODUCTS a WHERE a.COUPON_ID = @COUPON_ID));";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@COUPON_ID", FbDbType.Integer, coupon.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new ProductCost(rdr.GetInt32(0), null, rdr.GetString(2),
                                rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                                rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                                rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                                rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                                (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                                rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                                rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, coupon);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Admin Coupons

        #region Database Specific

        internal static string AdminDatabaseVersion()
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT a.NAME_VALUE FROM WS_DATA a where a.NAME = 'Database Version';";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetString(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static string AdminDatabaseServer(bool attemptConnect)
        {
            string Result = "127.0.0.1";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);

            Result = db.DataSource;

            if (attemptConnect)
            {

                try
                {
                    Result = db.DataSource;
                }
                finally
                {
                    CloseAndDispose(ref db, ref tran);
                }
            }

            return (Result);
        }

        #endregion Database Specific

        #endregion Administration Functions

        #region Popup

        internal static string GetPopupData(int PopupID, out string Title)
        {
            string Result = "";
            Title = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT TITLE, DESCRIPTION FROM WS_POPUP_DATA WHERE ID = " + PopupID.ToString();
                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Title = rdr.GetString(0);
                        Result = rdr.GetString(1);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Popup

        #region Email

        internal static void EmailQueueStatistics(out Int64 QueueSize)
        {
            QueueSize = 0;
        }

        internal static Emails EmailsGet(bool IncludeSentEmail,
            Int16 MaxSendAttempts)
        {
            Emails result = new Emails();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_GET";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@opID", FbDbType.BigInt);
                    AddParam(cmd, "@opTO_NAME", FbDbType.VarChar);
                    AddParam(cmd, "@opTO_EMAIL", FbDbType.VarChar);
                    AddParam(cmd, "@opFROM_NAME", FbDbType.VarChar);
                    AddParam(cmd, "@opFROM_MAIL", FbDbType.VarChar);
                    AddParam(cmd, "@opSUBJECT", FbDbType.VarChar);
                    AddParam(cmd, "@opMESSAGE", FbDbType.Text); // Change to a BLOB Field
                    AddParam(cmd, "@opPRIORITY", FbDbType.Integer);
                    AddParam(cmd, "@opQUEUE_DATE", FbDbType.TimeStamp);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Int64 EmailID = rdr.GetInt64(0);
                        string Username = rdr.GetString(1);
                        string ToEmail = rdr.GetString(2);
                        string FromName = rdr.GetString(3);
                        string FromEmail = rdr.GetString(4);
                        string Subject = rdr.GetString(5);
                        string Message = rdr.GetString(6);
                        int Priority = rdr.GetInt32(7);
                        DateTime QueueDate = rdr.GetDateTime(8);

                        Email email = new Email(EmailID, Username, ToEmail, FromName,
                            FromEmail, Subject, Message, Priority, QueueDate);

                        result.Add(email);
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (result);
        }

        internal static void EmailMarkSent(Email email, string sendResult)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_SENT";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipEMAILID", FbDbType.BigInt, email.EmailID);
                    AddParam(cmd, "@ipipRESULT", FbDbType.Text, sendResult);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void EmailRecordSentAttempt(Email email, string sendResult)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_SENT_ATTEMPT";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipEMAILID", FbDbType.BigInt, email.EmailID);
                    AddParam(cmd, "@ipSEND_RESULT", FbDbType.Text, sendResult);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void EmailDeleteSent()
        {

        }

        internal static Int64 EmailAdd(MemberLevel memberLevel, bool SendToAboveMemberLevels, string Subject, string Message)
        {
            Int64 Result = 0;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_EMAIL_INSERT_MAIL_SHOT";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipMEMBER_LEVEL", FbDbType.Integer, (int)memberLevel);
                    AddParam(cmd, "@IPUPPER_LEVELS", FbDbType.Integer, SendToAboveMemberLevels ? 1 : 0);
                    AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 150, Subject);
                    AddParam(cmd, "@ipMESSAGE", FbDbType.Text, Message);
                    AddParam(cmd, "@opMESSAGESSENT", FbDbType.Integer, ParameterDirection.Output, 2);

                    cmd.ExecuteNonQuery();

                    Result = (int)cmd.Parameters["@opMESSAGESSENT"].Value;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static long EmailAdd(Country Country, string Subject, string Message)
        {
            Int64 Result = 0;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_MAIL_SHOT_COUNTRY";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipCOUNTRY", FbDbType.Integer, Country.ID);
                    AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 150, Subject);
                    AddParam(cmd, "@ipMESSAGE", FbDbType.Text, Message);
                    AddParam(cmd, "@opMESSAGESSENT", FbDbType.Integer, ParameterDirection.Output, 2);

                    cmd.ExecuteNonQuery();

                    Result = (int)cmd.Parameters["@opMESSAGESSENT"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Int64 EmailAdd(string ToName, string ToEMail, string FromName,
            string FromEMail, string Subject, string Message)
        {
            Int64 Result = -1;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_INSERT";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipTO_NAME", FbDbType.VarChar, 50, ToName);
                    AddParam(cmd, "@ipTO_EMAIL", FbDbType.VarChar, 100, ToEMail);
                    AddParam(cmd, "@ipFROM_NAME", FbDbType.VarChar, 50, FromName);
                    AddParam(cmd, "@ipFROM_EMAIL", FbDbType.VarChar, 100, FromEMail);
                    AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 150, Subject);
                    AddParam(cmd, "@ipMESSAGE", FbDbType.Text, Message);
                    AddParam(cmd, "@ipPRIORITY", FbDbType.Integer, 2);
                    AddParam(cmd, "@opNewID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    Result = (Int64)cmd.Parameters["@opNewID"].Value;

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Sends the same email to multiple users
        /// </summary>
        /// <param name="userList"></param>
        /// <param name="FromName"></param>
        /// <param name="FromEMail"></param>
        /// <param name="Subject"></param>
        /// <param name="Message"></param>
        /// <returns></returns>
        internal static Int64 EmailAdd(Users userList, string FromName,
            string FromEMail, string Subject, string Message)
        {
            Int64 Result = -1;
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_EMAIL_INSERT";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        PrepareCommand(cmd);

                        foreach (User user in userList)
                        {
                            cmd.Parameters.Clear();
                            AddParam(cmd, "@ipTO_NAME", FbDbType.VarChar, 50, user.UserName);
                            AddParam(cmd, "@ipTO_EMAIL", FbDbType.VarChar, 100, user.Email);
                            AddParam(cmd, "@ipFROM_NAME", FbDbType.VarChar, 50, FromName);
                            AddParam(cmd, "@ipFROM_EMAIL", FbDbType.VarChar, 100, FromEMail);
                            AddParam(cmd, "@ipSUBJECT", FbDbType.VarChar, 150, Subject);
                            AddParam(cmd, "@ipMESSAGE", FbDbType.Text, Message);
                            AddParam(cmd, "@ipPRIORITY", FbDbType.Integer, 2);
                            AddParam(cmd, "@opNewID", FbDbType.Integer);

                            cmd.ExecuteNonQuery();
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        #endregion Email

        #region Web Logging

#if WEB_LOGGING
        internal static void LogWebVisits(WebVisitLogItems items)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "WSP_WEB_LOG_INS_4";

                foreach (WebVisitLogItem item in items)
                {
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        PrepareCommand(cmd);

                        AddParam(cmd, "@ipDate", FbDbType.TimeStamp, item.Date);
                        AddParam(cmd, "@ipPLATFORM", FbDbType.VarChar, 255, item.Platform);
                        AddParam(cmd, "@ipBROWSERVERSION", FbDbType.VarChar, 255, item.BrowserVersion);
                        AddParam(cmd, "@ipISCRAWLER", FbDbType.VarChar, 255, item.IsCrawler);
                        AddParam(cmd, "@ipREMOTEHOST", FbDbType.VarChar, 255, item.RemoteHost);
                        AddParam(cmd, "@ipMETHOD", FbDbType.VarChar, 20, item.Method);
                        AddParam(cmd, "@ipPATH", FbDbType.VarChar, 255, item.Path);
                        AddParam(cmd, "@ipQUERY", FbDbType.VarChar, 500, 
                            item.Query.Length > 499 ? item.Query.Substring(0, 499) : item.Query);
                        AddParam(cmd, "@ipREFERER", FbDbType.VarChar, 255, item.Referer);
                        AddParam(cmd, "@ipSESSION", FbDbType.VarChar, 200, item.UserSession);
                        AddParam(cmd, "@ipCOUNTRY_CODE", FbDbType.VarChar, 10, item.Country);
                        AddParam(cmd, "@ipWEBSITE_ID", FbDbType.Integer, DALHelper.WebsiteID);
                        AddParam(cmd, "@opNEWID", FbDbType.Integer);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }

                tran.Commit();
                items.Clear();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void LogWebVisit(string Platform, string BrowserVersion, string IsCrawler,
            string RemoteHost, string Method, string Path, string Query,
            string Referer, string UserSession, string Country)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.SeoData);
            try
            {
                string SQL = "WSP_WEB_LOG_INS_3";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipPLATFORM", FbDbType.VarChar, 255, Platform);
                    AddParam(cmd, "@ipBROWSERVERSION", FbDbType.VarChar, 255, BrowserVersion);
                    AddParam(cmd, "@ipISCRAWLER", FbDbType.VarChar, 255, IsCrawler);
                    AddParam(cmd, "@ipREMOTEHOST", FbDbType.VarChar, 255, RemoteHost);
                    AddParam(cmd, "@ipMETHOD", FbDbType.VarChar, 20, Method);
                    AddParam(cmd, "@ipPATH", FbDbType.VarChar, 255, Path);
                    AddParam(cmd, "@ipQUERY", FbDbType.VarChar, 500, Query.Length > 499 ? Query.Substring(0, 499) : Query);
                    AddParam(cmd, "@ipREFERER", FbDbType.VarChar, 255, Referer);
                    AddParam(cmd, "@ipSESSION", FbDbType.VarChar, 200, UserSession);
                    AddParam(cmd, "@ipCOUNTRY_CODE", FbDbType.VarChar, 10, Country);
                    AddParam(cmd, "@ipWEBSITE_ID", FbDbType.Integer, DALHelper.WebsiteID);
                    AddParam(cmd, "@opNEWID", FbDbType.Integer);

                    cmd.ExecuteNonQuery();

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }
#endif

        /// <summary>
        /// Logs the website in the database if it isn't already
        /// </summary>
        /// <param name="websiteID"></param>
        /// <param name="url"></param>
        internal static void RegisterWebsite(int websiteID, string url)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_HEAVEN_WEBSITES_UPDATE";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipID", FbDbType.Integer, websiteID);
                    AddParam(cmd, "@ipDESCRIPTION", FbDbType.VarChar, 250, url);

                    cmd.ExecuteNonQuery();

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Web Logging

        #region Settings

        internal static Dictionary<string, string> SettingsLoad()
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT UPPER(NAME), NAME_VALUE FROM WS_DATA";

                FbCommand cmd = new FbCommand(SQL, db, tran);


                FbDataReader rdr = cmd.ExecuteReader();
                try
                {
                    while (rdr.Read())
                    {
                        Result.Add(rdr.GetString(0), rdr.GetString(1));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static bool SettingsExist(string name)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(NAME_VALUE) FROM WS_DATA WHERE UPPER(NAME) = @NAME";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                AddParam(cmd, "@NAME", FbDbType.VarChar, 50, name.ToUpper());

                FbDataReader rdr = cmd.ExecuteReader();
                try
                {
                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0) > 0;
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retreives settings from WS_DATA table
        /// </summary>
        /// <param name="Name">Name of Setting</param>
        /// <returns></returns>
        internal static string SettingsGet(string Name)
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT NAME_VALUE FROM WS_DATA WHERE UPPER(NAME) = @NAME";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 50, Name.ToUpper());

                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetString(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void SettingsSet(string Name, string Value)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_SET_DATA";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 50, Name.ToUpper());
                    AddParam(cmd, "@ipVALUE", FbDbType.VarChar, 1000, Value.Length > 999 ? Value.Substring(0, 999) : Value);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }


        internal static void SettingsSetMeta(string Name, string Value)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "WSP_SET_DATA";

                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    AddParam(cmd, "@ipNAME", FbDbType.VarChar, 50, Name.ToUpper());
                    AddParam(cmd, "@ipVALUE", FbDbType.VarChar, 1000, Value.Length > 999 ? Value.Substring(0, 999) : Value);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static string SettingsGetMeta(string Name)
        {
            string Result = "";

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT NAME_VALUE FROM WS_DATA WHERE UPPER(NAME) = @NAME";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                AddParam(cmd, "@NAME", FbDbType.VarChar, 50, Name.ToUpper());

                FbDataReader rdr = cmd.ExecuteReader();
                try
                {
                    if (rdr.Read())
                    {
                        Result = rdr.GetString(0);
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static bool SettingsExistMeta(string name)
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "SELECT COUNT(NAME_VALUE) FROM WS_DATA WHERE UPPER(NAME) = @NAME";
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@NAME", FbDbType.VarChar, 50, name.ToUpper());
                    rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = rdr.GetInt32(0) > 0;
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                tran.Rollback();
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Settings

        #region Missing Links

        internal static MissingLink MissingLinkGet(string DeprecatedLink)
        {
            MissingLink Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ID, REPLACEMENT_WEB_PAGE FROM WS_MISSING_LINKS WHERE MISSING_WEB_PAGE = @PAGE";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@PAGE", FbDbType.VarChar, 150, DeprecatedLink.ToUpper());

                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new MissingLink(rdr.GetInt64(0), DeprecatedLink, rdr.GetString(1));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Missing Links

        #region Stock Control

        //individual stores will all use till id = 1

        #region Stock History

        /// <summary>
        /// Retrieves history about a stock item
        /// </summary>
        /// <param name="stockItem">Item of Stock</param>
        /// <param name="location">Location of stock item</param>
        /// <param name="includeInternetSales">Should internet sales be included</param>
        /// <param name="includeStockAudit">Should stock audit entries be included</param>
        /// <returns>StockHistory collection</returns>
        internal static StockHistory StockHistoryGet(StockItem stockItem, StoreLocation location,
            bool includeInternetSales, bool includeStockAudit)
        {
            StockHistory Result = new StockHistory();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.STOCK_ID, a.USER_ID, m.USERNAME, a.QUANTITY, a.OUT_DATE, 'Stock Out - ' || hs.DESCRIPTION, a.REASON, 'STOCK OUT' " +
                        "FROM HS_STOCK_OUT a   LEFT JOIN WS_MEMBERS m ON (m.ID = a.USER_ID) LEFT JOIN STORES hs ON (hs.ID = a.STORE_ID) " +
                        "WHERE A.STOCK_ID = {0} AND a.STORE_ID = {1} UNION ALL SELECT a.STOCK_ID, a.USER_ID, m.USERNAME, a.QUANTITY, a.IN_DATE, " +
                        "'Stock In - ' || hs.DESCRIPTION, '', 'STOCK IN' FROM HS_STOCK_IN a LEFT JOIN WS_MEMBERS m ON (m.ID = a.USER_ID) " +
                        "LEFT JOIN STORES hs ON (hs.ID = a.STORE_ID) WHERE A.STOCK_ID = {0} AND a.STORE_ID = {1} " +
                        "UNION ALL SELECT ii.ITEM_ID, io.USERID, m.USERNAME, ii.QTY, io.PURCHASEDATE, hs.DESCRIPTION, 'Invoice: ' || io.ID, 'WS_INVOICE_ORDERS' " +
                        "FROM WS_INVOICE_ORDERS io LEFT JOIN WS_MEMBERS m ON (m.ID = io.USERID) LEFT JOIN WS_INVOICE_ITEMS II ON (II.INVOICEID = io.ORDER_ID) " +
                        "LEFT JOIN STORES hs ON (hs.ID = io.STORE_ID) WHERE ii.ITEM_ID = {0} AND io.STORE_ID = {1} AND io.PROCESS_STATUS NOT IN (0, 1) AND io.STATUS IN " +
                        "(SELECT a.ID FROM WS_PAYMENT_STATUS a WHERE a.STATUS_OFFICE = 'Y' and a.STATUS_ONLINE = 'N') ",
                        stockItem.ID, location.ID);

                    if (includeStockAudit)
                        SQL += String.Format("UNION ALL SELECT a.STOCK_ID, a.USER_ID, m.USERNAME, a.QUANTITY, a.CHECK_DATE, 'Stock Audit', 'Difference: ' || CAST(a.STOCK_DIFFERENCE AS VARCHAR(24)), 'STOCK AUDIT' " +
                            "FROM HS_STOCK_AUDIT a LEFT JOIN WS_MEMBERS m ON (m.ID = a.USER_ID) WHERE A.STOCK_ID = {0} AND a.STORE_ID = {1} ",
                            stockItem.ID, location.ID);

                    if (includeInternetSales)
                        SQL += String.Format("UNION ALL SELECT ii.ITEM_ID, io.USERID, m.USERNAME, ii.QTY, io.PURCHASEDATE, 'Internet', 'Invoice: ' || io.ID, 'WS_INVOICE_ORDERS' " +
                        "FROM WS_INVOICE_ORDERS io LEFT JOIN WS_MEMBERS m ON (m.ID = io.USERID) LEFT JOIN WS_INVOICE_ITEMS II ON (II.INVOICEID = io.ORDER_ID) " +
                        "WHERE ii.ITEM_ID = {0} AND io.STORE_ID = 0 AND io.PROCESS_STATUS = 2 ", stockItem.ID);

                    // sort by date descending
                    SQL += "ORDER BY 5 DESC";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockHistoryItem(stockItem, rdr.GetInt64(1), rdr.GetString(2), rdr.GetInt32(3),
                            rdr.GetDateTime(4), rdr.GetString(5), rdr.GetString(6), rdr.GetString(7)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, stockItem, location, includeInternetSales);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Retrieves history about a stock item
        /// </summary>
        /// <param name="stockItem">Item of Stock</param>
        /// <param name="location">Location of stock item</param>
        /// <param name="includeInternetSales">Should internet sales be included</param>
        /// <param name="includeStockAudit">Should stock audit entries be included</param>
        /// <returns>StockHistory collection</returns>
        internal static StockHistory StockHistoryGet(StockItem stockItem)
        {
            StockHistory Result = new StockHistory();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT ol.DATETIME, m.USERNAME, CAST(COALESCE(cl.OLD_VALUE, 0) AS INTEGER), " +
                        "CAST(COALESCE(cl.NEW_VALUE, 0) AS INTEGER) " +
                        "FROM REPLICATE$COLUMNLOG cl " +
                        "  JOIN REPLICATE$OPERATIONLOG ol on (ol.ID = cl.OPERATIONLOG_ID) " +
                        "  JOIN WS_MEMBERS m ON (LOWER(m.EMAIL) = LOWER(REPLACE(REPLACE(ol.USER_NAME, '$', '@'), '_', '.'))) " +
                        "  JOIN HS_STOCKCONTROL sc ON (sc.ID = ol.PKEY1_VALUE) " +
                        "WHERE ol.TABLE_NAME = 'HS_STOCKCONTROL' " +
                        "  AND cl.COLUMN_NAME = 'TOTAL_AVAILABLE' " +
                        "  and sc.ITEM_ID = @STOCKID ";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@STOCKID", FbDbType.BigInt, stockItem.ID);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockHistoryItem(rdr.GetDateTime(0), rdr.GetString(1), rdr.GetInt32(2), rdr.GetInt32(3)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch //(Exception err)
                {
                    tran.Rollback();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Stock History

        #region Build Stock

        internal static void StockCreate(StockItem stockCreated, User currentUser, int quantity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SP_CREATE_STOCK";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipSTOCK_BEING_CREATED", FbDbType.BigInt, stockCreated.ID);
                    AddParam(cmd, "@ipQUANTITY_CREATED", FbDbType.Integer, quantity);
                    AddParam(cmd, "@ipSTORE_ID", FbDbType.Integer, DALHelper.StoreID);
                    AddParam(cmd, "@ipUSER_ID", FbDbType.BigInt, currentUser.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);
                }
                finally
                {
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Retrieves a list of products used to build a productcost item
        /// </summary>
        /// <param name="costItem">ProductCost item</param>
        /// <returns>CreateStock collection</returns>
        internal static CreateStock StockCreateItemsGet(ProductCost costItem)
        {
            CreateStock Result = new CreateStock();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT a.SUB_PRODUCT_ID, a.QUANTITY FROM HS_STOCK_CREATE_SETTINGS a WHERE a.PRODUCT_ID = {0}", costItem.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new CreateStockItem((Int64)costItem.ID, rdr.GetInt64(0), rdr.GetDouble(1)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Rollback();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Deletes an item from product production
        /// </summary>
        /// <param name="primary">Primary ProductCost item</param>
        /// <param name="subItem">Sub ProductCost item</param>
        internal static void StockCreateItemsDelete(ProductCost primary, ProductCost subItem)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("DELETE FROM HS_STOCK_CREATE_SETTINGS a WHERE a.PRODUCT_ID = {0} AND a.SUB_PRODUCT_ID = {1}", primary.ID, subItem.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Creates a new sub item for product production
        /// </summary>
        /// <param name="primary">Primary ProductCost item</param>
        /// <param name="subItem">Sub ProductCost item</param>
        /// <param name="quantity">Quantity of sub items required</param>
        /// <returns>CreateStockItem</returns>
        internal static CreateStockItem StockCreateItemsAdd(ProductCost primary, ProductCost subItem, double quantity)
        {
            CreateStockItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("INSERT INTO HS_STOCK_CREATE_SETTINGS (PRODUCT_ID, SUB_PRODUCT_ID, QUANTITY) VALUES ({0}, {1}, {2});",
                        primary.ID, subItem.ID, quantity);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();

                    Result = new CreateStockItem(primary.ID, subItem.ID, quantity);
                }
                catch (Exception err)
                {
                    if (err.Message.Contains("violation of PRIMARY or UNIQUE KEY"))
                    {
                        tran.Rollback();
                    }
                    else
                    {
                        tran.Rollback();
                        throw;
                    }
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Updates the quantity of sub item for product production
        /// </summary>
        /// <param name="primary">Primary ProductCost item</param>
        /// <param name="subItem">Sub ProductCost item</param>
        /// <param name="quantity">Quantity of sub items required</param>
        internal static void StockCreateItemsUpdate(ProductCost primary, ProductCost subItem, double quantity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE HS_STOCK_CREATE_SETTINGS SET QUANTITY = {0} WHERE PRODUCT_ID = {1} AND SUB_PRODUCT_ID = {2}",
                        quantity, primary.ID, subItem.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    if (err.Message.Contains("violation of PRIMARY or UNIQUE KEY"))
                    {
                        tran.Rollback();
                    }
                    else
                    {
                        tran.Rollback();
                        throw;
                    }
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Build Stock

        private static void UpdateMissingStockItems(FbConnection db, FbTransaction tran)
        {
            try
            {
                string SQL = "WSP_UPDATE_MISSING_STOCK";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    PrepareCommand(cmd);
                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                }
            }
            catch (Exception err)
            {
                ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err);
            }
        }

        internal static Stock StockItemsGet(User user, int StoreID, int TillID)
        {

            Stock Result = new Stock();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                UpdateMissingStockItems(db, tran);
                try
                {
                    FbDataReader rdr = null;
                    string SQL = String.Format("SELECT r.ID, r.SKU, p.NAME, r.PRODUCT_SIZE, sc.TOTAL_AVAILABLE, sc.MIN_STOCK_LEVEL, " +
                        "sc.RE_ORDER_QUANTITY, r.PRODUCT_TYPE, " +
                        "r.PRODUCT_COST, r.HIDE_GLOBALLY, r.OUT_OF_STOCK, r.IS_GIFTWRAP, sc.AUTO_RENEW, pct.DESCRIPTION, " + //13
                        "sc.STOCK_LOCATION, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE r INNER JOIN HS_STOCKCONTROL sc ON (sc.ITEM_ID = r.ID) INNER JOIN WS_PRODUCTS p ON " +
                        "(p.ID = r.PRODUCT_ID) INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = r.PRODUCT_TYPE) " +
                        "WHERE sc.STORE_ID = {0} AND sc.TILL_ID = {1} AND r.IS_DELETED = 'N' ORDER BY r.PRODUCT_TYPE, p.NAME, r.PRODUCT_SIZE;",
                        StoreID, 1);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    rdr = cmd.ExecuteReader();
                    try
                    {
                        while (rdr.Read())
                        {
                            Result.Add(new StockItem(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                                rdr.GetString(3), rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(6), StoreID,
                                new ProductCostType(rdr.GetInt32(7), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(15)), 
                                rdr.GetDecimal(8), rdr.GetString(9) == "T" ? true : false,
                                rdr.GetString(10) == "T" ? true : false, rdr.GetString(12) == "Y", rdr.GetString(14)));
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                    }

                    tran.Commit();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, StoreID, TillID);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static Stock StockItemsGet(User user)
        {
            Stock Result = new Stock();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "SELECT r.ITEM_ID, r.SKU, r.NAME, r.PRODUCT_SIZE, r.TOTAL_AVAILABLE, r.MIN_STOCK_LEVEL, " +
                        "r.RE_ORDER_QUANTITY, r.PRODUCT_TYPE, r.HIDDEN_GLOBALLY, r.OUT_OF_STOCK, r.AUTO_RENEW, pct.DESCRIPTION, " +
                        "r.STOCK_LOCATION, pct.ITEM_TYPE " +
                        "FROM VW_STOCK_ITEMS r INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = r.PRODUCT_TYPE)";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockItem(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2), rdr.GetString(3),
                            rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(6), DAL.DALHelper.StoreID,
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(10), (ProductCostItemType)rdr.GetInt32(13)),
                            rdr.GetString(8) == "T" ? true : false, rdr.GetString(9) == "T" ? true : false,
                            rdr.GetString(10) == "Y", rdr.GetString(12)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        internal static void StockItemAddStockInQuantity(StockItem Item, int Quantity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE HS_STOCKCONTROL SET TOTAL_AVAILABLE = (TOTAL_AVAILABLE + {0}) WHERE ITEM_ID = {1} AND STORE_ID = {2}",
                        Quantity, Item.ID, Item.StoreID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockItemAddStockOutQuantity(StockItem Item, int Quantity)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("UPDATE HS_STOCKCONTROL SET TOTAL_AVAILABLE = (TOTAL_AVAILABLE - {0}) WHERE ITEM_ID = {1} AND STORE_ID = {2}",
                        Quantity, Item.ID, Item.StoreID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockItemAddStockInAudit(Stock StockItems, User CurrentUser)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    foreach (StockItem item in StockItems)
                    {
                        if (item.Available > 0)
                        {
                            string SQL = String.Format("insert into HS_STOCK_IN (STOCK_ID, USER_ID, QUANTITY, STORE_ID) values ({0}, {1}, {2}, {3});",
                                item.ID, CurrentUser.ID, item.Available, item.StoreID);
                            FbCommand cmd = new FbCommand(SQL, db, tran);
                            cmd.ExecuteNonQuery();

                            CloseAndDispose(ref cmd);
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockItemAddStockOutAudit(Stock StockItems, User CurrentUser, string Reason)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    foreach (StockItem item in StockItems)
                    {
                        if (item.Available > 0)
                        {
                            string SQL = String.Format("insert into HS_STOCK_OUT (STOCK_ID, USER_ID, QUANTITY, STORE_ID, REASON) values ({0}, {1}, {2}, {3}, @REASON);",
                                item.ID, CurrentUser.ID, item.Available, item.StoreID);

                            FbCommand cmd = new FbCommand(SQL, db, tran);
                            AddParam(cmd, "@REASON", FbDbType.VarChar, 255, Reason);
                            cmd.ExecuteNonQuery();

                            CloseAndDispose(ref cmd);
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockItemShowGlobally(StockItem item, bool hidden)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "UPDATE WS_PRODUCTS_COST_SIZE SET HIDE_GLOBALLY = @HIDE_GLOBALLY WHERE ID = @ID;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    AddParam(cmd, "@HIDE_GLOBALLY", FbDbType.Char, 1, hidden ? "T" : "F");
                    AddParam(cmd, "@ID", FbDbType.BigInt, item.ID);

                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockItemSaveChanges(StockItem Item)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = "UPDATE HS_STOCKCONTROL SET MIN_STOCK_LEVEL = @MIN_LEVEL, " +
                    "RE_ORDER_QUANTITY = @RE_ORDER_QTY, AUTO_RENEW = @AUTO_RENEW, " +
                    "STOCK_LOCATION = @LOCATION " +
                    "WHERE ITEM_ID = @ITEM_ID AND STORE_ID = @STORE_ID";
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    AddParam(cmd, "@MIN_LEVEL", FbDbType.Integer, Item.MinLevel);
                    AddParam(cmd, "@RE_ORDER_QTY", FbDbType.Decimal, Item.OrderQuantity);
                    AddParam(cmd, "@AUTO_RENEW", FbDbType.Char, 1, Item.AutoRestock ? "Y" : "N");
                    AddParam(cmd, "@LOCATION", FbDbType.VarChar, 80, Item.Location);
                    AddParam(cmd, "@ITEM_ID", FbDbType.Integer, Item.ID);
                    AddParam(cmd, "@STORE_ID", FbDbType.Integer, Item.StoreID);

                    cmd.ExecuteNonQuery();
                }
                finally
                {
                    CloseAndDispose(ref cmd);
                    tran.Commit();
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        internal static void StockAudit(Stock StockAuditItems, Stock StockItems, User CurrentUser, bool Partial)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    DateTime AuditDate = DateTime.Now;

                    foreach (StockItem item in StockAuditItems)
                    {
                        if (Partial)
                        {
                            if (item.Available > -1)
                            {
                                int Diff = StockItems.Find(item.ID).Available - item.Available;

                                string SQL = String.Format("INSERT INTO HS_STOCK_AUDIT (STOCK_ID, USER_ID, STORE_ID, TILL_ID, CHECK_DATE, QUANTITY, STOCK_DIFFERENCE) VALUES ({0}, {1}, {2}, {3}, '{4}', {5}, {6});",
                                    item.ID, CurrentUser.ID, item.StoreID, 1, AuditDate.ToString("dd.MM.yyyy HH:mm:ss"), item.Available, Diff);
                                FbCommand cmd = new FbCommand(SQL, db, tran);
                                cmd.ExecuteNonQuery();

                                CloseAndDispose(ref cmd);
                            }
                        }
                        else
                        {
                            if (item.Available == -1)
                                item.Available = 0;

                            int Diff = StockItems.Find(item.ID).Available - item.Available;

                            string SQL = String.Format("INSERT INTO HS_STOCK_AUDIT (STOCK_ID, USER_ID, STORE_ID, TILL_ID, CHECK_DATE, QUANTITY, STOCK_DIFFERENCE) VALUES ({0}, {1}, {2}, {3}, '{4}', {5}, {6});",
                                item.ID, CurrentUser.ID, item.StoreID, 1, AuditDate.ToString("dd.MM.yyyy HH:mm:ss"), item.Available, Diff);
                            FbCommand cmd = new FbCommand(SQL, db, tran);
                            cmd.ExecuteNonQuery();

                            CloseAndDispose(ref cmd);
                        }
                    }

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        /// <summary>
        /// Returns all stock out data
        /// </summary>
        /// <param name="storeID">Store ID</param>
        /// <param name="productType">Product Type identifier</param>
        /// <param name="date">Date for stock item</param>
        /// <returns>StockOut Collection</returns>
        internal static StockOut StockOutGet(int storeID, int productType, DateTime date)
        {
            StockOut Result = new StockOut();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string filter = "";

                    if (productType > -1)
                        filter = String.Format(" AND pcs.PRODUCT_TYPE = {0} ", productType);

                    if (date.Year > 1900)
                        filter = String.Format(" AND (CAST(a.IN_DATE AS DATE) = @Date) ", date);

                    string SQL = String.Format("SELECT p.NAME, pcs.PRODUCT_SIZE, a.OUT_DATE, a.QUANTITY, a.REASON, m.USERNAME " +
                        "FROM HS_STOCK_OUT a   LEFT JOIN WS_MEMBERS m on (m.ID = a.USER_ID)   LEFT JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = a.STOCK_ID) " +
                        "  LEFT JOIN WS_PRODUCTS p ON (p.ID = pcs.PRODUCT_ID) WHERE a.STORE_ID = {0} {1} " +
                        "GROUP BY p.NAME, pcs.PRODUCT_SIZE, a.OUT_DATE, a.QUANTITY, a.REASON, m.USERNAME ORDER BY a.OUT_DATE DESC", storeID, filter);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    if (date.Year > 1900)
                        AddParam(cmd, "@Date", FbDbType.Date, date.Date);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockOutItem(rdr.GetString(0), rdr.GetString(1), rdr.GetDateTime(2), rdr.GetInt32(3), rdr.GetString(4), rdr.GetString(5)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns all stock in data
        /// </summary>
        /// <param name="storeID">Store ID</param>
        /// <param name="productType">Product Type identifier</param>
        /// <param name="date">Date for stock item</param>
        /// <returns>StockIn collection</returns>
        internal static StockIn StockInGet(int storeID, int productType, DateTime date)
        {
            StockIn Result = new StockIn();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string filter = "";

                    if (productType > -1)
                        filter = String.Format(" AND pcs.PRODUCT_TYPE = {0} ", productType);

                    if (date.Year > 1900)
                        filter = " AND (CAST(a.OUT_DATE AS DATE) = @Date) ";

                    string SQL = String.Format("SELECT p.NAME, pcs.PRODUCT_SIZE, a.IN_DATE, a.QUANTITY, m.USERNAME " +
                        "FROM HS_STOCK_IN a   LEFT JOIN WS_MEMBERS m on (m.ID = a.USER_ID)   LEFT JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = a.STOCK_ID) " +
                        "LEFT JOIN WS_PRODUCTS p ON (p.ID = pcs.PRODUCT_ID) WHERE a.STORE_ID = {0} {1}  AND p.IS_DELETED = 'N'" +
                        "GROUP BY p.NAME, pcs.PRODUCT_SIZE, a.IN_DATE, a.QUANTITY, m.USERNAME ORDER BY a.IN_DATE DESC", storeID, filter);

                    FbCommand cmd = new FbCommand(SQL, db, tran);

                    if (date.Year > 1900)
                        AddParam(cmd, "@Date", FbDbType.Date, date.Date);

                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockInItem(rdr.GetString(0), rdr.GetString(1), rdr.GetDateTime(2), rdr.GetInt32(3), rdr.GetString(4)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static Stock StockItemsGetFiltered(User user, int storeID, int productType)
        {
            Stock Result = new Stock();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                string SQL = String.Format("SELECT r.ID, r.SKU, p.NAME, r.PRODUCT_SIZE, sc.TOTAL_AVAILABLE, sc.MIN_STOCK_LEVEL, " +
                    "sc.RE_ORDER_QUANTITY, r.PRODUCT_TYPE, " +
                    "r.PRODUCT_COST, r.HIDE_GLOBALLY, r.OUT_OF_STOCK, r.IS_GIFTWRAP, sc.AUTO_RENEW, pct.DESCRIPTION, " +
                    "sc.STOCK_LOCATION, pct.ITEM_TYPE " +
                    "FROM WS_PRODUCTS_COST_SIZE r INNER JOIN HS_STOCKCONTROL sc ON (sc.ITEM_ID = r.ID) INNER JOIN WS_PRODUCTS p ON " +
                    "(p.ID = r.PRODUCT_ID) INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = r.PRODUCT_TYPE) " +
                    "WHERE sc.STORE_ID = {0} AND sc.TILL_ID = {1} AND r.IS_DELETED = 'N' " +
                    "AND r.PRODUCT_TYPE = {2} " +
                    "ORDER BY r.PRODUCT_TYPE, p.NAME, r.PRODUCT_SIZE;", storeID, 1, productType);
                FbDataReader rdr = null;
                FbCommand cmd = new FbCommand(SQL, db, tran);
                try
                {
                    rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockItem(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(6), storeID,
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(15)), 
                            rdr.GetDecimal(8), rdr.GetString(9) == "T" ? true : false,
                            rdr.GetString(10) == "T" ? true : false, rdr.GetString(12) == "Y", rdr.GetString(14)));
                    }
                }
                catch (Exception err)
                {
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, user, storeID, productType);
                    throw;
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        /// <summary>
        /// Returns the stock for an item
        /// </summary>
        /// <param name="storeID">Store where item is </param>
        /// <param name="product">Product who's stock is sought</param>
        /// <returns>StockItem</returns>
        internal static StockItem StockGetItemStock(int storeID, ProductCost product)
        {
            StockItem Result = null;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.SKU, p.NAME, r.PRODUCT_SIZE, sc.TOTAL_AVAILABLE, sc.MIN_STOCK_LEVEL, " +
                        "sc.RE_ORDER_QUANTITY, r.PRODUCT_TYPE, " +
                        "r.PRODUCT_COST, r.HIDE_GLOBALLY, r.OUT_OF_STOCK, r.IS_GIFTWRAP, sc.AUTO_RENEW, pct.DESCRIPTION, " +
                        "sc.STOCK_LOCATION, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE r INNER JOIN HS_STOCKCONTROL sc ON (sc.ITEM_ID = r.ID) INNER JOIN WS_PRODUCTS p ON " +
                        "(p.ID = r.PRODUCT_ID) INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = r.PRODUCT_TYPE)" +
                        "WHERE sc.STORE_ID = {0} AND sc.TILL_ID = {1} AND r.IS_DELETED = 'N' AND r.ID = {2} ORDER BY r.PRODUCT_TYPE, " +
                        "p.NAME, r.PRODUCT_SIZE;", storeID, 1, product.ID);

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    if (rdr.Read())
                    {
                        Result = new StockItem(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(6), storeID,
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(13), (ProductCostItemType)rdr.GetInt32(15)), 
                            rdr.GetDecimal(8), rdr.GetString(9) == "T" ? true : false,
                            rdr.GetString(10) == "T" ? true : false, rdr.GetString(12) == "Y", rdr.GetString(14));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, storeID, product);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }


        internal static Stock StockItemGet(ProductCost productCost)
        {
            Stock Result = new Stock();

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = String.Format("SELECT r.ID, r.SKU, p.NAME, r.PRODUCT_SIZE, sc.TOTAL_AVAILABLE, sc.MIN_STOCK_LEVEL, " +
                        "sc.RE_ORDER_QUANTITY, r.PRODUCT_TYPE, " +
                        "r.PRODUCT_COST, r.HIDE_GLOBALLY, r.OUT_OF_STOCK, r.IS_GIFTWRAP, sc.STORE_ID, sc.AUTO_RENEW, pct.DESCRIPTION, " +
                        "sc.STOCK_LOCATION, pct.ITEM_TYPE " +
                        "FROM WS_PRODUCTS_COST_SIZE r INNER JOIN HS_STOCKCONTROL sc ON (sc.ITEM_ID = r.ID) INNER JOIN WS_PRODUCTS p ON " +
                        "(p.ID = r.PRODUCT_ID) INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = r.PRODUCT_TYPE) " +
                        "WHERE r.ID = {0} " +
                        "ORDER BY r.PRODUCT_TYPE, p.NAME, r.PRODUCT_SIZE;", productCost.ID);
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    while (rdr.Read())
                    {
                        Result.Add(new StockItem(rdr.GetInt32(0), rdr.GetString(1), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetInt32(4), rdr.GetInt32(5), rdr.GetInt32(6), rdr.GetInt32(12),
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(14), (ProductCostItemType)rdr.GetInt32(15)), 
                            rdr.GetDecimal(8), rdr.GetString(9) == "T" ? true : false,
                            rdr.GetString(10) == "T" ? true : false, rdr.GetString(13) == "Y", rdr.GetString(14)));
                    }

                    CloseAndDispose(ref cmd, ref rdr);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    tran.Rollback();
                    ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, productCost);
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Stock Control

        #region Maintenance

        internal static void ExecuteRoutineMaintenance(RoutineMaintenanceType maintenanceType)
        {
            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Maintenance);
            try
            {
                try
                {
                    string SQL = "WSP_ROUTINE_MAINTENANCE;";

                    switch (maintenanceType)
                    {
                        case RoutineMaintenanceType.General:
                            break; // set above

                        case RoutineMaintenanceType.Campaign:
                            SQL = "WSP_ROUTINE_MAINT_CAMPAIGNS";
                            break;

                        default:
                            throw new Exception("Maintenance type not defined");
                    }


                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        PrepareCommand(cmd);

                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }

                }
                catch (Exception err)
                {
                    tran.Rollback();

                    if (!err.Message.Contains("lock conflict on no wait transaction") && !err.Message.Contains("update conflicts with concurrent update"))
                        throw;
                }
            }
            finally
            {
                tran.Commit();
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Maintenance

        #region Local Database


        /// <summary>
        /// Clears all database pools
        /// </summary>
        internal static void ResetDatabasePool(bool clearAllConnections)
        {
            FbConnection.ClearAllPools();
            try
            {
                FbTransaction tran = null;
                FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
                try
                {
                    string SQL = "DELETE FROM MON$ATTACHMENTS;";
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd);
                    }
                }
                finally
                {
                    tran.Commit();
                    CloseAndDispose(ref db, ref tran);
                }
            }
            catch (Exception err)
            {
                if (!err.Message.Contains("no permission"))
                    throw;
            }
        }

        /// <summary>
        /// Returns the name of the local database
        /// </summary>
        /// <returns></returns>
        internal static string GetLocalDatabase()
        {
            string Result = "";

            FbConnection db = new FbConnection(GetConnectionString(DatabaseType.Standard));

            Result = String.Format("Local Database: {0}", db.Database);

            return (Result);
        }

        #endregion Local Database

        #region Data Storage


        /// <summary>
        /// Test's connection to the storage mechanism
        /// </summary>
        /// <returns></returns>
        internal static bool TestConnection()
        {
            bool Result = false;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                Result = true;
            }
            catch (Exception err)
            {
                Shared.EventLog.Add(err, GetConnectionString(DatabaseType.Standard));
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Result);
        }

        #endregion Data Storage

        #endregion Internal Methods

        #region Debug Methods

        internal static void ThrowInternalError(string one, object two, int three, double four, object five)
        {
            try
            {
                throw new Exception();
            }
            catch (Exception err)
            {
                ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, one, two, three, four, five);
            }
        }

        #endregion Debug Methods

        #region private static Methods

        #region Payment Statuses

        /// <summary>
        /// Returns a collection of payment statuses
        /// </summary>
        /// <returns>PaymentStatuses collection</returns>
        private static PaymentStatus PaymentStatusGet(FbConnection db, FbTransaction tran, int paymentStatusID)
        {
            string SQL = "SELECT a.ID, a.DESCRIPTION, a.INITIAL_PROCESS_STATUS, a.IS_PAID, a.PROVIDER_NAMESPACE, " +
                "a.STATUS_TILL, a.STATUS_OFFICE, a.STATUS_ONLINE, a.CREATE_INVOICE, a.MEMBER_LEVEL " +
                "FROM WS_PAYMENT_STATUS a " +
                "WHERE a.ID = @STATUS_ID";
            FbDataReader rdr = null;
            FbCommand cmd = new FbCommand(SQL, db, tran);
            try
            {
                AddParam(cmd, "@STATUS_ID", FbDbType.Integer, paymentStatusID);

                rdr = cmd.ExecuteReader();

                while (rdr.Read())
                {
                    return (new PaymentStatus(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                        rdr.GetString(3) == "Y", rdr.IsDBNull(4) ? String.Empty : rdr.GetString(4),
                        rdr.GetString(5) == "Y", rdr.GetString(6) == "Y", rdr.GetString(7) == "Y",
                        rdr.GetString(8) == "Y", (MemberLevel)rdr.GetInt32(9)));
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (null);
        }


        #endregion Payment Statuses

        #region Statistics

        private static void UpdateStatistics(string url, int attempt)
        {
            if (attempt > 10)
                return;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    string SQL = "WSP_WS_REDIRECT_STATS_UPDATE";

                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    PrepareCommand(cmd);

                    AddParam(cmd, "@ipURL", FbDbType.VarChar, 499, url);
                    cmd.ExecuteNonQuery();

                    CloseAndDispose(ref cmd);

                    tran.Commit();
                }
                catch (Exception err)
                {
                    tran.Rollback();

                    if (attempt < 5)
                    {
                        UpdateStatistics(url, attempt + 1);
                    }
                    else
                    {
                        ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, url);
                        throw;
                    }
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }
        }

        #endregion Statistics

        #region Password Encryption/Decryption

        private static string EncryptPassword(string password)
        {
            try
            {
                return (Shared.Utilities.Encrypt(password, PASSWORD_ENCRYPTION_KEY));
            }
            catch (Exception err)
            {
                if (err.Message.Contains("Invalid length for a Base-64 char array or string."))
                    return (password);
                else
                    throw;
            }
        }

        private static string DecryptPassword(string password)
        {
            try
            {
                return (Shared.Utilities.Decrypt(password, PASSWORD_ENCRYPTION_KEY));
            }
            catch (Exception err)
            {
                if (err.Message.Contains("The input is not a valid Base-64 string") || err.Message.Contains("Invalid length for a Base-64 char array or string.") || err.Message.Contains("Length of the data to decrypt is invalid."))
                    return (password);
                else
                    throw;
            }
        }

        #endregion Password Encryption/Decryption

        #region Orders

        internal static ProductGroup ProductGroupGet(FbConnection db, FbTransaction tran, int ID)
        {
            ProductGroup Result = null;

            string SQL = String.Format("SELECT pg.ID, pg.DESCRIPTION, pg.SORT_ORDER, pg.TAGLINE, pg.SHOW_ON_WEBSITE, pg.MEMBER_LEVEL, " +
                "pg.URL, pg.GROUP_TYPE, pg.HEADER_MAIN_TEXT, pg.HEADER_SUB_TEXT, pgt.DESCRIPTION,  " +
                "pg.MOBILE_IMAGE, pg.MOBILE_WEBSITE " +
                "FROM WS_PRODUCT_GROUP pg JOIN WS_PRODUCT_GROUP_TYPE pgt ON (pgt.ID = pg.GROUP_TYPE) " +
                "WHERE pg.ID = {0} ORDER BY pg.SORT_ORDER;", ID);
            FbCommand cmd = new FbCommand(SQL, db, tran);
            FbDataReader rdr = cmd.ExecuteReader();

            try
            {
                if (rdr.Read())
                {
                    Result = new ProductGroup(rdr.GetInt32(0), rdr.GetString(1), rdr.GetInt32(2),
                        rdr.GetString(3), rdr.GetString(4) == "Y", (MemberLevel)rdr.GetInt32(5),
                        rdr.IsDBNull(6) ? "" : rdr.GetString(6),
                        new ProductGroupType(rdr.GetInt32(7), rdr.GetString(10)), rdr.GetString(8), rdr.GetString(9),
                        rdr.GetString(11), rdr.GetString(12) == "Y");
                }
            }
            catch (Exception err)
            {
                ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                throw;
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (Result);
        }

        internal static ProductCost ProductCostGet(Int64 ID, FbTransaction transaction)
        {
            ProductCost Result = null;

            if (ID == -1)
                return (Result);

            try
            {
                string SQL = String.Format("SELECT pcs.ID, pcs.PRODUCT_ID, pcs.SKU, pcs.PRODUCT_SIZE, " +
                    "pcs.PRODUCT_COST, pcs.MEMBER_LEVEL, pcs.OUT_OF_STOCK, " +
                    "pcs.PRODUCT_TYPE, pcs.BARCODE, pcs.HIDE_GLOBALLY, pcs.IS_GIFTWRAP, pcs.PRODUCT_COST2, pcs.PRODUCT_COST3, " + //12
                    "pcs.DISCOUNT_VALUE, pcs.ADDITIONAL_TEXT, pcs.ITEM_TYPE, pcs.LICENCE_TYPE, pcs.LICENCE_COUNT, " +
                    "pct.DESCRIPTION, pcs.VAT_RATE, pcs.SAVING, pct.ITEM_TYPE " +
                    "FROM WS_PRODUCTS_COST_SIZE pcs INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) " +
                    "WHERE pcs.ID = {0} AND pcs.MEMBER_LEVEL = 0 AND pcs.IS_DELETED = 'N';", ID);
                FbCommand cmd = new FbCommand(SQL, transaction.Connection, transaction);
                FbDataReader rdr = cmd.ExecuteReader();

                try
                {
                    if (rdr.Read())
                    {
                        Result = new ProductCost(rdr.GetInt32(0), ProductGet(rdr.GetInt32(1)), rdr.GetString(2),
                            rdr.GetString(3), rdr.GetDecimal(4), rdr.GetInt32(5), rdr.GetString(6) == "T",
                            new ProductCostType(rdr.GetInt32(7), rdr.GetString(18), (ProductCostItemType)rdr.GetInt32(21)),
                            rdr.IsDBNull(8) ? String.Empty : rdr.GetString(8), rdr.GetString(9) == "T",
                            rdr.GetString(10) == "T", rdr.GetDecimal(11), rdr.GetDecimal(12),
                            rdr.GetDecimal(13), rdr.IsDBNull(14) ? String.Empty : rdr.GetString(14),
                            (ProductCostItemType)rdr.GetInt32(15), rdr.GetInt32(16), rdr.GetInt32(17),
                            rdr.IsDBNull(19) ? Convert.ToDecimal(DALHelper.DefaultVATRate) : rdr.GetDecimal(19),
                            rdr.IsDBNull(20) ? 0.0 : rdr.GetDouble(20));
                    }
                }
                finally
                {
                    CloseAndDispose(ref cmd, ref rdr);
                }
            }
            catch (Exception err)
            {
                ErrorHandling.LogError(MethodBase.GetCurrentMethod(), err, ID);
                throw;
            }

            return (Result);
        }

        private static void OrderItemsGet(Order order, FbConnection Connection, FbTransaction Transaction)
        {
            OrderItems Result = new OrderItems(order);

            string SQL = String.Format("SELECT r.ID, r.INVOICEID, r.DESCRIPTION, r.COST, r.QTY, r.PRICE, r.ITEM_ID, " +
                "pcs.PRODUCT_TYPE, r.USER_DISCOUNT, r.PRODUCT_DISCOUNT, pct.DESCRIPTION, r.ITEM_STATUS, pct.ITEM_TYPE " +
                "FROM WS_INVOICE_ITEMS r LEFT JOIN WS_PRODUCTS_COST_SIZE pcs ON (pcs.ID = r.ITEM_ID) " +
                "INNER JOIN WS_PRODUCT_COST_TYPE pct ON (pct.ID = pcs.PRODUCT_TYPE) WHERE r.INVOICEID = {0}", order.ID);
            FbCommand cmd = new FbCommand(SQL, Connection, Transaction);
            FbDataReader rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                Result.Add(new OrderItem(rdr.GetInt32(0), order, rdr.GetString(2), rdr.GetDecimal(3),
                    rdr.GetDecimal(4), rdr.GetDecimal(5), rdr.GetInt32(6),
                    new ProductCostType(rdr.GetInt32(7), rdr.GetString(10), (ProductCostItemType)rdr.GetInt32(12)),
                    rdr.IsDBNull(8) ? 0.00m : rdr.GetDecimal(8),
                    rdr.IsDBNull(9) ? 0.00m : rdr.GetDecimal(9), (ProcessItemStatus)rdr.GetInt32(11)));
            }

            CloseAndDispose(ref cmd, ref rdr);

            order.SetOrderItems(Result);
        }

        #endregion Orders

        #region Users

        private static void UserGet(Int64 UserID, Order order, FbConnection Connection, FbTransaction Transaction)
        {
            User Result = null;

            string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                "FROM WS_MEMBERS r WHERE (ID = {0})", UserID);

            FbDataReader rdr = null;
            FbCommand cmd = new FbCommand(SQL, Connection, Transaction);

            try
            {
                rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    Result = new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                        DecryptPassword(rdr.GetString(5)),
                        rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                        rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                        rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                        rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                        rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24));
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            if (order != null)
                order.SetUser(Result);
        }

        private static User UserGet(Int64 UserID, FbConnection Connection, FbTransaction Transaction)
        {
            string SQL = String.Format("SELECT r.ID, r.EMAIL, r.USERNAME, r.FIRSTNAME, r.LASTNAME, r.PWORD, " +
                "r.LASTVISIT, r.BUSINESSNAME, r.ADDRESSLINE1, r.ADDRESSLINE2, r.ADDRESSLINE3, r.CITY, r.COUNTY, " +
                "r.POSTCODE, r.MEMBER_LEVEL, r.COUNTRY, r.TELEPHONE, r.SALONID, r.RECEIVE_EMAIL_SPECIAL_OFFERS, " +
                "r.RECEIVE_PHONE_SPECIAL_OFFERS, r.RECEIVE_POSTAL_SPECIAL_OFFERS, r.BIRTH_DATE, r.STYLE, r.RECORD_TYPE, r.AUTO_DISCOUNT " +
                "FROM WS_MEMBERS r WHERE (ID = {0})", UserID);

            FbDataReader rdr = null;
            FbCommand cmd = new FbCommand(SQL, Connection, Transaction);
            try
            {
                rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    return (new User(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(3), rdr.GetString(4),
                        DecryptPassword(rdr.GetString(5)),
                        rdr.GetDateTime(6), rdr.GetString(7), rdr.GetString(8), rdr.GetString(9), rdr.GetString(10), rdr.GetString(11),
                        rdr.GetString(12), rdr.GetString(13), (MemberLevel)rdr.GetInt32(14),
                        rdr.GetInt32(15), rdr.IsDBNull(16) ? "" : rdr.GetString(16), rdr.IsDBNull(17) ? false : rdr.GetInt32(17) == 0,
                        rdr.GetString(18) == "T", rdr.GetString(19) == "T", rdr.GetString(20) == "T", rdr.IsDBNull(21) ? DateTime.MinValue : rdr.GetDateTime(21),
                        rdr.GetString(22), (Enums.UserRecordType)rdr.GetInt32(23), rdr.GetInt32(24)));
                }
            }
            finally
            {
                CloseAndDispose(ref cmd, ref rdr);
            }

            return (null);
        }


        private static Therapist TherapistGet(Int64 therapistID, FbConnection connection, FbTransaction transaction)
        {
            Therapist Result = null;

            string SQL = String.Format("SELECT r.EMPLOYEE_ID, m.USERNAME, r.ALLOW_MONDAY, r.ALLOW_TUESDAY, r.ALLOW_WEDNESDAY, r.ALLOW_THURSDAY, " +
                "r.ALLOW_FRIDAY, r.ALLOW_SATURDAY, r.ALLOW_SUNDAY, r.START_TIME, r.END_TIME, r.LUNCH_START, r.LUNCH_DURATION, r.ALLOW_BOOK_CURRENT_DAY, r.PUBLIC_DIARY, r.APPOINTMENT_GROUP " +
                "FROM WS_APPOINTMENT_OPTIONS r   INNER JOIN WS_MEMBERS m on (m.ID = r.EMPLOYEE_ID) WHERE r.EMPLOYEE_ID = {0};", therapistID);
            FbCommand cmd = new FbCommand(SQL, connection, transaction);

            FbDataReader rdr = cmd.ExecuteReader();

            if (rdr.Read())
            {
                FbCommand cmdGroup = new FbCommand(String.Format("SELECT ID, DESCRIPTION FROM WS_APPOINTMENT_GROUPS WHERE ID = {0}", rdr.GetInt32(15)), connection, transaction);
                FbDataReader rdrGroup = cmdGroup.ExecuteReader();
                rdrGroup.Read();

                Result = new Therapist(rdr.GetInt64(0), rdr.GetString(1), rdr.GetString(2) == "T", rdr.GetString(3) == "T",
                    rdr.GetString(4) == "T", rdr.GetString(5) == "T", rdr.GetString(6) == "T", rdr.GetString(7) == "T",
                    rdr.GetString(8) == "T", rdr.GetDouble(9), rdr.GetDouble(10), rdr.GetDouble(11), rdr.GetInt32(12),
                    rdr.GetString(13) == "T", rdr.GetString(14) == "T", new AppointmentGroup(rdrGroup.GetInt32(0), rdrGroup.GetString(1)));
            }

            CloseAndDispose(ref cmd, ref rdr);

            return (Result);
        }

        #endregion Users

        #region Locations


        /// <summary>
        /// Retrieves an individual store location based on the ID
        /// </summary>
        /// <param name="id">ID of store location to retrieve</param>
        /// <returns>StoreLocation object</returns>
        private static StoreLocation StoreLocationGet(int id, FbConnection db, FbTransaction tran)
        {
            StoreLocation Result = null;

            string SQL = String.Format("SELECT a.ID, a.DESCRIPTION FROM STORES a WHERE a.ID = {0};", id);

            FbCommand cmd = new FbCommand(SQL, db, tran);
            FbDataReader rdr = cmd.ExecuteReader();

            if (rdr.Read())
            {
                Result = new StoreLocation(rdr.GetInt32(0), rdr.GetString(1));
            }

            CloseAndDispose(ref cmd, ref rdr);

            return (Result);
        }

        #endregion Locations

        #region Global Procs

        private static void ExecuteCloseAndDispose(ref FbCommand command)
        {
            if (command == null)
                return;

            command.ExecuteNonQuery();
            command.Dispose();
            command = null;
        }

        private static void CloseAndDispose(ref FbCommand command)
        {
            if (command == null)
                return;

            command.Dispose();
            command = null;
        }

        private static void CloseAndDispose(ref FbCommand command, ref FbDataReader reader)
        {
            if (reader != null)
            {
                if (!reader.IsClosed)
                    reader.Close();

                reader.Dispose();
                reader = null;
            }

            if (command != null)
            {
                command.Dispose();
                command = null;
            }
        }

        private static void CloseAndDispose(ref FbConnection db, ref FbTransaction tran)
        {
            if (tran != null)
            {
                tran.Dispose();
                tran = null;
            }

            if (db != null)
            {
                db.Dispose();
                db = null;
            }
        }

        // Maximum database connection attempts
        private const int MaxReconnectAttempts = 6;

        // Maximum number of minutes to use fail over database
        private const double MaxFailOverUsage = 5.0;

        // Determines wether the fail over database is in use
        private static bool FailOverInUse = false;

        // Date/Time Fail over database started to be used
        private static DateTime FailOverStart = DateTime.MaxValue;

        private static FbConnection ConnectToDatabase(ref FbTransaction tran, DatabaseType databaseType,
            System.Data.IsolationLevel isolationLevel = IsolationLevel.Snapshot,
            int attempt = 0)
        {
            FbConnection Result = null;

            try
            {
                if (FailOverInUse)
                {
                    TimeSpan span = DateTime.Now - FailOverStart;

                    if (span.TotalMinutes > MaxFailOverUsage)
                    {
                        FailOverInUse = false;
                    }
                    else
                    {
                        databaseType = DatabaseType.FailOver;
                    }
                }

                Result = new FbConnection(GetConnectionString(databaseType));
                Result.Open();

                tran = Result.BeginTransaction(isolationLevel);

                return (Result);
            }
            catch (Exception err)
            {
                if (err.Message.Contains("Error reading data from the connection") ||
                    err.Message.Contains("connection shutdown") ||
                    err.Message.Contains("Unable to complete network request") ||
                    err.Message.Contains("Your user name and password are not defined"))
                {
                    FbConnection.ClearPool(Result);

                    if (attempt < MaxReconnectAttempts)
                    {
                        if (attempt > 3 || err.Message.Contains("Unable to complete network request"))
                        {
                            FbConnection failedConn = ConnectToDatabase(ref tran, DatabaseType.FailOver,
                                isolationLevel, attempt + 1);

                            if (!FailOverInUse && failedConn != null)
                            {
                                FailOverInUse = true;
                                FailOverStart = DateTime.Now;
                            }

                            return (failedConn);
                        }
                        else
                        {
                            return (ConnectToDatabase(ref tran, databaseType, isolationLevel, attempt + 1));
                        }
                    }
                    else
                    {
                        Shared.EventLog.Add(err);
                        throw new DatabaseConnectionException("Unable to connect to database");
                    }
                }
                else
                    throw;
            }

        }

        private static string GetConnectionString(DatabaseType databaseType)
        {
            string connString = _connectionString[(int)databaseType];

            if (databaseType != DatabaseType.Standard && String.IsNullOrEmpty(connString))
            {
                connString = _connectionString[(int)DatabaseType.Standard];
            }

            FbConnectionStringBuilder csb = new FbConnectionStringBuilder(connString);

            if (csb.ServerType == FbServerType.Embedded)
                csb.ClientLibrary = String.Format("{0}\\fbembed\\fbembed.dll", Utilities.CurrentPath());

            if (databaseType != DatabaseType.FailOver && !String.IsNullOrEmpty(_roleName))
            {
                csb.UserID = _roleName.ToUpper();
                csb.Password = "Heaven13A";
            }

            if (StandardConnection)
            {
                csb.Pooling = true;
                csb.MinPoolSize = 0;

                // do not decrease this level, when the website
                // gets very busy it IS needed !!!
                csb.MaxPoolSize = 5000;

                // wait 15 seconds to connect
                csb.ConnectionTimeout = 15;

                // close the connection after 20 minutes
                csb.ConnectionLifeTime = 60 * 20;
            }

            return (csb.ToString());
        }

        private static void UpdateVarIfNotEmpty(string Data, ref string Value)
        {
            if (Data != null && Data != "")
                Value = Data;
        }


        private static string BoolToStr(bool Value)
        {
            if (Value)
                return "T";
            else
                return "F";
        }


        private static MemberLevel IntToMemberLevel(int i)
        {
            switch (i)
            {
                case 10:
                    return (MemberLevel.Admin);
                case 9:
                    return (MemberLevel.AdminUpdateDelete);
                case 8:
                    return (MemberLevel.AdminReadOnly);
                case 7:
                    return (MemberLevel.StaffMember);
                case 6:
                    return (MemberLevel.SalesAdvisor);
                case 5:
                    return (MemberLevel.Distributor);
                case 4:
                    return (MemberLevel.User4);
                case 3:
                    return (MemberLevel.Reseller);
                case 2:
                    return (MemberLevel.GoldUser);
                case 1:
                    return (MemberLevel.FormerStaffMember);
                default:
                    return (MemberLevel.StandardUser);
            }
        }


        private static bool StrToBool(string Value)
        {
            if (Value == "T")
                return true;
            else
                return false;
        }

        #region Firebird Wrapper Methods

        /// <summary>
        /// Prepares an FbCommand to be used as stored procedure
        /// </summary>
        /// <param name="cmd">FbCommand object</param>
        private static void PrepareCommand(FbCommand cmd)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            PrepareCommand(cmd, CommandType.StoredProcedure);
        }

        /// <summary>
        /// Prepares an FbCommand command Type
        /// </summary>
        /// <param name="cmd">FbCommand object</param>
        /// <param name="commandType">Command Type</param>
        private static void PrepareCommand(FbCommand cmd, CommandType commandType)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            cmd.CommandType = commandType;
        }

        /// <summary>
        /// Adds an output parameter to an FbCommand object
        /// </summary>
        /// <param name="cmd">FbCommand Object</param>
        /// <param name="parameterName">Name of parameter</param>
        /// <param name="ParameterType">Type of parameter</param>
        private static void AddParam(FbCommand cmd, string parameterName, FbDbType parameterType)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            if (String.IsNullOrEmpty(parameterName))
                throw new ArgumentNullException("parameterName");

            if (!cmd.Parameters.Contains(parameterName))
                cmd.Parameters.Add(parameterName, parameterType);

            cmd.Parameters[parameterName].Direction = ParameterDirection.Output;
        }

        /// <summary>
        /// Adds an input Parameter, user specified direction/type
        /// </summary>
        /// <param name="cmd"></param>
        /// <param name="ParamName">Name of parameter</param>
        /// <param name="ParamType">Type of parameter</param>
        /// <param name="direction">Parameter direction</param>
        /// <param name="ParamValue">Value of parameter</param>
        private static void AddParam(FbCommand cmd, string parameterName, FbDbType parameterType,
            ParameterDirection Direction, object parameterValue)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            if (String.IsNullOrEmpty(parameterName))
                throw new ArgumentNullException("parameterName");

            if (!cmd.Parameters.Contains(parameterName))
                cmd.Parameters.Add(parameterName, parameterType);

            cmd.Parameters[parameterName].Direction = Direction;
            cmd.Parameters[parameterName].Value = parameterValue;
        }

        /// <summary>
        /// Adds a parameter to a FbCommand
        /// </summary>
        /// <param name="cmd">FbCommand object</param>
        /// <param name="ParamName">Name of parameter</param>
        /// <param name="ParamType">Type of parameter</param>
        /// <param name="ParamValue">Value of parameter</param>
        private static void AddParam(FbCommand cmd, string parameterName, FbDbType parameterType,
            object parameterValue)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            if (String.IsNullOrEmpty(parameterName))
                throw new ArgumentNullException("parameterName");

            if (!cmd.Parameters.Contains(parameterName))
                cmd.Parameters.Add(parameterName, parameterType);

            cmd.Parameters[parameterName].Direction = ParameterDirection.Input;
            cmd.Parameters[parameterName].Value = parameterValue;
        }

        /// <summary>
        /// Input paramater for type Char/Varchar
        /// </summary>
        /// <param name="cmd"></param>
        /// <param name="ParamName">Name of parameter</param>
        /// <param name="ParamType">Type of parameter</param>
        /// <param name="TextLength">Max length of text for parameter</param>
        /// <param name="ParamValue">Value of parameter</param>
        private static void AddParam(FbCommand cmd, string parameterName, FbDbType parameterType,
            int maxTextLength, string parameterValue)
        {
            if (cmd == null)
                throw new ArgumentNullException("cmd");

            if (String.IsNullOrEmpty(parameterName))
                throw new ArgumentNullException("parameterName");

            if (String.IsNullOrEmpty(parameterValue))
                parameterValue = String.Empty;

            if (parameterValue.Length > maxTextLength)
                throw new Exception("Text Exceeds permitted Length");

            if (!cmd.Parameters.Contains(parameterName))
                cmd.Parameters.Add(parameterName, parameterType);

            cmd.Parameters[parameterName].Size = maxTextLength;
            cmd.Parameters[parameterName].Direction = ParameterDirection.Input;
            cmd.Parameters[parameterName].Value = parameterValue;
        }

        #endregion Firebird Wrapper Methods

        private static string LikeParam(string s)
        {
            return ("%" + s + "%");
        }

        private static void ValidateDetails(string s, int MinLength, string Field)
        {
            s = s.TrimEnd();
            if (s == null || s.Length < MinLength)
                if (MinLength == 0)
                    throw (new System.Exception(String.Format("{0} is mandatory.", Field)));
                else
                    throw (new System.Exception(String.Format("{0} is mandatory and should " +
                        "be at least {1} characters long.", Field, MinLength)));
        }

        #endregion Global Procs

        #region DB Methods

        private static string BuildInvoceWhereClause(int UserID, int InvoiceID, bool TodayOnly,
            bool hideCancelled, ProcessStatuses statuses)
        {
            //build the where clause
            string Where = "";
            string InClause = "";

            // are we searching a specific user?
            if (UserID > -1)
            {
                Where = String.Format(" WHERE (a.USERID = {0})", UserID);
                return (Where);
            }

            if (InvoiceID > -1)
            {
                //if searching by invoice ignore all other search criteria
                Where = String.Format(" a.ID = {0} ", InvoiceID);
            }
            else
            {
                //dates
                if (TodayOnly)
                {
                    Where = AddToWhereClause(Where, String.Format("((cast(a.PURCHASEDATE as date) = '{0}/{1}/{2}'))",
                        DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Year));
                }

                //order status
                if (statuses.HasFlag(ProcessStatuses.OrderReceived))
                    InClause = AddToInClause(InClause, ProcessStatus.OrderReceived);

                if (statuses.HasFlag(ProcessStatuses.Processing))
                    InClause = AddToInClause(InClause, ProcessStatus.Processing);

                if (statuses.HasFlag(ProcessStatuses.Complete))
                    InClause = AddToInClause(InClause, ProcessStatus.Completed);

                if (statuses.HasFlag(ProcessStatuses.Dispatched))
                { 
                    InClause = AddToInClause(InClause, ProcessStatus.Dispatched);

                    if (!statuses.HasFlag(ProcessStatuses.Complete))
                        InClause = AddToInClause(InClause, ProcessStatus.Completed);
                }

                if (statuses.HasFlag(ProcessStatuses.Cancelled))
                    InClause = AddToInClause(InClause, ProcessStatus.Cancelled);

                if (statuses.HasFlag(ProcessStatuses.OnHold))
                    InClause = AddToInClause(InClause, ProcessStatus.OnHold);

                if (statuses.HasFlag(ProcessStatuses.IssueRefund))
                    InClause = AddToInClause(InClause, ProcessStatus.IssueRefund);

                if (statuses.HasFlag(ProcessStatuses.PaymentPending))
                    InClause = AddToInClause(InClause, ProcessStatus.PaymentPending);

                if (statuses.HasFlag(ProcessStatuses.VerifyingPayment))
                    InClause = AddToInClause(InClause, ProcessStatus.VerifyingPayment);

                if (statuses.HasFlag(ProcessStatuses.PartialDispatch))
                    InClause = AddToInClause(InClause, ProcessStatus.PartialDispatch);


                if (InClause.Length > 0)
                {
                    InClause = String.Format("(a.PROCESS_STATUS IN ({0}))", InClause);
                }

                if (hideCancelled)
                {
                    Where = AddToWhereClause(Where, "(a.STATUS <> 10)");
                }

                Where = AddToWhereClause(Where, InClause);
            }

            // add the order by clause
            if (Where.Length > 0)
                Where = String.Format(" WHERE {0} ", Where);

            return (Where);
        }

        private static string BuildHelpdeskWhereClause(bool OnHold, bool Closed, bool Open)
        {
            //build the where clause
            string Where = "";
            string InClause = "";


            //order status
            if (Closed)
                InClause = AddToInClause(InClause, "2");

            if (Open)
                InClause = AddToInClause(InClause, "1");

            if (OnHold)
                InClause = AddToInClause(InClause, "3");

            if (InClause.Length > 0)
            {
                InClause = String.Format("(a.STATUS IN ({0}))", InClause);
            }

            Where = AddToWhereClause(Where, InClause);

            // add the order by clause
            if (Where.Length > 0)
                Where = String.Format(" WHERE {0} ", Where);

            return (Where);
        }

        private static string AddToWhereClause(string WhereClause, string Value)
        {
            string Result = "";

            if (Value.Length > 0)
            {
                if (WhereClause.Length > 0)
                {
                    Result = String.Format(" {0} AND ({1}) ", WhereClause, Value);
                }
                else
                {
                    Result = String.Format(" {0} ", Value);
                }
            }

            return (Result);
        }

        private static string AddToInClause(string InClause, ProcessStatus status)
        {
            string Result = "";

            if (InClause.Length > 0)
            {
                Result = String.Format("{0}, {1}", InClause, ((int)status).ToString());
            }
            else
            {
                Result = (((int)status).ToString());
            }

            return (Result);
        }

        private static string AddToInClause(string InClause, string Value)
        {
            string Result = "";

            if (Value.Length > 0)
            {
                if (InClause.Length > 0)
                {
                    Result = String.Format("{0}, {1}", InClause, Value);
                }
                else
                {
                    Result = Value;
                }
            }

            return (Result);
        }

        private static int GetDBCount(string SQL)
        {
            int Count = 0;

            FbTransaction tran = null;
            FbConnection db = ConnectToDatabase(ref tran, DatabaseType.Standard);
            try
            {
                try
                {
                    FbCommand cmd = new FbCommand(SQL, db, tran);
                    FbDataReader rdr = cmd.ExecuteReader();

                    try
                    {
                        if (rdr.Read())
                        {
                            if (rdr.IsDBNull(0))
                                Count = 0;
                            else
                                Count = rdr.GetInt32(0);
                        }
                    }
                    finally
                    {
                        CloseAndDispose(ref cmd, ref rdr);
                        tran.Rollback();
                    }
                }
                catch
                {
                    throw;
                }
            }
            finally
            {
                CloseAndDispose(ref db, ref tran);
            }

            return (Count);
        }

        #endregion DB Methods

        #endregion private static Methods

        #region Protected Methods

        internal static void Prepare()
        {

        }

        #endregion Protected Methods
    }
}