/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  Enterprise Manager is distributed under the GNU General Public License version 3 and  
 *  is also available under alternative licenses negotiated directly with Simon Carter.  
 *  If you obtained Enterprise Manager under the GPL, then the GPL applies to all loadable 
 *  Enterprise Manager modules used on your system as well. The GPL (version 3) is 
 *  available at https://opensource.org/licenses/GPL-3.0
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  The Original Code was created by Simon Carter (s1cart3r@gmail.com)
 *
 *  Copyright (c) 2010 - 2017 Simon Carter.  All Rights Reserved.
 *
 *  Product:  Enterprise Manager
 *  
 *  File: StaffExpense.cs
 *
 *  Purpose:  
 *
 *  Date        Name                Reason
 *  
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
using System;
using System.Drawing;
using System.IO;

using Library.BOL.Users;

namespace Library.BOL.Staff
{
	/// <summary>
	/// Wrapper for Firebird table STAFF_EXPENSES
	/// 
	/// Automatically generated by FBSPGen (http://www.sieradelta.com/Products/FBSPGen.aspx)
	/// </summary>
	public class StaffExpense
	{
		#region Constructors

		/// <summary>
		/// Standard constructor for StaffExpense
		/// </summary>
		/// <param name="id">Property Description for Field ID</param>
		/// <param name="staffId">Property Description for Field STAFF_ID</param>
		/// <param name="dateCreated">Property Description for Field DATE_CREATED</param>
		/// <param name="expenseDate">Property Description for Field EXPENSE_DATE</param>
		/// <param name="location">Property Description for Field LOCATION</param>
		/// <param name="reason">Property Description for Field REASON</param>
		/// <param name="expenseType">Property Description for Field EXPENSE_TYPE</param>
		/// <param name="expenseAmount">Property Description for Field EXPENSE_AMOUNT</param>
		/// <param name="expenseQuantity">Property Description for Field EXPENSE_QUANTITY</param>
		/// <param name="receiptImage">Property Description for Field RECEIPT_IMAGE</param>
		/// <param name="status">Property Description for Field STATUS</param>
		public StaffExpense (Int64 id, Int64 staffId, 
			DateTime dateCreated, DateTime expenseDate, string location, 
			string reason, EmployeeExpenseType expenseType, decimal expenseAmount, 
			decimal expenseQuantity, string receiptImage, decimal taxPaid, 
            EmployeeExpenseStatus status, Int64 approver, DateTime dateApproved)
		{
			Id = id;
			StaffId = staffId;
			DateCreated = dateCreated;
			ExpenseDate = expenseDate;
			Location = location;
			Reason = reason;
			ExpenseType = expenseType;
			ExpenseAmount = expenseAmount;
			ExpenseQuantity = expenseQuantity;
			ReceiptImage = receiptImage;
            TaxPaid = taxPaid;
			Status = status;
            ApprovedBy = approver;
            ApprovedDate = dateApproved;
		}

        #endregion Constructors

        #region Public Methods

        /// <summary>
        /// Approve the current expense
        /// </summary>
        /// <param name="user"></param>
        public void Approve(User user)
        {
            DAL.FirebirdDB.StaffExpenseChangeStatus(user, this, EmployeeExpenseStatus.Approved);
            Status = EmployeeExpenseStatus.Approved;
            ApprovedBy = user.ID;
            ApprovedDate = DateTime.Now;
        }

        /// <summary>
        /// Decline the current expense
        /// </summary>
        /// <param name="user"></param>
        public void Decline(User user)
        {
            DAL.FirebirdDB.StaffExpenseChangeStatus(user, this, EmployeeExpenseStatus.Declined);
            Status = EmployeeExpenseStatus.Declined;
            ApprovedBy = user.ID;
            ApprovedDate = DateTime.Now;
        }

        /// <summary>
        /// Mark current expense as paid
        /// </summary>
        /// <param name="user"></param>
        public void Paid(User user)
        {
            DAL.FirebirdDB.StaffExpenseChangeStatus(user, this, EmployeeExpenseStatus.Paid);
            Status = EmployeeExpenseStatus.Paid;
            ApprovedBy = user.ID;
            ApprovedDate = DateTime.Now;
        }

        /// <summary>
        /// Saves the current record
        /// </summary>
        public void Save()
		{
			Library.DAL.FirebirdDB.StaffExpenseUpdate(this);
		}

		/// <summary>
		/// Deletes the current record
		/// </summary>
		public bool Delete()
		{
			return (Library.DAL.FirebirdDB.StaffExpenseDelete(this));
		}


		/// <summary>
		/// Reloads the current record
		/// </summary>
		public void Reload()
		{
			throw new NotImplementedException();
		}

		#endregion Public Methods

		#region Overridden Methods

		/// <summary>
		/// Returns the String for the class
		/// </summary>
		public override string ToString()
		{
			return (String.Format("STAFF_EXPENSES Record {0}", Id));
		}

		#endregion Overridden Methods

		#region Properties

		/// <summary>
		/// Property Description for Field ID
		/// </summary>
		public Int64 Id { get; internal set; }

		/// <summary>
		/// Property Description for Field STAFF_ID
		/// </summary>
		public Int64 StaffId { get; set; }

		/// <summary>
		/// Property Description for Field DATE_CREATED
		/// </summary>
		public DateTime DateCreated { get; set; }

		/// <summary>
		/// Property Description for Field EXPENSE_DATE
		/// </summary>
		public DateTime ExpenseDate { get; set; }

		/// <summary>
		/// Property Description for Field LOCATION
		/// </summary>
		public string Location { get; set; }

		/// <summary>
		/// Property Description for Field REASON
		/// </summary>
		public string Reason { get; set; }

		/// <summary>
		/// Property Description for Field EXPENSE_TYPE
		/// </summary>
		public EmployeeExpenseType ExpenseType { get; set; }

		/// <summary>
		/// Property Description for Field EXPENSE_AMOUNT
		/// </summary>
		public decimal ExpenseAmount { get; set; }

		/// <summary>
		/// Property Description for Field EXPENSE_QUANTITY
		/// </summary>
		public decimal ExpenseQuantity { get; set; }

        public bool HasReceipt
        {
            get
            {
                return (!String.IsNullOrWhiteSpace(ReceiptImage));
            }
        }
		/// <summary>
		/// Property Description for Field RECEIPT_IMAGE
		/// </summary>
		public string ReceiptImage { get; set; }


        public Image Receipt
        {
            get
            {
                Image Result = null;

                byte[] bytes = Convert.FromBase64String(ReceiptImage);

                using (MemoryStream ms = new MemoryStream(bytes))
                {
                    Result = Image.FromStream(ms, true, true);
                }

                return (Result);
            }

            set
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    value.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                    ReceiptImage = Convert.ToBase64String(ms.ToArray());
                }
            }
        }

        /// <summary>
        /// Cost of tax on the item to offset against accounts
        /// </summary>
        public decimal TaxPaid { get; set; }

		/// <summary>
		/// Property Description for Field STATUS
		/// </summary>
		public EmployeeExpenseStatus Status { get; set; }

        /// <summary>
        /// Person approving
        /// </summary>
        public Int64 ApprovedBy { get; set; }

        /// <summary>
        /// Date time approved
        /// </summary>
        public DateTime ApprovedDate { get; set; }

		#endregion Properties
	}
}