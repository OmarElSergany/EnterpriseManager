using System;
using System.Collections;

using Library.BOL.Users;

namespace Library.BOL.Staff
{
	/// <summary>
	/// Collection of StaffExpense items
	/// 
	/// Automatically generated by FBSPGen (http://www.sieradelta.com/Products/FBSPGen.aspx)
	/// </summary>
	public class StaffExpenses : CollectionBase
	{
		#region Static Methods

        public static decimal TotalMiles(User staffmember, DateTime accountYearStart)
        {
            return (DAL.FirebirdDB.StaffExpenseTotalMileage(staffmember, accountYearStart));
        }

		/// <summary>
		/// Inserts an instance of StaffExpense into the database
		/// </summary>
		/// <returns>StaffExpense instance</returns>
		public static StaffExpense InsertUpdate(StaffExpense item)
		{
			return (Library.DAL.FirebirdDB.StaffExpenseInsertUpdate(item));
		}

		/// <summary>
		/// Returns all records from table STAFF_EXPENSES
		/// </summary>
		/// <returns>StaffExpenses collection of StaffExpense items</returns>
		public static StaffExpenses All(User user)
		{
			return (Library.DAL.FirebirdDB.StaffExpenseSelectAll(user));
		}

		/// <summary>
		/// Returns a specific record from table STAFF_EXPENSES
		/// </summary>
		/// <param name="id"></param>
		/// <returns>StaffExpense item if found, otherwise null</returns>
		public static StaffExpense Get(Int64 item)
		{
			return (Library.DAL.FirebirdDB.StaffExpenseSelect(item));
		}

		#endregion Static Methods

		#region Generic CollectionBase Code

		#region Properties

		/// <summary>
		/// Indexer Property
		/// </summary>
		/// <param name="Index">Index of object to return</param>
		/// <returns>StaffExpense object</returns>
		public StaffExpense this[int Index]
		{
			get
			{
				return ((StaffExpense)this[Index]);
			}

			set
			{
				this[Index] = value;
			}
		}

		#endregion Properties

		#region Public Methods

		/// <summary>
		/// Adds an item to the collection
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public int Add(StaffExpense value)
		{
			return (List.Add(value));
		}

		/// <summary>
		/// Returns the index of an item within the collection
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public int IndexOf(StaffExpense value)
		{
			return (List.IndexOf(value));
		}

		/// <summary>
		/// Inserts an item into the collection
		/// </summary>
		/// <param name="index"></param>
		/// <param name="value"></param>
		public void Insert(int index, StaffExpense value)
		{
			List.Insert(index, value);
		}


		/// <summary>
		/// Removes an item from the collection
		/// </summary>
		/// <param name="value"></param>
		public void Remove(StaffExpense value)
		{
			List.Remove(value);
		}


		/// <summary>
		/// Indicates the existence of an item within the collection
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public bool Contains(StaffExpense value)
		{
			// If value is not of type OBJECT_TYPE, this will return false.
			return (List.Contains(value));
		}

		#endregion Public Methods

		#region Private Members

		private const string OBJECT_TYPE = "Library.BOL.Staff.StaffExpense";
		private const string OBJECT_TYPE_ERROR = "Must be of type StaffExpense";


		#endregion Private Members

		#region Overridden Methods

		/// <summary>
		/// When Inserting an Item
		/// </summary>
		/// <param name="index"></param>
		/// <param name="value"></param>
		protected override void OnInsert(int index, Object value)
		{
			if (value.GetType() != Type.GetType(OBJECT_TYPE))
				throw new ArgumentException(OBJECT_TYPE_ERROR, "value");
		}


		/// <summary>
		/// When removing an item
		/// </summary>
		/// <param name="index"></param>
		/// <param name="value"></param>
		protected override void OnRemove(int index, Object value)
		{
			if (value.GetType() != Type.GetType(OBJECT_TYPE))
				throw new ArgumentException(OBJECT_TYPE_ERROR, "value");
		}


		/// <summary>
		/// When Setting an Item
		/// </summary>
		/// <param name="index"></param>
		/// <param name="oldValue"></param>
		/// <param name="newValue"></param>
		protected override void OnSet(int index, Object oldValue, Object newValue)
		{
			if (newValue.GetType() != Type.GetType(OBJECT_TYPE))
				throw new ArgumentException(OBJECT_TYPE_ERROR, "newValue");
		}


		/// <summary>
		/// Validates an object
		/// </summary>
		/// <param name="value"></param>
		protected override void OnValidate(Object value)
		{
			if (value.GetType() != Type.GetType(OBJECT_TYPE))
				throw new ArgumentException(OBJECT_TYPE_ERROR);
		}

		#endregion Overridden Methods

		#endregion Generic CollectionBase Code
	}
}