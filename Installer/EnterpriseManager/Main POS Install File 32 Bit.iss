; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Small Business Enterprise Resource Manager"
#define MyAppVersion "4.0"
#define MyAppPublisher "Shifoo Systems"
#define MyAppURL "http://www.shifoo.systems"
#define MyAppExeName "Shifoo.SBM.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{A6B8B271-A978-4880-A1CE-F69930D52520}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppPublisher}\ERM
DefaultGroupName={#MyAppName}
LicenseFile=POSLicence.txt
OutputDir=Builds
OutputBaseFilename=Shifoo_SBM_v_{#MyAppVersion}
SetupIconFile=..\..\Applications\POS\favicon.ico
Compression=lzma
SolidCompression=yes
AppCopyright=Copyright (c) 2010 - 2018.  Shifoo Systems.
DisableDirPage=auto
ShowLanguageDialog=auto
Uninstallable=yes
InternalCompressLevel=ultra

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; OnlyBelowVersion: 0,6.1

[Files]
; setup help file
Source: "..\..\Help\_tmphhp\erminstaller.chm"; DestDir: "{pf}\{#MyAppPublisher}"; Flags: deleteafterinstall

;firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\lib\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\lib"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\misc\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\misc"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\plugins\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\plugins"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\udf\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\udf"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fbtrace.conf"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\firebird.conf"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\firebird.msg"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\IDPLicense.txt"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\IPLicense.txt"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\Readme.txt"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\security3.fdb"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\doc\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\doc"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;;Source: "..\..\Installer\Firebird.3.0.2.64Bit\examples\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\examples"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;;Source: "..\..\Installer\Firebird.3.0.2.64Bit\help\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\help"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;;Source: "..\..\Installer\Firebird.3.0.2.64Bit\include\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\include"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\intl\*"; DestDir: "{pf}\{#MyAppPublisher}\Firebird\intl"; Flags: createallsubdirs recursesubdirs promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\firebird.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird; AfterInstall: FirebirdPostInstallCheck
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fbsvcmgr.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fbtracemgr.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gbak.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gfix.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gpre.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gsec.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gsplit.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\gstat.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\ib_util.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\icudt52.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\icuin52.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\icuuc52.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\icudt52l.dat"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\instclient.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\instreg.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\instsvc.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\isql.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\msvcp100.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\msvcr100.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\nbackup.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\qli.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fb_lock_print.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fbclient.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\fbguard.exe"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\zlib1.dll"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\InstallFBShifoo.bat"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird
;Source: "..\..\Installer\Firebird.3.0.2.64Bit\UnInstallFBShifoo.bat"; DestDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: promptifolder sharedfile; Components: Firebird


;database
;Source: "T:\Shifoo\Shifoo.Store.1.fdb"; DestDir: "{pf}\{#MyAppPublisher}\Databases"; DestName: "SBMDatabase.fdb"; Flags: ignoreversion confirmoverwrite onlyifdoesntexist uninsneveruninstall; Components: Database; AfterInstall: AfterDatabaseInstall


; the following are for the actual application
Source: "..\..\Builds\POS\Release\Shifoo.System.exe"; DestDir: "{app}"; DestName: "Shifoo.SBM.exe"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\ControlHints.xml"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\DidYouKnow.xml"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\FirebirdSql.Data.FirebirdClient.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Hunspellx64.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Hunspellx86.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\ICSharpCode.SharpZipLib.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\NHunspell.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\QRCode.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\ServiceStack.Text.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Calendar.DayView.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\MonthCalendar.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\SharedLib.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\SharedControls.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\itextsharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\SalonDiary.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Languages.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Library.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\POS.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Reports.dll"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\splash.img"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM

; dictionary files
Source: "..\..\Builds\POS\Release\Dictionary\cs_CZ.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\da_DK.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\da_DK.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_AU.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_AU.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_CA.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_CA.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_GB.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_GB.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_US.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_US.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_ZA.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\en_ZA.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\es_ES.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\es_ES.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\he_IL.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\he_IL.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\nl_NL.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\nl_NL.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\sl_SI.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\sl_SI.dic"; DestDir: "{app}\Dictionary"; Flags: ignoreversion
Source: "..\..\Builds\POS\Release\Dictionary\cs_CZ.aff"; DestDir: "{app}\Dictionary"; Flags: ignoreversion

; pictures
Source: "..\..\Builds\POS\Release\Images\AppointmentSummary.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\BirthdayBackground.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\BirthdayBackground.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\CALENDAR_1.ico"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\ChangedAppointments.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\EditWrokingHours.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\EmployeeNoTreatments.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\images.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\InvoiceFooterPaid.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\InvoiceHeader.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\InvoiceHeaderPaid.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\InvoiceHeaderPaidBlank.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\LinkedAppointment.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\LinkedAppointments 2.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\locked.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\meeting.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\newappointment.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\newappointment.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\notes.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\reports.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\revertuser.png"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\SalonReportHeader.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\ShippingLabel.bmp"; DestDir: "{app}"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\showminutes.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\StockReportHeader.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\swapuser.png"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\till2.ico"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\till2.png"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\till-icon.png"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\treatments.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\treatments1.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Images\warning.bmp"; DestDir: "{app}\Images"; Flags: ignoreversion; Components: SBM

; all plugin modules
Source: "..\..\Builds\POS\Release\Plugins\POS.Accounts.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Accounts.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Administration.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Administration.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.AutoUpdate.dll"; DestDir: "{app}\Plugins"; DestName: "POS.AutoUpdate.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Cash.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Cash.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Cash.dll"; DestDir: "{app}\Plugins"; DestName: "POS.CashManager.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.CurrencyWatch.dll"; DestDir: "{app}\Plugins"; DestName: "POS.CurrencyWatch.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Customers.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Customers.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.DatabaseBackupPluginModule.dll"; DestDir: "{app}\Plugins"; DestName: "POS.DatabaseBackupPluginModule.dll"; Flags: ignoreversion; Components: SBM
;Source: "..\..\Builds\POS\Release\Plugins\POS.Debug.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Debug.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Diary.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Diary.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Export.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Export.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.FileBackup.dll"; DestDir: "{app}\Plugins"; DestName: "POS.FileBackup.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.HelpDesk.dll"; DestDir: "{app}\Plugins"; DestName: "POS.HelpDesk.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Images.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Images.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Invoices.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Invoices.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Marketing.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Marketing.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Orders.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Orders.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.PurchaseOrders.dll"; DestDir: "{app}\Plugins"; DestName: "POS.PurchaseOrders.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Staff.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Staff.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.StockControl.dll"; DestDir: "{app}\Plugins"; DestName: "POS.StockControl.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Suppliers.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Suppliers.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Till.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Till.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.TrainingSchedule.dll"; DestDir: "{app}\Plugins"; DestName: "POS.TrainingSchedule.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.Updater.dll"; DestDir: "{app}\Plugins"; DestName: "POS.Updater.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.VoucherManagement.dll"; DestDir: "{app}\Plugins"; DestName: "POS.VoucherManagement.dll"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\Plugins\POS.WebsiteAdministration.dll"; DestDir: "{app}\Plugins"; DestName: "POS.WebsiteAdministration.dll"; Flags: ignoreversion; Components: SBM

; language files
Source: "..\..\Builds\POS\Release\da-DK\Languages.resources.dll"; DestDir: "{app}\Languages\da-DK"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\zh-SG\Languages.resources.dll"; DestDir: "{app}\Languages\zh-SG"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\zh-CN\Languages.resources.dll"; DestDir: "{app}\Languages\zh-CN"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\sl-SI\Languages.resources.dll"; DestDir: "{app}\Languages\sl-SI"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\nl-NL\Languages.resources.dll"; DestDir: "{app}\Languages\nl-NL"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\ms-MY\Languages.resources.dll"; DestDir: "{app}\Languages\ms-MY"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\he\Languages.resources.dll"; DestDir: "{app}\Languages\he"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\es-ES\Languages.resources.dll"; DestDir: "{app}\Languages\es-ES"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\en-US\Languages.resources.dll"; DestDir: "{app}\Languages\en-US"; Flags: ignoreversion; Components: SBM
Source: "..\..\Builds\POS\Release\zh-TW\Languages.resources.dll"; DestDir: "{app}\Languages\zh-TW"; Flags: ignoreversion; Components: SBM

; temp currency file
Source: "T:\ShifooMain\Installer\CurrencyConversions.dat"; DestDir: "{app}\Temp"; Flags: onlyifdestfileexists

;Source: "..\..\Builds\POS\Debug\PluginConfig.xml"; DestDir: "{app}"; Flags: ignoreversion onlyifdoesntexist

; if changed configuration add following line
;Source: "..\..\Builds\POS\Release\PosConfiguration.dat"; DestDir: "{app}"; Flags: ignoreversion onlyifdoesntexist; Components: SBM


; help file
Source: "..\..\Help\_tmphhp\POS.chm"; DestDir: "{app}\Help"; DestName: "SBM.chm"; Flags: ignoreversion; Components: SBM


;replication
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\FirebirdSql.Data.FirebirdClient.dll"; DestDir: "{pf}\Firebird Replication"; Flags: sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\ICSharpCode.SharpZipLib.dll"; DestDir: "{pf}\Firebird Replication"; Flags: sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\Replication.Engine.dll"; DestDir: "{pf}\Firebird Replication"; Flags: sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\Replication.Service.Console.exe"; DestDir: "{pf}\Firebird Replication"; Flags: uninsrestartdelete sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\Replication.Service.exe"; DestDir: "{pf}\Firebird Replication"; Flags: uninsrestartdelete sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\SharedControls.dll"; DestDir: "{pf}\Firebird Replication"; Flags: sharedfile promptifolder; Components: ReplicationEngine
;Source: "..\..\..\GitProjects\Builds\FbReplicationEngine\Release\Sharedlib.dll"; DestDir: "{pf}\Firebird Replication"; Flags: sharedfile promptifolder; Components: ReplicationEngine

; next line is the template replication file
Source: "..\EnterpriseManager\POSTemplateReplication.txt"; DestDir: "{pf}\Firebird Replication"; DestName: "POSTemplateReplication.txt"; Flags: deleteafterinstall

; next line is required so that the initial setup wizard will be run
Source: "InitialSetup.dat"; DestDir: "{app}"; Flags: ignoreversion onlyifdoesntexist; Components: SBM; Permissions: everyone-full

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{pf}\Firebird Replication\Configure Replication"; Filename: "{pf}\Firebird Replication\Replication.Service.exe"; WorkingDir: "{pf}\Firebird Replication"; IconFilename: "{pf}\Firebird Replication\Replication.Service.exe"; Parameters: "/c"; Components: ReplicationEngine

[Run]
Filename: "{app}\{#MyAppExeName}"; Flags: nowait postinstall skipifsilent; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Components: SBM
Filename: "{pf}\{#MyAppPublisher}\Firebird\InstallFBShifoo.bat"; WorkingDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: waituntilterminated runhidden; Description: "Installing Firebird Database Engine"; StatusMsg: "Installing Firebird Database Engine"; Components: Firebird
Filename: "{pf}\Firebird Replication\Replication.Service.exe"; Parameters: "/i"; WorkingDir: "{pf}\Firebird Replication"; Flags: runascurrentuser shellexec; Description: "Install Replication Service"; StatusMsg: "Install Replication Service"; Components: ReplicationEngine

[UninstallRun]
Filename: "{pf}\{#MyAppPublisher}\Firebird\UnInstallFBShifoo.bat"; WorkingDir: "{pf}\{#MyAppPublisher}\Firebird"; Flags: waituntilterminated runhidden; StatusMsg: "Installing Firebird Database Engine"; Components: Firebird
;Filename: "{pf}\Firebird Replication\Replication.Service.exe"; Parameters: "/u"; WorkingDir: "{pf}\Firebird Replication"; Flags: shellexec skipifdoesntexist; StatusMsg: "Removing Replication Service"; Components: ReplicationEngine

[Components]
Name: "Firebird"; Description: "Firebird 3.0.2"; Types: full custom
Name: "SBM"; Description: "Small Business Enterprise Manager"; Types: full custom compact
Name: "ReplicationEngine"; Description: "Replication Engine"; Types: full custom
Name: "Database"; Description: "Database"; ExtraDiskSpaceRequired: 160000; Types: custom full

[Dirs]
Name: "{app}"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Dictionary"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\Logo"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\Products"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\HomePageBanners"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\OfferImages"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\PageBanners"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\Treatments"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\Celebrities"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Images\WebsiteTreatments"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Errors"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Invoices"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Labels"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Logs"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Help"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Marketing"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Temp"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\sl-SI"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\en-US"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\es-ES"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\he"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\ms-MY"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\nl-NL"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\zh-TW"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\zh-SG"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\zh-CN"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full
Name: "{app}\Languages\da-DK"; Flags: uninsalwaysuninstall; Components: SBM; Permissions: everyone-full

; firebird
Name: "{pf}\{#MyAppPublisher}\Firebird"; Flags: uninsalwaysuninstall; Components: Firebird; Permissions: everyone-full
Name: "{pf}\{#MyAppPublisher}\Firebird"; Flags: uninsalwaysuninstall; Attribs: hidden; Components: Firebird; Permissions: everyone-full

; database
Name: "{pf}\{#MyAppPublisher}\Databases"; Flags: uninsneveruninstall; Components: Database; Permissions: everyone-full


; replication engine
Name: "{pf}\Firebird Replication"; Flags: uninsalwaysuninstall; Components: ReplicationEngine; Permissions: everyone-full
Name: "{pf}\Firebird Replication\Config"; Components: ReplicationEngine; Permissions: everyone-full
Name: "{pf}\Firebird Replication\Docs"; Components: ReplicationEngine; Permissions: everyone-full
Name: "{pf}\Firebird Replication\Logs"; Components: ReplicationEngine; Permissions: everyone-full
Name: "{pf}\Firebird Replication\Errors"; Components: ReplicationEngine; Permissions: everyone-full

[ThirdParty]
CompileLogMethod=append

[Code]
const
  SERVICE_NAME_REPLICATION = 'Firebird Replication Engine';
  
	SERVICE_QUERY_CONFIG		= $1;
	SERVICE_CHANGE_CONFIG		= $2;
	SERVICE_QUERY_STATUS		= $4;
	SERVICE_START				= $10;
	SERVICE_STOP				= $20;
	SERVICE_ALL_ACCESS			= $f01ff;
	SC_MANAGER_ALL_ACCESS		= $f003f;
	SERVICE_WIN32_OWN_PROCESS	= $10;
	SERVICE_WIN32_SHARE_PROCESS	= $20;
	SERVICE_WIN32				= $30;
	SERVICE_INTERACTIVE_PROCESS = $100;
	SERVICE_BOOT_START          = $0;
	SERVICE_SYSTEM_START        = $1;
	SERVICE_AUTO_START          = $2;
	SERVICE_DEMAND_START        = $3;
	SERVICE_DISABLED            = $4;
	SERVICE_DELETE              = $10000;
	SERVICE_CONTROL_STOP		= $1;
	SERVICE_CONTROL_PAUSE		= $2;
	SERVICE_CONTROL_CONTINUE	= $3;
	SERVICE_CONTROL_INTERROGATE = $4;
	SERVICE_STOPPED				= $1;
	SERVICE_START_PENDING       = $2;
	SERVICE_STOP_PENDING        = $3;
	SERVICE_RUNNING             = $4;
	SERVICE_CONTINUE_PENDING    = $5;
	SERVICE_PAUSE_PENDING       = $6;
	SERVICE_PAUSED              = $7;

  //
  // Server install Type
  //
  StandAlone = 8000;
  Client = 8001;
  Server = 8002;
  Cloud = 8003;

  crlf = #13#10;

type
  //
  // Enumeration used to specify a .NET framework version 
  //
  TDotNetFramework = (
    DotNet_v11_4322,  // .NET Framework 1.1
    DotNet_v20_50727, // .NET Framework 2.0
    DotNet_v30,       // .NET Framework 3.0
    DotNet_v35,       // .NET Framework 3.5
    DotNet_v4_Client, // .NET Framework 4.0 Client Profile
    DotNet_v4_Full,   // .NET Framework 4.0 Full Installation
    DotNet_v45);      // .NET Framework 4.5


	SERVICE_STATUS = record
    	dwServiceType				: cardinal;
    	dwCurrentState				: cardinal;
    	dwControlsAccepted			: cardinal;
    	dwWin32ExitCode				: cardinal;
    	dwServiceSpecificExitCode	: cardinal;
    	dwCheckPoint				: cardinal;
    	dwWaitHint					: cardinal;
	end;
	HANDLE = cardinal;

var
  Email, Password, FirstName, LastName: String;
  PageLogin: TInputQueryWizardPage;
  PageInstallType: TInputOptionWizardPage;
  PageWebsite: TInputQueryWizardPage;
  PageSelectServer: TInputOptionWizardPage;
  installType: Integer;
  serverName: String;
  svcContents: string;
  posContents: string;
  posXML: string;
  svcXML: string;
  bCanContinue: boolean;
  siteID: integer;
  websiteUrl: string;

const
  NET_FW_SCOPE_ALL = 0;
  NET_FW_IP_VERSION_ANY = 2;
  NET_FW_ACTION_ALLOW = 1;


procedure SetFirewallExceptionXP(AppName,FileName:string);
var
  FirewallObject: Variant;
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  try
    FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
    FirewallObject.ProcessImageFileName := FileName;
    FirewallObject.Name := AppName;
    FirewallObject.Scope := NET_FW_SCOPE_ALL;
    FirewallObject.IpVersion := NET_FW_IP_VERSION_ANY;
    FirewallObject.Enabled := True;
    FirewallManager := CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
    FirewallProfile.AuthorizedApplications.Add(FirewallObject);
  except
  end;
end;

procedure SetFirewallExceptionVista(AppName,FileName:string);
var
  firewallRule: Variant;
  firewallPolicy: Variant;
begin
  try
    firewallRule := CreateOleObject('HNetCfg.FWRule');
    firewallRule.Action := NET_FW_ACTION_ALLOW;
    firewallRule.Description := AppName;
    firewallRule.ApplicationName := FileName;
    firewallRule.Enabled := True;
    firewallRule.InterfaceTypes := 'All';
    firewallRule.Name := AppName;

    firewallPolicy := CreateOleObject('HNetCfg.FwPolicy2');
    firewallPolicy.Rules.Add(firewallRule);
  except
  end;
end;

procedure SetFirewallException(AppName,FileName:string);
var
  WindVer: TWindowsVersion;
begin
  try
    GetWindowsVersionEx(WindVer);

    if WindVer.NTPlatform and (WindVer.Major >= 6) then
      SetFirewallExceptionVista(AppName,FileName)
    else
      SetFirewallExceptionXP(AppName,FileName);
  except
  end;
end;

procedure RemoveFirewallException( FileName:string );
var
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  try
    FirewallManager := CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
    FireWallProfile.AuthorizedApplications.Remove(FileName);
  except
  end;
end;



procedure FirebirdPostInstallCheck();
begin
  SetFirewallException('Shifoo Systems Firebird Database', 
    ExpandConstant('{pf}') + '\{#MyAppPublisher}\Firebird\firebird.exe');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep=usPostUninstall then 
  begin
     RemoveFirewallException(ExpandConstant('{pf}') + '\{#MyAppPublisher}\Firebird\firebird.exe');
  end;
end;


//
// Checks whether the specified .NET Framework version and service pack
// is installed (See: http://www.kynosarges.de/DotNetVersion.html)
//
// Parameters:
//   Version     - Required .NET Framework version
//   ServicePack - Required service pack level (0: None, 1: SP1, 2: SP2 etc.)
//
function IsDotNetInstalled(Version: TDotNetFramework; ServicePack: cardinal): boolean;
var
    KeyName      : string;
    Check45      : boolean;
    Success      : boolean;
    InstallFlag  : cardinal; 
    ReleaseVer   : cardinal;
    ServiceCount : cardinal;
begin
    // Registry path for the requested .NET Version
    KeyName := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\';

    case Version of
      DotNet_v11_4322:  KeyName := KeyName + 'v1.1.4322';
      DotNet_v20_50727: KeyName := KeyName + 'v2.0.50727';
      DotNet_v30:       KeyName := KeyName + 'v3.0';
      DotNet_v35:       KeyName := KeyName + 'v3.5';
      DotNet_v4_Client: KeyName := KeyName + 'v4\Client';
      DotNet_v4_Full:   KeyName := KeyName + 'v4\Full';
      DotNet_v45:       KeyName := KeyName + 'v4\Full';
    end;

    // .NET 3.0 uses "InstallSuccess" key in subkey Setup
    if (Version = DotNet_v30) then
      Success := RegQueryDWordValue(HKLM, KeyName + '\Setup', 'InstallSuccess', InstallFlag) else
      Success := RegQueryDWordValue(HKLM, KeyName, 'Install', InstallFlag);

    // .NET 4.0/4.5 uses "Servicing" key instead of "SP"
    if (Version = DotNet_v4_Client) or
       (Version = DotNet_v4_Full) or
       (Version = DotNet_v45) then
      Success := Success and RegQueryDWordValue(HKLM, KeyName, 'Servicing', ServiceCount) else
      Success := Success and RegQueryDWordValue(HKLM, KeyName, 'SP', ServiceCount);

    // .NET 4.5 is distinguished from .NET 4.0 by the Release key
    if (Version = DotNet_v45) then
      begin
        Success := Success and RegQueryDWordValue(HKLM, KeyName, 'Release', ReleaseVer);
        Success := Success and (ReleaseVer >= 378389);
      end;

    Result := Success and (InstallFlag = 1) and (ServiceCount >= ServicePack);
end;

// #######################################################################################
// nt based service utilities
// #######################################################################################
function OpenSCManager(lpMachineName, lpDatabaseName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenSCManagerA@advapi32.dll stdcall';

function OpenService(hSCManager :HANDLE;lpServiceName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenServiceA@advapi32.dll stdcall';

function CloseServiceHandle(hSCObject :HANDLE): boolean;
external 'CloseServiceHandle@advapi32.dll stdcall';

function CreateService(hSCManager :HANDLE;lpServiceName, lpDisplayName: string;dwDesiredAccess,dwServiceType,dwStartType,dwErrorControl: cardinal;lpBinaryPathName,lpLoadOrderGroup: String; lpdwTagId : cardinal;lpDependencies,lpServiceStartName,lpPassword :string): cardinal;
external 'CreateServiceA@advapi32.dll stdcall';

function DeleteService(hService :HANDLE): boolean;
external 'DeleteService@advapi32.dll stdcall';

function StartNTService(hService :HANDLE;dwNumServiceArgs : cardinal;lpServiceArgVectors : cardinal) : boolean;
external 'StartServiceA@advapi32.dll stdcall';

function ControlService(hService :HANDLE; dwControl :cardinal;var ServiceStatus :SERVICE_STATUS) : boolean;
external 'ControlService@advapi32.dll stdcall';

function QueryServiceStatus(hService :HANDLE;var ServiceStatus :SERVICE_STATUS) : boolean;
external 'QueryServiceStatus@advapi32.dll stdcall';

function QueryServiceStatusEx(hService :HANDLE;ServiceStatus :SERVICE_STATUS) : boolean;
external 'QueryServiceStatus@advapi32.dll stdcall';

function OpenServiceManager() : HANDLE;
begin
	if UsingWinNT() = true then begin
		Result := OpenSCManager('','ServicesActive',SC_MANAGER_ALL_ACCESS);
		if Result = 0 then
			MsgBox('the servicemanager is not available', mbError, MB_OK)
	end
	else begin
			MsgBox('only nt based systems support services', mbError, MB_OK)
			Result := 0;
	end
end;

function IsServiceInstalled(ServiceName: string) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := OpenService(hSCM,ServiceName,SERVICE_QUERY_CONFIG);
        if hService <> 0 then begin
            Result := true;
            CloseServiceHandle(hService)
		end;
        CloseServiceHandle(hSCM)
	end
end;

function InstallService(FileName, ServiceName, DisplayName, Description : string;ServiceType,StartType :cardinal) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := CreateService(hSCM,ServiceName,DisplayName,SERVICE_ALL_ACCESS,ServiceType,StartType,0,FileName,'',0,'','','');
		if hService <> 0 then begin
			Result := true;
			// Win2K & WinXP supports aditional description text for services
			if Description<> '' then
				RegWriteStringValue(HKLM,'System\CurrentControlSet\Services' + ServiceName,'Description',Description);
			CloseServiceHandle(hService)
		end;
        CloseServiceHandle(hSCM)
	end
end;

function RemoveService(ServiceName: string) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := OpenService(hSCM,ServiceName,SERVICE_DELETE);
        if hService <> 0 then begin
            Result := DeleteService(hService);
            CloseServiceHandle(hService)
		end;
        CloseServiceHandle(hSCM)
	end
end;

function StartService(ServiceName: string) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := OpenService(hSCM,ServiceName,SERVICE_START);
        if hService <> 0 then begin
        	Result := StartNTService(hService,0,0);
            CloseServiceHandle(hService)
		end;
        CloseServiceHandle(hSCM)
	end;
end;

function StopService(ServiceName: string) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
	Status	: SERVICE_STATUS;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := OpenService(hSCM,ServiceName,SERVICE_STOP);
        if hService <> 0 then begin
        	Result := ControlService(hService,SERVICE_CONTROL_STOP,Status);
            CloseServiceHandle(hService)
		end;
        CloseServiceHandle(hSCM)
	end;
end;

function IsServiceRunning(ServiceName: string) : boolean;
var
	hSCM	: HANDLE;
	hService: HANDLE;
	Status	: SERVICE_STATUS;
begin
	hSCM := OpenServiceManager();
	Result := false;
	if hSCM <> 0 then begin
		hService := OpenService(hSCM,ServiceName,SERVICE_QUERY_STATUS);
    	if hService <> 0 then begin
			if QueryServiceStatus(hService,Status) then begin
				Result :=(Status.dwCurrentState = SERVICE_RUNNING)
        	end;
            CloseServiceHandle(hService)
		    end;
        CloseServiceHandle(hSCM)
	end
end;


// #######################################################################################
// create an entry in the services file
// #######################################################################################
function SetupService(service, port, comment: string) : boolean;
var
	filename	: string;
	s			: string;
	lines		: TArrayOfString;
	n			: longint;
	i			: longint;
	errcode		: integer;
	servnamlen	: integer;
	error		: boolean;
begin
	if UsingWinNT() = true then
		filename := ExpandConstant('{sys}\drivers\etc\services')
	else
		filename := ExpandConstant('{win}\services');

	if LoadStringsFromFile(filename,lines) = true then 
  begin
		Result		:= true;
		n			:= GetArrayLength(lines) - 1;
		servnamlen	:= Length(service);
		error		:= false;

		for i:=0 to n do begin
			if Copy(lines[i],1,1) <> '#' then 
      begin
				s := Copy(lines[i],1,servnamlen);
				if CompareText(s,service) = 0 then
					exit; // found service-entry

				if Pos(port,lines[i]) > 0 then 
        begin
					error := true;
					lines[i] := '#' + lines[i] + '   # disabled because collision with  ' + service + ' service';
				end;
			end
			else if CompareText(Copy(lines[i],2,servnamlen),service) = 0 then begin
				// service-entry was disabled
				Delete(lines[i],1,1);
				Result := SaveStringsToFile(filename,lines,false);
				exit;
			end;
		end;

		if error = true then 
    begin
			// save disabled entries
			if SaveStringsToFile(filename,lines,false) = false then 
      begin
				Result := false;
				exit;
			end;
		end;

		// create new service entry
		s := service + '       ' + port + '           # ' + comment + #13#10;
		if SaveStringToFile(filename,s,true) = false then begin
			Result := false;
			exit;
		end;

		if (error) then 
    begin
			MsgBox('the ' + service + ' port was already used. The old service is disabled now. You should check the services file manually now.',mbInformation,MB_OK);
		end;
	end
	else
		Result := false;
end;

procedure StopReplicationService();
begin
  if (IsServiceRunning(SERVICE_NAME_REPLICATION)) then
  begin
    if (not StopService(SERVICE_NAME_REPLICATION)) then
    begin
      MsgBox('Failed to stop ' + SERVICE_NAME_REPLICATION + 
        ' service.#13#13Restart may be required.', mbInformation, MB_OK);

    end;
  end;
end;

procedure StartReplicationService();
begin
  if (not IsServiceRunning(SERVICE_NAME_REPLICATION)) then
  begin
    if (not StartService(SERVICE_NAME_REPLICATION)) then
    begin
      MsgBox('Failed to start ' + SERVICE_NAME_REPLICATION + 
        ' service.#13#13Restart may be required.', mbInformation, MB_OK);
    end;
  end;
end;

function FileReplaceString(const FileName, SearchString, ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  MyFile := TStringList.Create;

  try
    result := true;

    try
      MyFile.LoadFromFile(FileName);
      MyText := MyFile.Text;

      if StringChangeEx(MyText, SearchString, ReplaceString, True) > 0 then //Only save if text has been changed.
      begin;
        MyFile.Text := MyText;
        MyFile.SaveToFile(FileName);
      end;
    except
      result := false;
    end;
  finally
    MyFile.Free;
  end;
end;

// other functions

function BoolToStr(b: Boolean): string;
begin
  if (b) then
  begin
    Result := 'true';
  end else
  begin
    Result := 'false';
  end
end;

procedure SelectComponentsFromInstallType();
var
  idxFirebird, idxPOS, idxService, idxDatabase: Integer;
begin
  idxFirebird := WizardForm.ComponentsList.Items.IndexOf('Firebird 3.0.2');
  idxPOS := WizardForm.ComponentsList.Items.IndexOf('Small Business Enterprise Manager');
  idxService := WizardForm.ComponentsList.Items.IndexOf('Replication Engine');
  idxDatabase := WizardForm.ComponentsList.Items.IndexOf('Database');

  if (installType = Server) then
  begin
    WizardForm.ComponentsList.Checked[idxFirebird] := True;
    WizardForm.ComponentsList.ItemEnabled[idxFirebird] := False;

    WizardForm.ComponentsList.Checked[idxPOS] := False;
    WizardForm.ComponentsList.ItemEnabled[idxPOS] := False;

    WizardForm.ComponentsList.Checked[idxService] := True;
    WizardForm.ComponentsList.ItemEnabled[idxService] := False;

    WizardForm.ComponentsList.Checked[idxDatabase] := True;
    WizardForm.ComponentsList.ItemEnabled[idxDatabase] := False;
  end else
  if (installType = Cloud) then
  begin
    WizardForm.ComponentsList.Checked[idxFirebird] := False;
    WizardForm.ComponentsList.ItemEnabled[idxFirebird] := False;

    WizardForm.ComponentsList.Checked[idxPOS] := True;
    WizardForm.ComponentsList.ItemEnabled[idxPOS] := True;

    WizardForm.ComponentsList.Checked[idxService] := False;
    WizardForm.ComponentsList.ItemEnabled[idxService] := False;

    WizardForm.ComponentsList.Checked[idxDatabase] := False;
    WizardForm.ComponentsList.ItemEnabled[idxDatabase] := False;
  end else
  if (installType = StandAlone) then
  begin
    WizardForm.ComponentsList.Checked[idxFirebird] := True;
    WizardForm.ComponentsList.ItemEnabled[idxFirebird] := False;

    WizardForm.ComponentsList.Checked[idxPOS] := True;
    WizardForm.ComponentsList.ItemEnabled[idxPOS] := False;

    WizardForm.ComponentsList.Checked[idxService] := True;
    WizardForm.ComponentsList.ItemEnabled[idxService] := False;

    WizardForm.ComponentsList.Checked[idxDatabase] := True;
    WizardForm.ComponentsList.ItemEnabled[idxDatabase] := False;
  end else
  begin
    WizardForm.ComponentsList.Checked[idxFirebird] := False;
    WizardForm.ComponentsList.ItemEnabled[idxFirebird] := False;

    WizardForm.ComponentsList.Checked[idxPOS] := True;
    WizardForm.ComponentsList.ItemEnabled[idxPOS] := False;

    WizardForm.ComponentsList.Checked[idxService] := False;
    WizardForm.ComponentsList.ItemEnabled[idxService] := False;

    WizardForm.ComponentsList.Checked[idxDatabase] := False;
    WizardForm.ComponentsList.ItemEnabled[idxDatabase] := False;
  end;
end;

// Split a string into an array using passed delimeter
procedure SplitString(var Dest: TArrayOfString; Text: String; Separator: String);
var
	i: Integer;
begin
	i := 0;
	repeat
		SetArrayLength(Dest, i+1);
		
    if Pos(Separator,Text) > 0 then	
    begin
			Dest[i] := Copy(Text, 1, Pos(Separator, Text)-1);
			Text := Copy(Text, Pos(Separator,Text) + Length(Separator), Length(Text));
			i := i + 1;
		end else 
    begin
			 Dest[i] := Text;
			 Text := '';
		end;
	until Length(Text)=0;
end;


function GetServerList(): boolean;
var
  WinHttpReq: Variant;
  validateURL: string;
  resultText: string;
  aSelectedServers:	TArrayOfString;
  i: Integer;
begin
  Result := false;
  validateURL := 'http://localhost:60009/Members/Installer/PosValidation.aspx?' +
    'Action=Servers' + 
    '&FirstName=' + FirstName +
    '&LastName=' + LastName +
    '&Email=' + Email + 
    '&Password=' + Password;

  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');

  WinHttpReq.Open('GET', validateURL, false);
  WinHttpReq.setRequestHeader('User-Agent', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)');
  WinHttpReq.Send();

  if (WinHttpReq.Status <> 200) then 
  begin
    MsgBox('Could not obtain server list, please ensure you have a valid internet connection.', mbError, MB_OK);
  end else
  begin
    resultText := WinHttpReq.ResponseText;

    if (Copy(WinHttpReq.ResponseText, 0, 3) = '999') then
    begin
      MsgBox(Copy(resultText, 4, Length(resultText) -3), mbError, MB_OK);
      Result := false;
      Exit;
    end else
    begin
      Result := true;
    end;

		SplitString(aSelectedServers, resultText, '#');

    PageSelectServer.CheckListBox.Items.Clear();

		if GetArrayLength(aSelectedServers) > 0 then 
    begin
			for i := 0 to GetArrayLength(aSelectedServers)-1 do 
      begin
        PageSelectServer.Add(aSelectedServers[i]);

        if (aSelectedServers[i] <> GetComputerNameString()) then
        begin
          siteID := siteID + 1;
        end;
      end;

      if (siteID = 0) then
        siteID := 1;      
    end;
  end;
end;

function SetupLoginDetails(Action: string; ServiceXML: string; 
  POSXML: string): string;
var
  WinHttpReq: Variant;
  validateURLJson: string;
  validateURL: string;
  index1, index2: integer;
  resultText: string;
  remoteDB: string;
  root: string;
  jsonPost: string;
  post: string;
begin
  validateURLJson := 'http://localhost:60009/api/SmallBusinessManager/ValidateInstall/';
  validateURL := 'https://localhost:44307/api/sbm/systemInstall/';
  jsonPost := '{ "Action"  : "' + Action + '", ' +
    '"ComputerName"  : "' + GetComputerNameString() + '", ' +
    '"Email" : "' + Email + '", ' +
    '"Password" : "' + Password + '", ' +
    '"FirstName" : "' + FirstName + '", ' +
    '"LastName" : "' + Lastname + '", ' +
    '"InstallType" : "' + IntToStr(installType) + '", ' +
    '"ServerName" : "' + serverName + '", ' +
    '"Website" : "' + websiteUrl +'", ' + 
    '"Path" : "' + ExpandConstant('{app}') + '" }';
   post := 
    'Action=' + Action +
    '&ComputerName' + GetComputerNameString() +
    '&Email=' + Email +
    '&Password=' + Password +
    '&FirstName=' + FirstName +
    '&LastName=' + Lastname +
    '&InstallType=' + IntToStr(installType) +
    '&ServerName=' + serverName +
    '&Website=' + websiteUrl + 
    '&Path=' + ExpandConstant('{app}');
  MsgBox(validateURL, MBInformation, MB_OK);

  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
  WinHttpReq.Open('GET', validateURL + '?' + post, false);
  WinHttpReq.setRequestHeader('User-Agent', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)');
  WinHttpReq.Send();

  if (WinHttpReq.Status <> 200) then 
  begin
    MsgBox('Could not Validate Installation, please ensure you have a valid internet connection. ' + IntToStr(WinHttpReq.Status), mbError, MB_OK);
  end else
  begin

    resultText := WinHttpReq.ResponseText;

    if Length(resultText) > 0 then 
    begin
      if (Copy(WinHttpReq.ResponseText, 0, 3) = '999') then
      begin
        MsgBox(Copy(resultText, 4, Length(resultText) -3), mbError, MB_OK);
        bCanContinue := false;
      end else
      begin
        bCanContinue := true;
      end;
    end else
      MsgBox('Result could not be determined, please contact support', mbError, MB_OK);
  end; 

  Result := resultText;
end;

procedure AfterDatabaseInstall();
begin

end;

procedure CreateFirebirdAlias();
begin

end;

function GetSelectedServer(): string;
var
  i: Integer;
begin
  i := PageSelectServer.SelectedValueIndex;
  serverName := PageSelectServer.CheckListBox.ItemCaption[i];
end;

procedure HelpButtonOnClick(Sender: TObject);
var
  ResultCode: Integer;
begin
  ExtractTemporaryFile('erminstaller.chm');

  if (FileExists(ExpandConstant('{tmp}\erminstaller.chm'))) then
  begin
    ShellExec('', ExpandConstant('{tmp}\erminstaller.chm'), '', ExpandConstant('{tmp}'), SW_SHOW, ewNoWait, ResultCode);
  end;
end;

procedure CreateHelpButton (ParentForm: TSetupForm; X: integer; 
  Y: integer; W: integer; H: integer);
var
  HelpButton : TNewButton ;
begin
  HelpButton := TNewButton.Create(ParentForm);
  HelpButton.Left := X;
  HelpButton.Top := Y;
  HelpButton.Width := W;
  HelpButton.Height := H;
  HelpButton.Caption := '&Help';
  HelpButton.OnClick := @HelpButtonOnClick;
  HelpButton.Parent := ParentForm ;
end;

procedure InitializeWizard();
begin
  PageInstallType := CreateInputOptionPage(wpWelcome, 'Install Type', 
    'Please select the type of install you would like to perform.', '',
    True, False);
  PageInstallType.Add('Cloud');
  PageInstallType.Add('Stand alone');
  PageInstallType.Add('Client');
  PageInstallType.Add('Server');
  PageInstallType.Values[0] := True;
 
  PageWebsite := CreateInputQueryPage(PageInstallType.ID, 
    'Website', 'Please enter your website address (Url)',
    'If you have a website that you want us to host, please enter the url, i.e. http://www.mywebsite.com');
  
  // Create the user page
  PageLogin := CreateInputQueryPage(PageWebsite.ID,
    'Login Details', 'Enter your login details',
    'Please enter your name, email address and password, then click Next, if you do not have an account one will be created for you.');

  // Add items (False means it's not a password edit)
  PageLogin.Add('First Name:', False);
  PageLogin.Add('Surname:', False);
  PageLogin.Add('Email Address:', False);
  PageLogin.Add('Password:', True);

  PageWebsite.Add('Website Url:', False);

  // Set initial values (debug only)
  PageLogin.Values[0] := 'Simon';
  PageLogin.Values[1] := 'Carter';
  PageLogin.Values[2] := 'test3@shifoo.com';
  PageLogin.Values[3] := 'Passw0rd';
  PageWebsite.Values[0] := 'http://www.mywebsite.com';

  // Read values into variables
  FirstName := PageLogin.Values[0];
  LastName := PageLogin.Values[1];
  Email := PageLogin.Values[2];
  Password := PageLogin.Values[3];

  PageSelectServer := CreateInputOptionPage(PageLogin.ID, 'Server',
    'Please select your server', '', True, True);

  WizardForm.TypesCombo.ItemIndex := 2;

  CreateHelpButton(WizardForm, ScaleX(20), WizardForm.CancelButton.Top,
      WizardForm.CancelButton.Width, WizardForm.CancelButton.Height);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  //MsgBox(IntToStr(CurPageID), mbInformation, MB_OK);

  if (CurPageID = PageInstallType.ID) then   
  begin
    if (PageInstallType.Values[0]) then
    begin 
      installType := Cloud;
    end else
    if (PageInstallType.Values[1]) then
    begin
      installType := StandAlone;
    end else
    if (PageInstallType.Values[2]) then
    begin
      installType := Client;
    end else
    begin
      installType := Server;
    end;

    SelectComponentsFromInstallType();

    Result := True;
  end else if (CurPageID = PageWebsite.ID) then
  begin
    websiteUrl := PageWebsite.Values[0];
    Result := true;
  end else if (CurPageID = PageLogin.ID) then
  begin
    // Read values into variables
    FirstName := PageLogin.Values[0];
    LastName := PageLogin.Values[1];
    Email := PageLogin.Values[2];
    Password := PageLogin.Values[3];


    if (installType <> Cloud) then
      Result := GetServerList()
    else
      Result := true;
  end else if (CurPageID = PageSelectServer.ID) then
  begin
    if (PageSelectServer.SelectedValueIndex = -1) then
    begin
      MsgBox('Please select a server to continue!', mbError, MB_OK);
      Result := False;
      Exit;
    end else
    begin
      Result := True;
    end;
  end else if (CurPageID = 8) then
  begin
    posXML := ExpandConstant('{app}') + '\HSCConfig.xml';
    svcXML := ExpandConstant('{app}') + '\Service.xml';
    
    if (installType = Cloud) then
    begin
      posContents := SetupLoginDetails('Cloud', svcXML, posXML);
    end else
    if (installType = Client) then
    begin
      serverName := GetSelectedServer();
      posContents := SetupLoginDetails('Client', svcXML, posXML);
    end else
    if (installType = Server) then
    begin
      serverName := GetComputerNameString();
      svcContents := SetupLoginDetails('Server', svcXML, posXML);
    end else // stand alone
    begin
      serverName := GetComputerNameString();
      svcContents := SetupLoginDetails('Server', svcXML, posXML);
      posContents := SetupLoginDetails('Client', svcXML, posXML);
    end;


    Result := true;//FileExists(posXML) and FileExists(svcXML);
  end else if (CurPageID = 14) then
  begin
    SaveStringToFile(svcXML, svcContents, False);
    SaveStringToFile(posXML, posContents, False);
    Result := true;
  end else
    Result := true;
end;

function InitializeSetup(): Boolean;
begin
    if not IsDotNetInstalled(DotNet_v4_Client, 0) then 
    begin
        MsgBox('Point Of Sale requires Microsoft .NET Framework 4.5 Client Profile.'#13#13
            'Please use Windows Update to install this version,'#13
            'and then re-run the Point of Sale setup program.', mbInformation, MB_OK);
        result := false;
    end else
        result := true;


    if (result) then
    begin
      StopReplicationService();
    end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  //MsgBox(IntToStr(PageID), mbInformation, MB_OK);

  if (PageID = wpSelectComponents) then
    Result := (PageID = wpSelectComponents);
  
  if (PageID = PageSelectServer.ID) then
  begin
    if (installType = Cloud) then
      Result := true
    else
      Result := (installType <> Client);
  end
end;


function GetCustomSetupExitCode: Integer;
var
  fileName: string;
  replicationLoc: string;
  params: string;
  ResultCode: Integer;
begin
  // save configuration files
  if (not SaveStringToFile(svcXML, svcContents, False)) then
  begin
    MsgBox('Failed to Save Replication Configuration.', mbError, MB_OK);
  end;
    
  if (not SaveStringToFile(posXML, posContents, False)) then
  begin
    MsgBox('Failed to save Small Business Manager Configuration', mbError, MB_OK);
  end;

  fileName := ExpandConstant('{app}') + '\Shifoo.SBM.exe';


  // change master user to logged in user details
  if (installType <> Client) then
  begin
    // Create an entry for replication engine
    params := '/configureReplication -installfile:"' + ExpandConstant('{pf}') + 
      '\Firebird Replication\POSTemplateReplication.txt" -siteID:"' + IntToStr(siteID) + '"';
    Exec(fileName, params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

    params := '/SetupInitialUser /firstName:"' + FirstName +
      '" /lastName:"' + LastName + '" /email:"' + Email + 
      '" /password:"' + Password + '"';
    Exec(fileName, params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;


  replicationLoc := ExpandConstant('{pf}') + '\Firebird Replication\';
  fileName := replicationLoc + 'Replication.Service.exe';
  params := '/encrypt "/file ' + replicationLoc + 'POSTemplateReplication.txt" ' +
    '"/encryptedFile ' + replicationLoc + 'Config\POSClient.frc"';

  Exec(fileName, params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

  if (not IsServiceRunning(SERVICE_NAME_REPLICATION)) then
  begin
    if (not StartService(SERVICE_NAME_REPLICATION)) then
    begin
      MsgBox('Failed to start ' + SERVICE_NAME_REPLICATION + 
        ' service.#13#13Please start the service named ' + SERVICE_NAME_REPLICATION +
        ' manually.', mbInformation, MB_OK);
    end;
  end;

  Result := 0;
end;
