<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedControls</name>
    </assembly>
    <members>
        <member name="T:SharedControls.Classes.Backup.DatabaseBackupThread">
            <summary>
            Database backup class
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupThread.BackupDatabase(System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Database Backup
            </summary>
            <param name="backupPath">Path to where backups are sent</param>
            <param name="upload"></param>
            <param name="useSiteID"></param>
            <param name="siteID"></param>
            <param name="name"></param>
            <param name="threadName"></param>
            <param name="connectionString"></param>
            <param name="ftpHost"></param>
            <param name="ftpUsername"></param>
            <param name="ftpPassword"></param>
            <param name="ftpPort"></param>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupThread.#ctor(SharedControls.Classes.Backup.DatabaseBackupOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupThread.BackupsInProgress">
            <summary>
            Determines if a backup is currently being completed
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupThread.BackupInProgress(System.String)">
            <summary>
            Returns wether a backup is in progress
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupThread.Run(System.Object)">
            <summary>
            Performs a backup
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="E:SharedControls.Classes.Backup.DatabaseBackupThread.OnStageChanged">
            <summary>
            Event raised when a stage changes
            </summary>
        </member>
        <member name="T:SharedControls.Classes.Backup.DatabaseBackupOptions">
            <summary>
            Class containing backup options
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupOptions.#ctor(System.String,System.Boolean,System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="path"></param>
            <param name="useSiteID"></param>
            <param name="siteID"></param>
            <param name="name"></param>
            <param name="upload"></param>
            <param name="connectionString"></param>
            <param name="ftpHost"></param>
            <param name="ftpUsername"></param>
            <param name="ftpPassword"></param>
            <param name="ftpPort"></param>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.Path">
            <summary>
            Database backup Path
            </summary>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.UseSiteID">
            <summary>
            indicates weather the store id forms part of the backup name
            </summary>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.Name">
            <summary>
            Name to be used as part of backup name if UseStoreId is false
            </summary>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.Upload">
            <summary>
            Indicates wether the backup is uploaded to a server via FTP
            </summary>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.ConnectionString">
            <summary>
            Connection String used to connect to the database
            </summary>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupOptions.SiteID">
            <summary>
            Site ID of backup
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupOptions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedControls.Classes.Backup.DatabaseBackupStage">
            <summary>
            Enum containing the different stages of a backup
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.BackupStarted">
            <summary>
            Backup has started
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.BackingUpDatabase">
            <summary>
            Backup in progress
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.DatabaseBackupComplete">
            <summary>
            Backup Complete
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.CompressingBackup">
            <summary>
            Backup compress start
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.BackupCompressed">
            <summary>
            Backup compressed
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.SendingFileToServer">
            <summary>
            Backup being sent to server
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.FileSentToServer">
            <summary>
            File sent to server
            </summary>
        </member>
        <member name="F:SharedControls.Classes.Backup.DatabaseBackupStage.BackupComplete">
            <summary>
            Backup finished
            </summary>
        </member>
        <member name="T:SharedControls.Classes.Backup.DatabaseBackupEventArgs">
            <summary>
            Backup event arguments
            </summary>
        </member>
        <member name="M:SharedControls.Classes.Backup.DatabaseBackupEventArgs.#ctor(SharedControls.Classes.Backup.DatabaseBackupStage)">
            <summary>
            Constructor
            </summary>
            <param name="stage"></param>
        </member>
        <member name="P:SharedControls.Classes.Backup.DatabaseBackupEventArgs.Stage">
            <summary>
            Readonly current stage of backup
            </summary>
        </member>
        <member name="T:SharedControls.Classes.Backup.DatabaseBackupEventHandler">
            <summary>
            Event handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SharedControls.Classes.DateTimeExtender">
            <summary>
            DateTime extender
            </summary>
        </member>
        <member name="M:SharedControls.Classes.DateTimeExtender.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds up time to nearest xx minutes
            
            Originally found at 
            
            https://stackoverflow.com/questions/7029353/how-can-i-round-up-the-time-to-the-nearest-x-minutes
            </summary>
            <param name="dt"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:SharedControls.Classes.HTMLTableParser">
            <summary>
            Parse text for html tables
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="textToParse">Text to parse</param>
        </member>
        <member name="P:SharedControls.Classes.HTMLTableParser.ConvertCellHeaderToNormalCell">
            <summary>
            Converts <th> </th> to <td> </td>
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.Execute">
            <summary>
            Start's the parsing of the text
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.RaiseTableStart">
            <summary>
            raises table start event
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.RaiseTableEnd">
            <summary>
            Raises table end event
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.RaiseRowStart">
            <summary>
            raises Row start event
            </summary>
        </member>
        <member name="M:SharedControls.Classes.HTMLTableParser.RaiseRowEnd">
            <summary>
            Raises row end event
            </summary>
        </member>
        <member name="E:SharedControls.Classes.HTMLTableParser.TableStart">
            <summary>
            Table found and parsing of table will begin
            </summary>
        </member>
        <member name="E:SharedControls.Classes.HTMLTableParser.TableEnd">
            <summary>
            End of table reached
            </summary>
        </member>
        <member name="E:SharedControls.Classes.HTMLTableParser.RowStart">
            <summary>
            Start of row parsing
            </summary>
        </member>
        <member name="E:SharedControls.Classes.HTMLTableParser.RowEnd">
            <summary>
            End of row parsing
            </summary>
        </member>
        <member name="E:SharedControls.Classes.HTMLTableParser.RowFound">
            <summary>
            Row Found Args
            </summary>
        </member>
        <member name="T:SharedControls.Classes.RowFoundArgs">
            <summary>
            Event arguments for when row found
            </summary>
        </member>
        <member name="M:SharedControls.Classes.RowFoundArgs.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="cellValues">List of cell values</param>
        </member>
        <member name="P:SharedControls.Classes.RowFoundArgs.CellValues">
            <summary>
            Cell Values for Row
            </summary>
        </member>
        <member name="T:SharedControls.Classes.RowFoundEventHandler">
            <summary>
            Row found event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SharedControls.Classes.ListViewEx">
            <summary>
            List view extender
            </summary>
        </member>
        <member name="F:SharedControls.Classes.ListViewEx._lvColumnSorter">
            <summary>
            Column Sorter
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SharedControls.Classes.ListViewEx.ShowToolTip">
            <summary>
            Indicates wether tool tips are shown or not
            </summary>
        </member>
        <member name="P:SharedControls.Classes.ListViewEx.SaveName">
            <summary>
            Name used when saving/loading state
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            overridden ondrawitem
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            Overridden ondrawsubitem
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            Overridden Draw Column Header
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Overridden Column Click Column
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.Dispose(System.Boolean)">
            <summary>
            Overridden Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden on mouse move method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden OnMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden mouse wheel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnLeave(System.EventArgs)">
            <summary>
            Overridden OnLeave Method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)">
            <summary>
            Overridden OnItemMouseHover
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.Sort">
            <summary>
            Sorts the list view
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.SaveLayout">
            <summary>
            Saves the layout for the listview
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.LoadLayout">
            <summary>
            Loads the layout for the listview
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ListViewEx.RaiseTooltip(Shared.ToolTipEventArgs)">
            <summary>
            Raise tool tip event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SharedControls.Classes.ListViewEx.ToolTipShow">
            <summary>
            Event raised when tooltip needs to be shown
            </summary>
        </member>
        <member name="T:SharedControls.Classes.ControlExtender">
            <summary>
            Control Extender
            
            Overrides all controls, providing a method to suspend/resume drawing to prevent flickering
            </summary>
        </member>
        <member name="M:SharedControls.Classes.ControlExtender.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)">
            <summary>
            SendMessage method from Windows API
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:SharedControls.Classes.ControlExtender.SuspendDrawing(System.Windows.Forms.Control)">
            <summary>
            Suspends drawing of the control to prevent flickering
            </summary>
            <param name="control">current control</param>
        </member>
        <member name="M:SharedControls.Classes.ControlExtender.ResumeDrawing(System.Windows.Forms.Control)">
            <summary>
            Resumes drawing of the control
            </summary>
            <param name="control">current control</param>
        </member>
        <member name="T:SharedControls.Classes.InputBoxResult">
            <summary>
            Class used to store the result of an InputBox.Show message.
            </summary>
        </member>
        <member name="F:SharedControls.Classes.InputBoxResult.ReturnCode">
            <summary>
            Dialog Result
            </summary>
        </member>
        <member name="F:SharedControls.Classes.InputBoxResult.Text">
            <summary>
            Text input by user
            </summary>
        </member>
        <member name="T:SharedControls.Classes.InputBox">
            <summary>
            Summary description for InputBox.
            </summary>
        </member>
        <member name="M:SharedControls.Classes.InputBox.#ctor">
            <summary>
            Constructor - Initialises new instance
            </summary>
        </member>
        <member name="M:SharedControls.Classes.InputBox.Show(System.String)">
            <summary>
            Show input dialog box
            </summary>
            <param name="Prompt">User prompt</param>
            <returns>InputBoxResult</returns>
        </member>
        <member name="M:SharedControls.Classes.InputBox.Show(System.String,System.String,System.Boolean)">
            <summary>
            Show input dialog box
            </summary>
            <param name="Prompt"></param>
            <param name="Title"></param>
            <param name="InputMasked"></param>
            <returns>InputBoxResult</returns>
        </member>
        <member name="M:SharedControls.Classes.InputBox.Show(System.String,System.String)">
            <summary>
            Show input dialog box
            </summary>
            <param name="Prompt"></param>
            <param name="Title"></param>
            <returns>InputBoxResult</returns>
        </member>
        <member name="M:SharedControls.Classes.InputBox.Show(System.String,System.String,System.String)">
            <summary>
            Show input dialog box
            </summary>
            <param name="Prompt"></param>
            <param name="Title"></param>
            <param name="Default"></param>
            <returns>InputBoxResult</returns>
        </member>
        <member name="M:SharedControls.Classes.InputBox.Show(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Show input dialog box
            </summary>
            <param name="Prompt"></param>
            <param name="Title"></param>
            <param name="Default"></param>
            <param name="XPos"></param>
            <param name="YPos"></param>
            <returns>InputBoxResult</returns>
        </member>
        <member name="T:SharedControls.Classes.DataTableEx">
            <summary>
            Extra methods for DataTable
            </summary>
        </member>
        <member name="M:SharedControls.Classes.DataTableEx.First(System.Data.DataTable)">
            <summary>
            Returns the first row in a Table
            </summary>
            <param name="table">Table operation being performed on</param>
            <returns>First DataRow if a row exists, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Classes.DataTableEx.Next(System.Data.DataTable)">
            <summary>
            Returns the next row in the Table
            </summary>
            <param name="table">Table operation being performed on</param>
            <returns>DataRow if found, otherwise null</returns>
        </member>
        <member name="M:SharedControls.Classes.DataTableEx.Previous(System.Data.DataTable)">
            <summary>
            Returns the previous row in the Table
            </summary>
            <param name="table">Table operation being performed on</param>
            <returns>DataRow if found, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Classes.DataTableEx.LastRow(System.Data.DataTable)">
            <summary>
            Determines wether the Table is on the last row
            </summary>
            <param name="table">Table operation being performed on</param>
            <returns>true if last row, otherwise false</returns>
        </member>
        <member name="T:SharedControls.ColorSelector">
            <summary>
            Color selector control
            
            Allows users to select colors
            </summary>
        </member>
        <member name="M:SharedControls.ColorSelector.#ctor">
            <summary>
            Constructor - Initialises new instance
            </summary>
        </member>
        <member name="P:SharedControls.ColorSelector.Description">
            <summary>
            Description above color selector
            </summary>
        </member>
        <member name="P:SharedControls.ColorSelector.Color">
            <summary>
            Selected color
            </summary>
        </member>
        <member name="F:SharedControls.ColorSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.ColorSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.ColorSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.StringExtender">
            <summary>
            Extends the string class adding methods to retrieve 
              ~ Line Count
              ~ Word Count
              ~ Paragraph Count
              ~ Sentence Count
            </summary>
        </member>
        <member name="M:SharedControls.StringExtender.LineCount(System.String,System.String)">
            <summary>
            Returns the number of lines
            </summary>
            <param name="value">Current Control</param>
            <param name="lineFeed">Current line feed being used</param>
            <returns></returns>
        </member>
        <member name="M:SharedControls.StringExtender.WordCount(System.String)">
            <summary>
            Retrieves the number of words
            </summary>
            <param name="value">Current control</param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="M:SharedControls.StringExtender.ParagraphCount(System.String)">
            <summary>
            Retrieves the paragraphs
            </summary>
            <param name="value">Current Control</param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="M:SharedControls.StringExtender.SentenceCount(System.String)">
            <summary>
            Retrieves the number sentences
            </summary>
            <param name="value"></param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="T:SharedControls.TextBoxEx">
            <summary>
            TextBox Ex - Textbox with extra methods / events 
            </summary>
        </member>
        <member name="M:SharedControls.TextBoxEx.#ctor">
            <summary>
            Constructor - Initialises new instance
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.RaiseCustomPasteEvent">
            <summary>
            Indicates wether to raise a Paste event in response to windows paste from clipboard
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.AllowedCharacters">
            <summary>
            List of allowed characters within the list box
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.AllowBackSpace">
            <summary>
            Allow back space
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.AllowCopy">
            <summary>
            Allow copy command
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.AllowPaste">
            <summary>
            Allow paste command
            </summary>
        </member>
        <member name="P:SharedControls.TextBoxEx.AllowCut">
            <summary>
            Allow Cut command
            </summary>
        </member>
        <member name="E:SharedControls.TextBoxEx.OnPaste">
            <summary>
            Custom event handler for copy/paste
            </summary>
        </member>
        <member name="M:SharedControls.TextBoxEx.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overridden OnKeyPress method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.TextBoxEx.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Overridden OnPreviewKeyDown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SharedControls.PasteEventArgs">
            <summary>
            Event arguments for custom paste event
            </summary>
        </member>
        <member name="P:SharedControls.PasteEventArgs.Text">
            <summary>
            Text to be pasted
            </summary>
        </member>
        <member name="T:SharedControls.CustomPasteEventHandler">
            <summary>
            Custom Paste Event Handler
            </summary>
            <param name="sender">sender</param>
            <param name="e">Paste Event Arguments</param>
        </member>
        <member name="T:SharedControls.TextBoxExtender">
            <summary>
            TextBox extender class, provides static methods that can be used on all TextBox controls
            </summary>
        </member>
        <member name="M:SharedControls.TextBoxExtender.WordCount(System.Windows.Forms.TextBox)">
            <summary>
            Retrieves the number of words
            </summary>
            <param name="control"></param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="M:SharedControls.TextBoxExtender.ParagraphCount(System.Windows.Forms.TextBox)">
            <summary>
            Retrieves the paragraphs
            </summary>
            <param name="control"></param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="M:SharedControls.TextBoxExtender.SentenceCount(System.Windows.Forms.TextBox)">
            <summary>
            Retrieves the number sentences
            </summary>
            <param name="control"></param>
            <returns>int, number of words in the textbox</returns>
        </member>
        <member name="T:SharedControls.BaseControl">
            <summary>
            Base Control Class
            </summary>
        </member>
        <member name="M:SharedControls.BaseControl.#ctor">
            <summary>
            Constructor - Initialises a new instance
            </summary>
        </member>
        <member name="P:SharedControls.BaseControl.HintControl">
            <summary>
            If set this control will show hint information for the active control
            </summary>
        </member>
        <member name="M:SharedControls.BaseControl.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            Method called when language changes
            </summary>
            <param name="culture">New UI culture being used</param>
        </member>
        <member name="M:SharedControls.BaseControl.GetHintText(System.String,System.String)">
            <summary>
            Virtual method to obtain Hint Text
            </summary>
            <param name="controlName">Name of control</param>
            <param name="subControlName">Sub control name</param>
            <returns>Hint text for control</returns>
        </member>
        <member name="M:SharedControls.BaseControl.OnCreateControl">
            <summary>
            Overridden OnCreateControl event
            </summary>
        </member>
        <member name="M:SharedControls.BaseControl.OnLoad(System.EventArgs)">
            <summary>
            Overridden OnLoad method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.BaseControl.ShowHardConfirm(System.String,System.String)">
            <summary>
            Shows a dialog with stop icon
            </summary>
            <param name="Title">Title of dialog box</param>
            <param name="Message">Message to be displayed</param>
            <returns>true if user clicks yes, otherwise false</returns>
        </member>
        <member name="M:SharedControls.BaseControl.ShowQuestion(System.String,System.String)">
            <summary>
            Shows a dialog with question icon
            </summary>
            <param name="Title">Title of dialog box</param>
            <param name="Message">Message to be displayed</param>
            <returns>true if user clicks yes, otherwise false</returns>
        </member>
        <member name="M:SharedControls.BaseControl.ShowInformation(System.String,System.String)">
            <summary>
            Show's a dialog with information icon
            </summary>
            <param name="Title">Title of dialog box</param>
            <param name="Message">Message to be displayed</param>
        </member>
        <member name="M:SharedControls.BaseControl.ShowError(System.String,System.String)">
            <summary>
            Shows a dialog with error icon
            </summary>
            <param name="Title">Title of dialog box</param>
            <param name="Message">Message to be displayed</param>
        </member>
        <member name="M:SharedControls.BaseControl.GetLocalizedControls(System.Windows.Forms.Control.ControlCollection,System.String)">
            <summary>
            Internal method used for designer puroposes only
            </summary>
            <param name="parent"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="F:SharedControls.BaseControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.BaseControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.BaseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.BaseSettings">
            <summary>
            Base settings control class
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.#ctor(System.Windows.Forms.TreeNode)">
            <summary>
            Constructor
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="P:SharedControls.BaseSettings.SettingsParentForm">
            <summary>
            Parent Form
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingsSave">
            <summary>
            Controls can override and save data
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingsConfirm">
            <summary>
            Allows a control to confirm settings changed if necessary
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingsLoaded">
            <summary>
            Method called after control is initialised and loaded
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingsControlLoaded">
            <summary>
            Method called after control is initialised and loaded
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingShown">
            <summary>
            Method called when settings form is shown
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.SettingHidden">
            <summary>
            Method called when settings form hidden
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.UpdateSettings">
            <summary>
            Updates all settings
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.UpdateAll">
            <summary>
            Updates all settings
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.RaiseUpdateLists">
            <summary>
            Raises the OnRefreshLists event
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.RefreshPanelList">
            <summary>
            Refreshes the panel list by loading all settings
            </summary>
        </member>
        <member name="P:SharedControls.BaseSettings.HelpID">
            <summary>
            Help ID for Page
            </summary>
        </member>
        <member name="P:SharedControls.BaseSettings.SettingsChanged">
            <summary>
            Indicates wether settings have been changed or not
            </summary>
        </member>
        <member name="P:SharedControls.BaseSettings.TreeNode">
            <summary>
            Node associated with the setting
            </summary>
        </member>
        <member name="E:SharedControls.BaseSettings.OnUpdate">
            <summary>
            OnUpdate event
            </summary>
        </member>
        <member name="E:SharedControls.BaseSettings.OnRefreshLists">
            <summary>
            Event for when lists have been refreshed
            </summary>
        </member>
        <member name="F:SharedControls.BaseSettings.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.BaseSettings.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.BaseSettings.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Setting">
            <summary>
            public class used to hold settings data
            </summary>
        </member>
        <member name="P:SharedControls.Setting.Name">
            <summary>
            Name of the setting
            </summary>
        </member>
        <member name="P:SharedControls.Setting.Description">
            <summary>
            Description for the setting
            
            To be displayed at the top of the form
            </summary>
        </member>
        <member name="P:SharedControls.Setting.SettingsPanel">
            <summary>
            Settings control to be displayed
            </summary>
        </member>
        <member name="T:SharedControls.ListViewColumnSorter">
            <summary>
            This class is an implementation of the 'IComparer' interface.
            </summary>
        </member>
        <member name="F:SharedControls.ListViewColumnSorter.ColumnToSort">
            <summary>
            Specifies the column to be sorted
            </summary>
        </member>
        <member name="F:SharedControls.ListViewColumnSorter.OrderOfSort">
            <summary>
            Specifies the order in which to sort (i.e. 'Ascending').
            </summary>
        </member>
        <member name="F:SharedControls.ListViewColumnSorter.ObjectCompare">
            <summary>
            Case insensitive comparer object
            </summary>
        </member>
        <member name="M:SharedControls.ListViewColumnSorter.#ctor">
            <summary>
            Class constructor.  Initializes various elements
            </summary>
        </member>
        <member name="M:SharedControls.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="P:SharedControls.ListViewColumnSorter.SortColumn">
            <summary>
            Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
            </summary>
        </member>
        <member name="P:SharedControls.ListViewColumnSorter.Order">
            <summary>
            Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
            </summary>
        </member>
        <member name="T:SharedControls.CollapsablePanel">
            <summary>
            Collapsable Panel
            </summary>
        </member>
        <member name="F:SharedControls.CollapsablePanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:SharedControls.CollapsablePanel._originalSize">
            <summary>
            Original size when not collapsed
            </summary>
        </member>
        <member name="F:SharedControls.CollapsablePanel._collapsedSize">
            <summary>
            Height of collapsed panel
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.#ctor">
            <summary>
            Constructor - Initialises a new instance of the class
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.Collapse">
            <summary>
            Forces the panel to collapse, if expanded
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.Expand">
            <summary>
            Forces the panel to expand, if collapsed
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the header
            </summary>
            <param name="g">Graphic object being drawn to</param>
            <param name="rect">Size of the area to draw</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.CheckControlPosition(System.Windows.Forms.Control)">
            <summary>
            Checks the position of child controls, ensuring they don't overlap the header
            </summary>
            <param name="control">Control who's position is being verified</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.Control_Move(System.Object,System.EventArgs)">
            <summary>
            When child control is moved, ensures it does not overlap the header
            </summary>
            <param name="sender">child control</param>
            <param name="e">Empty Event Args</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden OnControlAdded method
            </summary>
            <param name="e">ControlEventArguments</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden OnControlRemoved method
            </summary>
            <param name="e">ControlEventArguments</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden OnPaint method
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden OnMouseClick method
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.OnResize(System.EventArgs)">
            <summary>
            Overridden OnResize method
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:SharedControls.CollapsablePanel.RaiseAfterCollapse">
            <summary>
            Event raised after the panel has been collapsed
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.RaiseBeforeCollapse">
            <summary>
            Event raised before the panel is collapsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.CollapsablePanel.RaiseAfterExpand">
            <summary>
            Event raised after the panel has been collapsed
            </summary>
        </member>
        <member name="M:SharedControls.CollapsablePanel.RaiseBeforeExpand">
            <summary>
            Event raised before the panel is collapsed
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharedControls.Controls.ColumnValue">
            <summary>
            Column Value Control
            </summary>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.#ctor(System.String,Shared.ColumnType)">
            <summary>
            Constructor
            </summary>
            <param name="columnName"></param>
            <param name="columnType"></param>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.#ctor(System.String,Shared.ColumnType,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Constructor
            </summary>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.#ctor(System.String,Shared.ColumnType,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <param name="value"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.#ctor(System.String,Shared.ColumnType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <param name="value"></param>
        </member>
        <member name="P:SharedControls.Controls.ColumnValue.ColumnType">
            <summary>
            type of column
            </summary>
        </member>
        <member name="P:SharedControls.Controls.ColumnValue.ColumnName">
            <summary>
            Name of column
            </summary>
        </member>
        <member name="P:SharedControls.Controls.ColumnValue.ColValue">
            <summary>
            Value of column
            </summary>
        </member>
        <member name="F:SharedControls.Controls.ColumnValue.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Controls.ColumnValue.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Controls.TreeViewEx">
            <summary>
            TreeViewEx - Extension to treeview which adds the RightClickSelect property/event as well as other properties/methods
            </summary>
        </member>
        <member name="M:SharedControls.Controls.TreeViewEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SharedControls.Controls.TreeViewEx.RightClickSelect">
            <summary>
            Indicates that right click on the treeview will select the node
            </summary>
        </member>
        <member name="P:SharedControls.Controls.TreeViewEx.AllowNoNodeSelected">
            <summary>
            If true, the active node can be deselected, if false, there will always be a node selected
            </summary>
        </member>
        <member name="P:SharedControls.Controls.TreeViewEx.SelectedNodeBold">
            <summary>
            Makes the selected node bold if set to true
            </summary>
        </member>
        <member name="P:SharedControls.Controls.TreeViewEx.SelectedNode">
            <summary>
            Currently selected Node
            </summary>
        </member>
        <member name="M:SharedControls.Controls.TreeViewEx.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridde OnMouseDown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SharedControls.Controls.TextBlock">
            <summary>
            TextBlock control - allows for non visible block of text to be placed on a form
            </summary>
        </member>
        <member name="M:SharedControls.Controls.TextBlock.#ctor">
            <summary>
            Constructor - Initialises new instance
            </summary>
        </member>
        <member name="P:SharedControls.Controls.TextBlock.StringBlock">
            <summary>
            Text to be saved within form
            </summary>
        </member>
        <member name="F:SharedControls.Controls.TextBlock.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Controls.TextBlock.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Controls.TextBlock.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.ToastNotification">
            <summary>
            Toast Notification
            </summary>
        </member>
        <member name="M:SharedControls.ToastNotification.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SharedControls.ToastNotification.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:SharedControls.ToastNotification.NotifyPosition">
            <summary>
            Position of notification window
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.NotifyEffect">
            <summary>
            Type of notification
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.Font">
            <summary>
            Font used for message
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.FadeOut">
            <summary>
            Indicates the form will fade out
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.ClickToClose">
            <summary>
            if true, clicking anywhere on the notification will close it
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.ClickForInformation">
            <summary>
            if true, clicking anywhere on the notification will close it
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.BackColor">
            <summary>
            Back color of notification window
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.TextColor">
            <summary>
            Color of the text
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.OpacitySpeed">
            <summary>
            speed of opacity 
            </summary>
        </member>
        <member name="P:SharedControls.ToastNotification.AutomaticallyClose">
            <summary>
            Number of seconds after which the form is automatically closed
            
            0 = does not auto close
            </summary>
        </member>
        <member name="M:SharedControls.ToastNotification.Show(System.String)">
            <summary>
            Show's a toast notification
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharedControls.ToastNotification.Show(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:SharedControls.ToastNotification.Show(System.String,System.String,System.String)">
            <summary>
            Show's a toast notification
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="uniqueID"></param>
        </member>
        <member name="E:SharedControls.ToastNotification.OnClicked">
            <summary>
            Toast item has been clicked
            </summary>
        </member>
        <member name="E:SharedControls.ToastNotification.OnTimeOut">
            <summary>
            Toast notification has timed out and will be closed
            </summary>
        </member>
        <member name="E:SharedControls.ToastNotification.OnCancelled">
            <summary>
            Toast Item has been Cancelled
            </summary>
        </member>
        <member name="E:SharedControls.ToastNotification.OnFocus">
            <summary>
            Toast Item has received Focus
            </summary>
        </member>
        <member name="M:SharedControls.ToastNotification.NotifyClicked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.ToastNotification.NotifyCancelled(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.ToastNotification.NotifyFocus(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.ToastNotification.NotifyTimeOut(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:SharedControls.ToastNotification.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.ToastNotification.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.ToastNotification.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Forms.EnterNumberForm">
            <summary>
            Dialog box for entering a number
            </summary>
        </member>
        <member name="M:SharedControls.Forms.EnterNumberForm.#ctor">
            <summary>
            Constructor - Initialises a new instance of the control
            </summary>
        </member>
        <member name="M:SharedControls.Forms.EnterNumberForm.ShowEnterNumber(System.Windows.Forms.Form,System.String,System.String,System.Int32@)">
            <summary>
            Shows the enter number dialog box
            </summary>
            <param name="parent">Parent form</param>
            <param name="title">Title of dialog box</param>
            <param name="prompt">Prompt used for user</param>
            <param name="number">number entered by user</param>
            <returns>true if user entered a valid number, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.EnterNumberForm.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            Overridden LanguageChanged method
            </summary>
            <param name="culture">New Culture being used</param>
        </member>
        <member name="F:SharedControls.Forms.EnterNumberForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Forms.EnterNumberForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Forms.EnterNumberForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Forms.FormSettings">
            <summary>
            Settings Form
            </summary>
        </member>
        <member name="F:SharedControls.Forms.FormSettings._applicationName">
            <summary>
            Name of application
            </summary>
        </member>
        <member name="F:SharedControls.Forms.FormSettings._helpDeskLocation">
            <summary>
            Helpdesk location
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.#ctor">
            <summary>
            Constructor - initialises new instance
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.#ctor(System.String,System.String)">
            <summary>
            Constructor - initialises new instance
            </summary>
            <param name="applicationName">Name of application</param>
            <param name="helpDeskLocation">url for helpdesk location</param>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            LanguageChanged method - called when UI culture is changed
            </summary>
            <param name="culture">Current UI culture</param>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.LoadSettings">
            <summary>
            Loads child settings controls
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.LoadControlOption(System.String,System.String,System.Windows.Forms.TreeNode,SharedControls.BaseSettings)">
            <summary>
            Loads a new setting option to the form
            </summary>
            <param name="name">Name of setting control</param>
            <param name="description">Description of setting</param>
            <param name="parent">Parent tree node, or null if no parent</param>
            <param name="settingsPanel">Settings Panel to be shown when user selects the setting</param>
            <returns>TreeNode item which controls the settings panel</returns>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.LoadAllSettings">
            <summary>
            Forces the settings form to load all settings
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.UpdateSettings">
            <summary>
            Updates settings
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filter for windows messages
            </summary>
            <param name="m">Message being received</param>
            <returns>always returns false, indicating that other filters should also process messages</returns>
        </member>
        <member name="E:SharedControls.Forms.FormSettings.AddSettings">
            <summary>
            Event raised when calling application can add custom setting panels to the Settings Form
            </summary>
        </member>
        <member name="F:SharedControls.Forms.FormSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Forms.FormSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Forms.BaseForm">
            <summary>
            Base form with extra methods/properties 
            </summary>
        </member>
        <member name="P:SharedControls.Forms.BaseForm.SaveState">
            <summary>
            Determines wether form state is saved automatically or not
            </summary>
        </member>
        <member name="P:SharedControls.Forms.BaseForm.IsDesignMode">
            <summary>
            determines wether the control is in design mode within an editor
            </summary>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.CurrentPath">
            <summary>
            Returns current path for application
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.CheckFormPosition(System.Windows.Forms.Form)">
            <summary>
            Checks the position of the form, within the screen and ensures it fit's with the screen
            </summary>
            <param name="form">Form to check</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowHardConfirm(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Stop icon
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowQuestion(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Question icon
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowInformation(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Information icon
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowErrorMessage(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Error icon
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowWarning(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Warning icon
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.ShowError(System.String,System.String,System.Boolean)">
            <summary>
            Shows a message box with Error icon
            
            message is wrapped in a message stating contac support
            </summary>
            <param name="title">Title of dialog box</param>
            <param name="message">Message to be displayed to user</param>
            <param name="yesNoButtons">if true then yes/no buttons are shown, otherwise ok button is shown</param>
            <returns>true if user click yes button, otherwise false</returns>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            Method used to indicate a change of language within the application
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.LoadSettings">
            <summary>
            Method used by descendants to indicate it should load it's settings
            </summary>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SaveSettings">
            <summary>
            Method used by descendants to indicate settings should be saved
            </summary>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.String)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Int32)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Int64)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.UInt32)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Boolean)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.DateTime)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Double)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Decimal)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.UInt64)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.UInt16)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Single)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingSave(System.String,System.Int16)">
            <summary>
            Saves a setting value to the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="settingValue">Value of setting</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.String)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Int32)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Int64)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.UInt32)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Boolean)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.DateTime)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Double)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Decimal)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.UInt64)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.UInt16)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Single)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SettingGet(System.String,System.Int16)">
            <summary>
            Retrieves a setting value from the configuration file
            </summary>
            <param name="settingName">Name of setting</param>
            <param name="defaultValue">Default value to be returned if setting not set</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.LanguageUpdate(System.Globalization.CultureInfo)">
            <summary>
            Forces a change of culture for all active forms
            </summary>
            <param name="culture">Culture being changed</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overridden OnClosing method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.OnLoad(System.EventArgs)">
            <summary>
            Overridden OnLoad method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.OnShown(System.EventArgs)">
            <summary>
            Overridden OnShown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.RestoreListViews(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            recursively finds ListViewEx controls and forces them to load their configuration
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.UpdateControlLanguage(System.Windows.Forms.Control,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Recursively go through all controls changing the language if it's a BaseControl type
            </summary>
            <param name="control">Control to update</param>
            <param name="culture">Current UI culture</param>
            <param name="rightToLeft">Indicates wether the language is right to left (if true) or left to right (if false)</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.SaveSettings(System.String)">
            <summary>
            Saves form state to settings file
            </summary>
            <param name="settingsFile">Name of file for settings to be saved to</param>
        </member>
        <member name="M:SharedControls.Forms.BaseForm.LoadSettings(System.String)">
            <summary>
            Restores form state from settings file
            </summary>
            <param name="settingsFile">Name of file for settings to be saved to</param>
        </member>
        <member name="T:SharedControls.Forms.Notification">
            <summary>
            Popup notification window
            </summary>
        </member>
        <member name="F:SharedControls.Forms.Notification._loading">
            <summary>
            indicates whether the control is loading or not, used
            for animation effects
            </summary>
        </member>
        <member name="M:SharedControls.Forms.Notification.#ctor(SharedControls.Interfaces.INotifyAction,System.String,System.String,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="parent"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="icon"></param>
            <param name="initialWidth"></param>
            <param name="initialHeight"></param>
        </member>
        <member name="P:SharedControls.Forms.Notification.UniqueID">
            <summary>
            Unique ID for form, user defined
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.NotifyPosition">
            <summary>
            Position of notification window
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.NotifyEffect">
            <summary>
            Type of notification
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.Font">
            <summary>
            Font used for message
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.FadeOut">
            <summary>
            Indicates the form will fade out
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.ClickToClose">
            <summary>
            if true, clicking anywhere on the notification will close it
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.ClickForInformation">
            <summary>
            if true, a label is shown with "Click for more information"
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.BackColor">
            <summary>
            Back color of notification window
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.TextColor">
            <summary>
            Color of the text
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.OpacitySpeed">
            <summary>
            speed of opacity 
            </summary>
        </member>
        <member name="P:SharedControls.Forms.Notification.AutomaticallyClose">
            <summary>
            Number of seconds after which the form is automatically closed
            
            0 = does not auto close
            </summary>
        </member>
        <member name="M:SharedControls.Forms.Notification.OnLoad(System.EventArgs)">
            <summary>
            Overridden on load method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.Notification.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            overridden on closing method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.Notification.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            overridden on closed method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Forms.Notification.OnShown(System.EventArgs)">
            <summary>
            overridden on shown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:SharedControls.Forms.Notification.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Forms.Notification.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Forms.Notification.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Forms.SplashForm">
            <summary>
            Generic splash screen
            </summary>
        </member>
        <member name="M:SharedControls.Forms.SplashForm.#ctor">
            <summary>
            Constructor - Initialises new instance of splash form
            </summary>
        </member>
        <member name="M:SharedControls.Forms.SplashForm.ShowSplashForm(System.Drawing.Image)">
            <summary>
            Shows the splash form
            </summary>
            <param name="image">Image to be displayed on form</param>
        </member>
        <member name="M:SharedControls.Forms.SplashForm.HideSplashForm">
            <summary>
            Hides the splash form
            </summary>
        </member>
        <member name="F:SharedControls.Forms.SplashForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Forms.SplashForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Forms.SplashForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Forms.WaitInputDialog">
            <summary>
            Wait Input Dialog Box, displayed to users when there will be a delay in loading something
            </summary>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.#ctor">
            <summary>
            Constructor - Initialises a new instance
            </summary>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.ShowWaitScreen">
            <summary>
            Shows the wait dialog
            </summary>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.HideWaitScreen">
            <summary>
            Hides the wait dialog
            </summary>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.UpdateWaitScreen(System.String)">
            <summary>
            Updates the text displayed on the wait dialog
            </summary>
            <param name="text">Text to be displayed</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.UpdateWaitScreen(System.String,System.Int32)">
            <summary>
            Updates the text and progress position displayed on the wait dialog
            </summary>
            <param name="text">Text to be displayed</param>
            <param name="position">Position (percentage) of progress bar</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            Overridden Language changed method
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.Update(System.String)">
            <summary>
            Updates the text being displayed
            </summary>
            <param name="Text">Message to show user</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.Update(System.String,System.Int32)">
            <summary>
            Updates the text and progress bar being displayed
            </summary>
            <param name="Text">Message to show user</param>
            <param name="Pos">Position of progress bar</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.UpdateProgress(System.Int32)">
            <summary>
            Updates the progress bar
            </summary>
            <param name="Position">Position of progress bar</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.Update(System.Int32,System.Int32)">
            <summary>
            Updates the progress bar
            </summary>
            <param name="Max">MAximum value of progress bar</param>
            <param name="Position">Position of progress bar</param>
        </member>
        <member name="F:SharedControls.Forms.WaitInputDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.Forms.WaitInputDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SharedControls.Forms.WaitInputDialog.lblProgress">
            <summary>
            Progress label
            </summary>
        </member>
        <member name="T:SharedControls.DatabaseConnection">
            <summary>
            Control for connecting to a database
            </summary>
        </member>
        <member name="M:SharedControls.DatabaseConnection.#ctor">
            <summary>
            Constructor - Initialises new instance
            </summary>
        </member>
        <member name="M:SharedControls.DatabaseConnection.#ctor(System.Boolean)">
            <summary>
            Constructor - Initialises new instance
            </summary>
            <param name="localHostOnly">if true, connections to local host only, otherwise connections to any server</param>
        </member>
        <member name="P:SharedControls.DatabaseConnection.Connection">
            <summary>
            Connection String Suffix
            
            Only use a-z 0-9
            </summary>
        </member>
        <member name="P:SharedControls.DatabaseConnection.ConnectionString">
            <summary>
            Returns the connection string
            </summary>
        </member>
        <member name="P:SharedControls.DatabaseConnection.TestClicked">
            <summary>
            Determines wether the user clicked the test button
            </summary>
        </member>
        <member name="P:SharedControls.DatabaseConnection.LocalHostOnly">
            <summary>
            Indicates wether you can only connect to localhost
            </summary>
        </member>
        <member name="P:SharedControls.DatabaseConnection.ConnectionType">
            <summary>
            Get's sets the database connection type
            </summary>
        </member>
        <member name="P:SharedControls.DatabaseConnection.AllowSaveSettings">
            <summary>
            Determines wether settings are saved to local config file or not
            </summary>
        </member>
        <member name="M:SharedControls.DatabaseConnection.LanguageChanged(System.Globalization.CultureInfo)">
            <summary>
            Overridden Language changed method
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:SharedControls.DatabaseConnection.SaveSettings">
            <summary>
            Saves connection details
            </summary>
        </member>
        <member name="M:SharedControls.DatabaseConnection.LoadSettings(System.String)">
            <summary>
            Loads saved connection details
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:SharedControls.DatabaseConnection.CreateConnectionString(System.Boolean,System.Int32)">
            <summary>
            Creates a connection string, optionally encrypting the password
            </summary>
            <param name="encryptPassword"></param>
            <param name="poolSize"></param>
            <returns>Valid connection string</returns>
        </member>
        <member name="M:SharedControls.DatabaseConnection.ConnectFirebird(System.String,System.String@)">
            <summary>
            Makes a physical connection and tests that the storage is ready to use
            </summary>
            <param name="connectionString">connection string</param>
            <param name="resultMessage">Message returned from server when connection test complete</param>
            <returns>true if all ok, otherwise false</returns>
        </member>
        <member name="E:SharedControls.DatabaseConnection.TestConnectionSuccess">
            <summary>
            Event raised when test connection is successful
            </summary>
        </member>
        <member name="F:SharedControls.DatabaseConnection.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.DatabaseConnection.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.DatabaseConnection.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.WizardBase.BaseWizardPage">
            <summary>
            Base wizard page
            </summary>
        </member>
        <member name="P:SharedControls.WizardBase.BaseWizardPage.MainWizardForm">
            <summary>
            Get's an instance of the wizard that is currently being used
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.LoadFromFile(System.String)">
            <summary>
            Method used to Load contents of a wizard page, from a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.SaveToFile(System.String)">
            <summary>
            Method used to save contents of the wizard page to a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.PageShown">
            <summary>
            Method called when a page is shown in the wizard
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.SkipPage">
            <summary>
            Method to determine wether the page should be skipped or not
            </summary>
            <returns>bool, if result is false, page will not be skipped, if true, page will be skipped</returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.PreviousClicked">
            <summary>
            Virtual method to be overridden in each wizard page for when previous button is clicked
            </summary>
            <returns>bool, true if can return to previous step, otherwise false</returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.NextClicked">
            <summary>
            Virtual method to be overridden in each wizard page for when Next button is clicked
            </summary>
            <returns>bool, true if can continue to the next step, otherwise false</returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.BeforeFinish">
            <summary>
            Virtual method to be overridden in final page prior to Finish being clicked
            </summary>
            <returns>bool, true if can proceed otherwise false</returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.CancelClicked">
            <summary>
            Indicates that cancel has been clicked
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.CanCancel">
            <summary>
            Determines wether a page can be cancelled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.CanGoPrevious">
            <summary>
            Overridden by descendant page, determines wether the Previous button is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.CanGoNext">
            <summary>
            Overridden by descendant page, determines wether the Next button is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharedControls.WizardBase.BaseWizardPage.CanGoFinish">
            <summary>
            Overridden by descendant page, determines wether the Finish button is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharedControls.WizardBase.BaseWizardPage.MaximumSize">
            <summary>
            Maximum dimensions of the base wizard page
            </summary>
        </member>
        <member name="P:SharedControls.WizardBase.BaseWizardPage.MinimumSize">
            <summary>
            Minimum dimensions of the base wizard page
            </summary>
        </member>
        <member name="T:SharedControls.WizardBase.WizardForm">
            <summary>
            Wizard Form
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.#ctor(System.String,SharedControls.WizardBase.BaseWizardPage[])">
            <summary>
            Constructor
            </summary>
            <param name="title">Title of wizard</param>
            <param name="pages">Individual pages to be included in the wizard</param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.ShowWizard(System.String,SharedControls.WizardBase.BaseWizardPage[])">
            <summary>
            Show's the wizard 
            </summary>
            <param name="title">Title of wizard</param>
            <param name="pages">Collection of pages to be shown within the wizard</param>
            <returns>true if user copletes, otherwise false if cancelled</returns>
        </member>
        <member name="T:SharedControls.WizardBase.WizardForm.ButtonType">
            <summary>
            Button Types
            </summary>
        </member>
        <member name="F:SharedControls.WizardBase.WizardForm.ButtonType.Cancel">
            <summary>
            CancelButton
            </summary>
        </member>
        <member name="F:SharedControls.WizardBase.WizardForm.ButtonType.Previous">
            <summary>
            Previous button
            </summary>
        </member>
        <member name="F:SharedControls.WizardBase.WizardForm.ButtonType.Next">
            <summary>
            Next button
            </summary>
        </member>
        <member name="F:SharedControls.WizardBase.WizardForm.ButtonType.Finish">
            <summary>
            Finish Button
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.UpdateLanguage(System.Globalization.CultureInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the language
            </summary>
            <param name="culture"></param>
            <param name="cancelText"></param>
            <param name="previousText"></param>
            <param name="nextText"></param>
            <param name="finishText"></param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.SetButtonText(SharedControls.WizardBase.WizardForm.ButtonType,System.String)">
            <summary>
            Set's the text on each button, for localized languages
            </summary>
            <param name="buttonType"></param>
            <param name="text"></param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.SaveAllSavedPageData(System.String,System.String)">
            <summary>
            Instructs the wizard to save data
            </summary>
            <param name="fileName">Name of file data is to be saved to</param>
            <param name="nodeName">Current node</param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.LoadAllSavedPageData(System.String)">
            <summary>
            Instructs the wizard to load saved data
            </summary>
            <param name="fileName">Name of file to get settings from</param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.SelectNextPage">
            <summary>
            Forces the wizard to select the next page
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.SelectPreviousPage">
            <summary>
            Selects the previous page in the wizard
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.SetCursor(System.Windows.Forms.Cursor)">
            <summary>
            Set's the cursor which is displayed when the mouse moves over the form
            </summary>
            <param name="cursor">Cursor to use</param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.UpdateUI">
            <summary>
            Forces the wizard to update it's UI buttons
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.ForceFinish">
            <summary>
            Forces the wizard to finish
            </summary>
        </member>
        <member name="F:SharedControls.WizardBase.WizardForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.WizardBase.WizardForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharedControls.Interfaces.INotifyAction">
            <summary>
            Interface for Notification control
            </summary>
        </member>
        <member name="M:SharedControls.Interfaces.INotifyAction.NotifyClicked(System.Object,System.EventArgs)">
            <summary>
            Method called when the notify control is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Interfaces.INotifyAction.NotifyCancelled(System.Object,System.EventArgs)">
            <summary>
            Method called when the notify control is cancelled
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Interfaces.INotifyAction.NotifyFocus(System.Object,System.EventArgs)">
            <summary>
            Method called when the notify control receives focus, allowing application to get focus back
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharedControls.Interfaces.INotifyAction.NotifyTimeOut(System.Object,System.EventArgs)">
            <summary>
            Method called when the notify control is times out
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SharedControls.Interfaces.ISMSSend">
            <summary>
            Interface for sending SMS messages
            </summary>
        </member>
        <member name="M:SharedControls.Interfaces.ISMSSend.SendSMS(System.String,System.String,System.String)">
            <summary>
            Request an SMS be sent
            </summary>
            <param name="from"></param>
            <param name="telephone"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:SharedControls.Interfaces.ISMSSend.SendSMS(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="telephone"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:SharedControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.CollapseHorizonal">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.CollapseVertical">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.ExpandHorizontal">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.ExpandVertical">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.fb">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharedControls.Properties.Resources.fb1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:SharedControls.SpellChecker.SpellChecker">
            <summary>
            Spell checking form to check spelling on text boxes
            </summary>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dictionaryPath">Path of dictionary files</param>
            <param name="selectedDictionary">Selected Dictionary File</param>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.ShowSpellChecker(System.Windows.Forms.Form,System.String,System.String,System.Windows.Forms.TextBox[])">
            <summary>
            Shows the spell checking form
            </summary>
            <param name="parent">Parent form</param>
            <param name="selectedDictionaryFile">Dictionary file</param>
            <param name="dictionaryFolder">dictionary folder</param>
            <param name="controlsToSpellCheck">List of text box's to spell check</param>
        </member>
        <member name="P:SharedControls.SpellChecker.SpellChecker.ControlsToSpellCheck">
            <summary>
            List of text box's which the spell checker will iterate through
            </summary>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.SpellCheckTextBox(System.Windows.Forms.TextBox,System.Int32)">
            <summary>
            Spell checks a text box
            </summary>
            <param name="txtBox">Text box to spell check</param>
            <param name="position">current position to spell check from</param>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.LoadDictionaries">
            <summary>
            Loads all dictionaries
            </summary>
        </member>
        <member name="F:SharedControls.SpellChecker.SpellChecker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharedControls.SpellChecker.SpellChecker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
