


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_EMAIL_INSERT
 (IPTO_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPTO_EMAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPFROM_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPFROM_MAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPSUBJECT VARCHAR(600) CHARACTER SET UTF8, 
  IPMESSAGE BLOB SUB_TYPE 1 , 
  IPPRIORITY INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
DECLARE VARIABLE vMSG BLOB SUB_TYPE TEXT;
DECLARE VARIABLE vCount BIGINT;
BEGIN
  opNEWID = -1;
  
  -- ignore, client side problem
  IF (ipMESSAGE CONTAINING 'System.Web.UI.ViewStateException: Invalid viewstate') THEN
    EXIT;
      
  IF (LOWER(ipSUBJECT) = 'pos application replication error') THEN
  BEGIN
    SELECT COUNT(ID)
    FROM WS_EMAIL
    WHERE SUBJECT = 'POS Application Replication Error'
    INTO :vCount;
    
    IF (vCount > 5) THEN
      EXIT;
  END
    
  -- not a valid email then exit  
  IF (NOT (IPTO_EMAIL CONTAINING '@')) THEN
    EXIT;
    
  /* Get next ID */
  opNewID = GEN_ID(GEN_WS_EMAIL_ID, 1);

  IF (ipTO_NAME IS NULL) THEN
    EXCEPTION EXC_609003195;

  IF (ipTO_EMAIL IS NULL) THEN
    EXCEPTION EXC_609003296;

  IF (ipFROM_NAME IS NULL) THEN
    EXCEPTION EXC_609003401;

  IF (ipFROM_MAIL IS NULL) THEN
    EXCEPTION EXC_609003403;

  IF (ipSUBJECT IS NULL) THEN
    EXCEPTION EXC_609003176;

  IF (ipMESSAGE IS NULL) THEN
    EXCEPTION EXC_609003165;

  IF (ipPRIORITY IS NULL) THEN
    ipPRIORITY =  2;

  vMSG = '<HTML><HEAD><LINK href="http://www.heavenbydeborahmitchell.co.uk/Styles/Popup.css" type="text/css" rel="stylesheet"></HEAD>';
  vMSG = VMSG || '<body bgColor="#ffffff">';
  vMSG = VMSG || '<TABLE cellSpacing="0" cellPadding="0" width="100%" border="0" height="100%"><TR>';
  vMSG = VMSG || '<TD class="PageBorderTopLeftCorner" vAlign="top" align="left" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTop" vAlign="top" align="left" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTopRightCorner" vAlign="top" align="right" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '</TR><TR><TD class="PageBorderLeft" vAlign="top" align="left" height="25"></TD>';
  vMSG = VMSG || '<TD class="TextBodySubHeader" vAlign="middle" align="left" height="25">';
  vMSG = VMSG || '<img src="http://www.heavenbydeborahmitchell.co.uk/Images/popuplogo.jpg" border=0 align=left><span class="TextBodySubHeader"><b>';
  vMSG = VMSG || ipSUBJECT || '</b></span><br><hr>';
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right" height="25"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderLeft" vAlign="top" align="left">&nbsp;</TD><TD class="TextBodySmall">';
  vMSG = VMSG || '<br><br>' || ipMESSAGE;
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderBottomLeftCorner" vAlign="top" align="left" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottom" vAlign="bottom" align="left">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottomRightCorner" vAlign="bottom" align="right" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '</TR></TABLE></body></HTML>';



  INSERT INTO WS_EMAIL(
    ID,
    TO_NAME, 
    TO_EMAIL, 
    FROM_NAME, 
    FROM_MAIL, 
    SUBJECT, 
    MAIL_MESSAGE, 
    PRIORITY, 
    QUEUE_DATE
  ) VALUES (
    :opNewID,
    :ipTO_NAME, 
    :ipTO_EMAIL, 
    :ipFROM_NAME, 
    :ipFROM_MAIL, 
    :ipSUBJECT, 
    :vMSG, 
    :ipPRIORITY, 
    'NOW'
  );
  SUSPEND;
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_PRODUCTS_PAGE_OFFERS
 (IPPAGESIZE BIGINT, 
  IPPAGENUMBER BIGINT, 
  IPSPECIALOFFERS INTEGER)
RETURNS
 (OPID BIGINT, 
  OPNAME VARCHAR(200) CHARACTER SET UTF8, 
  OPDESCRIPTION VARCHAR(4000) CHARACTER SET UTF8, 
  OPSHOW_ON_WEB INTEGER, 
  OPIMAGE VARCHAR(300) CHARACTER SET UTF8, 
  OPSORT_ORDER INTEGER, 
  OPSPECIAL_OFFER INTEGER, 
  OPPRODUCT_GROUP INTEGER, 
  OPPOPUPID INTEGER, 
  OPSKU VARCHAR(15) CHARACTER SET UTF8, 
  OPREGAL INTEGER, 
  OPOUT_OF_STOCK VARCHAR(1) CHARACTER SET UTF8, 
  OPBEST_SELLER VARCHAR(1) CHARACTER SET UTF8, 
  OPNEW_PRODUCT VARCHAR(1) CHARACTER SET UTF8, 
  OPFEATURED CHAR(1) CHARACTER SET UTF8, 
  OPCAROUSEL CHAR(1) CHARACTER SET UTF8, 
  OPFEATURES VARCHAR(4000) CHARACTER SET UTF8, 
  OPINGREDIENTS VARCHAR(4000) CHARACTER SET UTF8, 
  OPPRE_ORDER CHAR(1) CHARACTER SET UTF8, 
  OPVIDEO_LINK VARCHAR(1000) CHARACTER SET UTF8, 
  OPHOW_TO_USE VARCHAR(2000) CHARACTER SET UTF8, 
  OPPRIMARY_GROUP_TYPE INTEGER, 
  OPFREE_SHIPPING CHAR(1) CHARACTER SET UTF8, 
  OPPAGE_LINK VARCHAR(255) CHARACTER SET UTF8, 
  OPFREE_PRODUCT VARCHAR(1) CHARACTER SET UTF8)
AS
DECLARE VARIABLE vPAGENO BIGINT;
  DECLARE VARIABLE vCOUNTER BIGINT;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION ;

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION ;

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR 
  SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, 
    p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, 
    p.FEATURED_PRODUCT, p.CAROUSEL, p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LINK, 
    p.HOW_TO_USE, p.PRIMARY_GROUP_TYPE, p.FREE_SHIPPING, p.PAGE_LINK, p.FREE_PRODUCT
  FROM WS_PRODUCTS p
  WHERE (p.SHOW_ON_WEB = 0) AND (p.SPECIAL_OFFER = :ipSPECIALOFFERS)
  ORDER BY p.SORT_ORDER, p.NAME
  INTO :opID, :opNAME, :opDESCRIPTION, :opSHOW_ON_WEB, :opIMAGE, :opSORT_ORDER, :opSPECIAL_OFFER, 
    :opPRODUCT_GROUP, :opPOPUPID, :opSKU, :opREGAL, :opOUT_OF_STOCK, :opBEST_SELLER, :opNEW_PRODUCT, 
    :opFEATURED, :opCAROUSEL, :opFEATURES, :opINGREDIENTS, :opPRE_ORDER, :opVIDEO_LiNK, 
    :opHOW_TO_USE, :OPPRIMARY_GROUP_TYPE, :opFREE_SHIPPING, :opPAGE_LINK, :opFREE_PRODUCT

  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
  
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_PRODUCTS_PAGE_BY_GROUP
 (IPPRIMARYTYPE INTEGER, 
  IPPAGESIZE BIGINT, 
  IPPAGENUMBER BIGINT, 
  IPSPECIALOFFERS INTEGER, 
  IPPRODUCTGROUP INTEGER)
RETURNS
 (OPID BIGINT, 
  OPNAME VARCHAR(200) CHARACTER SET UTF8, 
  OPDESCRIPTION VARCHAR(4000) CHARACTER SET UTF8, 
  OPSHOW_ON_WEB INTEGER, 
  OPIMAGE VARCHAR(300) CHARACTER SET UTF8, 
  OPSORT_ORDER INTEGER, 
  OPSPECIAL_OFFER INTEGER, 
  OPPRODUCT_GROUP INTEGER, 
  OPPOPUPID INTEGER, 
  OPSKU VARCHAR(15) CHARACTER SET UTF8, 
  OPREGAL INTEGER, 
  OPOUT_OF_STOCK VARCHAR(1) CHARACTER SET UTF8, 
  OPBEST_SELLER VARCHAR(1) CHARACTER SET UTF8, 
  OPNEW_PRODUCT VARCHAR(1) CHARACTER SET UTF8, 
  OPFEATURED CHAR(1) CHARACTER SET UTF8, 
  OPCAROUSEL CHAR(1) CHARACTER SET UTF8, 
  OPFEATURES VARCHAR(4000) CHARACTER SET UTF8, 
  OPINGREDIENTS VARCHAR(4000) CHARACTER SET UTF8, 
  OPPRE_ORDER CHAR(1) CHARACTER SET UTF8, 
  OPVIDEO_LINK VARCHAR(1000) CHARACTER SET UTF8, 
  OPHOW_TO_USE VARCHAR(2000) CHARACTER SET UTF8, 
  OPPRIMARY_GROUP_TYPE INTEGER, 
  OPFREE_SHIPPING CHAR(1) CHARACTER SET UTF8, 
  OPPAGE_LINK VARCHAR(255) CHARACTER SET UTF8, 
  OPFREE_PRODUCT VARCHAR(1) CHARACTER SET UTF8)
AS
DECLARE VARIABLE vPAGENO BIGINT;
  DECLARE VARIABLE vCOUNTER BIGINT;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION ;

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION ;

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR 
  SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, p.PRODUCT_GROUP, 
    p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, p.FEATURED_PRODUCT, p.CAROUSEL, 
    p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LINK, p.HOW_TO_USE, p.PRIMARY_GROUP_TYPE, p.FREE_SHIPPING,
    p.PAGE_LINK, p.FREE_PRODUCT
  FROM WS_PRODUCTS p
    LEFT JOIN WS_PRODUCT_TO_PRODUCT_GROUP ppg ON (ppg.PRODUCT_ID = p.ID)
  WHERE (p.SHOW_ON_WEB = 0) 
    AND (ppg.GROUP_ID = :ipPRODUCTGROUP)
  ORDER BY p.SORT_ORDER, p.NAME
  INTO :opID, :opNAME, :opDESCRIPTION, :opSHOW_ON_WEB, :opIMAGE, :opSORT_ORDER, :opSPECIAL_OFFER, 
    :opPRODUCT_GROUP, :opPOPUPID, :opSKU, :opREGAL, :opOUT_OF_STOCK, :opBEST_SELLER, :opNEW_PRODUCT, 
    :opFEATURED, :opCAROUSEL, :opFEATURES, :opINGREDIENTS, :opPRE_ORDER, :opVIDEO_LiNK, :opHOW_TO_USE,
    :OPPRIMARY_GROUP_TYPE, :opFREE_SHIPPING, :opPAGE_LINK, :opFREE_PRODUCT
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
  
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_PRODUCTS_CELEBRITY
 (IPCELEBRITYID BIGINT)
RETURNS
 (OPID BIGINT, 
  OPNAME VARCHAR(200) CHARACTER SET UTF8, 
  OPDESCRIPTION VARCHAR(4000) CHARACTER SET UTF8, 
  OPSHOW_ON_WEB INTEGER, 
  OPIMAGE VARCHAR(300) CHARACTER SET UTF8, 
  OPSORT_ORDER INTEGER, 
  OPSPECIAL_OFFER INTEGER, 
  OPPRODUCT_GROUP INTEGER, 
  OPPOPUPID INTEGER, 
  OPSKU VARCHAR(15) CHARACTER SET UTF8, 
  OPREGAL INTEGER, 
  OPOUT_OF_STOCK VARCHAR(1) CHARACTER SET UTF8, 
  OPBEST_SELLER VARCHAR(1) CHARACTER SET UTF8, 
  OPNEW_PRODUCT VARCHAR(1) CHARACTER SET UTF8, 
  OPFEATURED CHAR(1) CHARACTER SET UTF8, 
  OPCAROUSEL CHAR(1) CHARACTER SET UTF8, 
  OPFEATURES VARCHAR(4000) CHARACTER SET UTF8, 
  OPINGREDIENTS VARCHAR(4000) CHARACTER SET UTF8, 
  OPPRE_ORDER CHAR(1) CHARACTER SET UTF8, 
  OPVIDEO_LINK VARCHAR(1000) CHARACTER SET UTF8, 
  OPHOW_TO_USE VARCHAR(2000) CHARACTER SET UTF8, 
  OPPRIMARY_GROUP_TYPE INTEGER, 
  OPFREE_SHIPPING CHAR(1) CHARACTER SET UTF8, 
  OPPAGE_LINK VARCHAR(255) CHARACTER SET UTF8, 
  OPFREE_PRODUCT VARCHAR(1) CHARACTER SET UTF8)
AS
BEGIN
  FOR 
  SELECT p.ID, p.NAME, p.DESCRIPTION, p.SHOW_ON_WEB, p.IMAGE, p.SORT_ORDER, p.SPECIAL_OFFER, 
    p.PRODUCT_GROUP, p.POPUP_ID, p.SKU, p.REGAL, p.OUT_OF_STOCK, p.BEST_SELLER, p.NEW_PRODUCT, 
    p.FEATURED_PRODUCT, p.CAROUSEL, p.FEATURES, p.INGREDIENTS, p.PRE_ORDER, p.VIDEO_LINK, 
    p.HOW_TO_USE, P.PRIMARY_GROUP_TYPE, p.FREE_SHIPPING, p.PAGE_LINK, p.FREE_PRODUCT
  FROM WS_PRODUCTS p
    INNER JOIN WS_CELEBRITY_PRODUCTS cp ON (cp.PRODUCT_ID = p.ID)
  WHERE (SHOW_ON_WEB = 0) AND (cp.CELEBRITY_ID = :ipCELEBRITYID)
  ORDER BY SORT_ORDER, NAME
  INTO :opID, :opNAME, :opDESCRIPTION, :opSHOW_ON_WEB, :opIMAGE, :opSORT_ORDER, :opSPECIAL_OFFER, 
    :opPRODUCT_GROUP, :opPOPUPID, :opSKU, :opREGAL, :opOUT_OF_STOCK, :opBEST_SELLER, :opNEW_PRODUCT, 
    :opFeatured, :opCarousel, :opFEATURES, :opINGREDIENTS, :opPRE_ORDER, :opVIDEO_LiNK, :opHOW_TO_USE,
    :opPRIMARY_GROUP_TYPE, :opFREE_SHIPPING, :opPAGE_LINK, :opFREE_PRODUCT
  DO
  BEGIN
    SUSPEND;
  END
  
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_CLIENTS_INS
 (IPCONTACT_NAME VARCHAR(100) CHARACTER SET UTF8, 
  IPCOMPANY_NAME VARCHAR(150) CHARACTER SET UTF8, 
  IPTELEPHONE VARCHAR(100) CHARACTER SET UTF8, 
  IPEMAIL VARCHAR(255) CHARACTER SET UTF8, 
  IPADDRESS VARCHAR(2000) CHARACTER SET UTF8, 
  IPPOSTCODE VARCHAR(15) CHARACTER SET UTF8, 
  IPNOTES VARCHAR(5000) CHARACTER SET UTF8, 
  IPSTATE INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
    OPNEWID = GEN_ID(GEN_WS_CLIENTS_ID, 1);
    
    INSERT INTO WS_CLIENTS
    (
        ID,
        CONTACT_NAME, 
        COMPANY_NAME, 
        TELEPHONE, 
        EMAIL, 
        ADDRESS, 
        POSTCODE,
        NOTES,
        STATE
    )
    VALUES
    (
        :OPNEWID,
        :ipCONTACT_NAME,
        :IPCOMPANY_NAME,
        :IPTELEPHONE,
        :IPEMAIL,
        :IPADDRESS,
        :IPPOSTCODE,
        :IPNOTES,
        :ipSTATE
    );
    
    SUSPEND;
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_SPECIAL_OFFERS_UPD
 (IPID BIGINT, 
  IPRECEIVE_EMAIL_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8, 
  IPRECEIVE_PHONE_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8, 
  IPRECEIVE_POSTAL_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8)
AS
BEGIN
  /* verify record exists */
  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_MEMBERS_NOT_FOUND;

  UPDATE WS_MEMBERS
  SET RECEIVE_EMAIL_SPECIAL_OFFERS = :ipRECEIVE_EMAIL_SPECIAL_OFFERS, 
     RECEIVE_PHONE_SPECIAL_OFFERS = :ipRECEIVE_PHONE_SPECIAL_OFFERS, 
     RECEIVE_POSTAL_SPECIAL_OFFERS = :ipRECEIVE_POSTAL_SPECIAL_OFFERS
  WHERE ID = :ipID;

  /* notify listeners of update */
  POST_EVENT 'update_wsp_ws_members_upd';  
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_SPECIAL_OFFERS_GET
 (IPID BIGINT)
RETURNS
 (OPRECEIVE_EMAIL_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8, 
  OPRECEIVE_PHONE_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8, 
  OPRECEIVE_POSTAL_SPECIAL_OFFERS CHAR(1) CHARACTER SET UTF8)
AS
BEGIN
  /* verify record exists */
  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_MEMBERS_NOT_FOUND;

  FOR SELECT RECEIVE_EMAIL_SPECIAL_OFFERS, RECEIVE_PHONE_SPECIAL_OFFERS, RECEIVE_POSTAL_SPECIAL_OFFERS
  FROM WS_MEMBERS
  WHERE (ID = :ipID)
  INTO :opRECEIVE_EMAIL_SPECIAL_OFFERS, :opRECEIVE_PHONE_SPECIAL_OFFERS, :opRECEIVE_POSTAL_SPECIAL_OFFERS
  DO
  BEGIN
    SUSPEND;
  END
  
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_ORDER_CREATE_MANUAL
 (IPPRODUCT_ITEM INTEGER, 
  IPUSER_NAME VARCHAR(50) CHARACTER SET UTF8, 
  IPUSER_EMAIL VARCHAR(100) CHARACTER SET UTF8)
AS
DECLARE VARIABLE vMsg BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vI INTEGER;
BEGIN
  IF (NOT EXISTS(SELECT * FROM WS_SHOPPINGBASKET_ITEMS WHERE ID = :ipPRODUCT_ITEM)) THEN
    EXCEPTION EXC_WS_INVALID_PRODUCT;

  INSERT INTO WS_ORDERS (BASKET_ITEM_ID, INVOICE_ID, USER_ID, USER_EMAIL, DATE_ORDER_PLACED)
  VALUES (:ipPRODUCT_ITEM, NULL, NULL, :ipUSER_EMAIL, 'NOW');

  EXECUTE PROCEDURE WSF_SYSYEM_EMAIL_CREATE(1, ipUSER_NAME, ipUSER_EMAIL, ipUSER_NAME, ipUSER_EMAIL, NULL, NULL, NULL, NULL, NULL);
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_PAGE
 (IPPAGESIZE BIGINT, 
  IPPAGENUMBER BIGINT)
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPSTAFF_ID BIGINT, 
  OPNOTES VARCHAR(8000) CHARACTER SET UTF8, 
  OPEXPIRES TIMESTAMP, 
  OPLAST_REVIEWED TIMESTAMP, 
  OPREVIEWED_BY BIGINT, 
  OPPREFERRED_DATE DATE, 
  OPPREFERRED_TIME DOUBLE PRECISION )
AS
DECLARE VARIABLE vPAGENO INTEGER;
  DECLARE VARIABLE vCOUNTER INTEGER;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Invalid Page Number, must be greater than zero';

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Invalid Page Size, must be greater than zero';

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR
    SELECT a.ID, a.USER_ID, a.STAFF_ID, a.NOTES, a.EXPIRES, a.LAST_REVIEWED, a.REVIEWED_BY, a.PREFERRED_DATE, a.PREFERRED_TIME
    FROM WS_APPOINTMENT_WAIT_LIST_LONG a
    INTO :opID, :opUSER_ID, :opSTAFF_ID, :opNOTES, :opEXPIRES, :opLAST_REVIEWED, :opREVIEWED_BY, :opPREFERRED_DATE, :opPREFERRED_TIME
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WEB_LOG_INS_3
 (IPPLATFORM VARCHAR(255) CHARACTER SET UTF8, 
  IPBROWSERVERSION VARCHAR(255) CHARACTER SET UTF8, 
  IPISCRAWLER VARCHAR(255) CHARACTER SET UTF8, 
  IPREMOTEHOST VARCHAR(25) CHARACTER SET UTF8, 
  IPMETHOD VARCHAR(20) CHARACTER SET UTF8, 
  IPPATH VARCHAR(255) CHARACTER SET UTF8, 
  IPQUERY VARCHAR(500) CHARACTER SET UTF8, 
  IPREFERER VARCHAR(255) CHARACTER SET UTF8, 
  IPSESSION VARCHAR(200) CHARACTER SET UTF8, 
  IPCOUNTRY_CODE VARCHAR(10) CHARACTER SET UTF8, 
  IPWEBSITE_ID INTEGER)
RETURNS
 (OPNEWID INTEGER)
AS
DECLARE VARIABLE vDateTime TIMESTAMP;
BEGIN
  vDateTime = 'NOW';

  
  opNewID = GEN_ID(GEN_WS_WEB_LOG, 1);

  INSERT INTO WS_WEB_LOG(
    ID,
    LOG_DATE, 
    PLATFORM, 
    BROWSERVERSION, 
    ISCRAWLER, 
    REMOTEHOST, 
    METHOD, 
    PATH, 
    QUERY,
    REFERER,
    USER_SESSION,
    COUNTRY_CODE,
    WEBSITE_ID
  ) VALUES (
    :opNewID,
    :vDateTime, 
    :ipPLATFORM, 
    :ipBROWSERVERSION, 
    :ipISCRAWLER, 
    :ipREMOTEHOST, 
    :ipMETHOD, 
    :ipPATH, 
    :ipQUERY,
    :ipREFERER,
    :ipSESSION,
    :ipCOUNTRY_CODE,
    :ipWEBSITE_ID
  );
  SUSPEND;
END^

SET TERM ; ^ 

SET TERM ^ ;
ALTER PROCEDURE SP_WORKINGHOURS_CREATE (
    IPEMPLOYEE_ID Bigint,
    IPSTART_DATE Date,
    IPSTART_HOUR Double precision,
    IPFINISH_HOUR Double precision,
    IPREPEAT_OPTION Integer,
    IPREPEAT_NUMBER Integer )
RETURNS (
    OPID Integer )
AS
declare variable vLoopCounter INTEGER;
BEGIN
    vLoopCounter = 0;
    
    opID = GEN_ID(GEN_WS_APPT_OPTIONS_EX_ID, 1);
    while (exists (SELECT ID FROM WS_APPOINTMENT_OPTIONS_EX WHERE ID = :opID)) do
    BEGIN
        opid = gen_id(GEN_WS_APPT_OPTIONS_EX_ID, 1);
        vLoopCounter = vLoopCounter + 1;
        
        
        if (vLoopCounter > 2000) THEN
            break;
    end
    
INSERT INTO WS_APPOINTMENT_OPTIONS_EX 
(
    ID, 
    EMPLOYEE_ID, 
    START_DATE, 
    START_HOUR, 
    FINISH_HOUR, 
    REPEAT_OPTION, 
    REPEAT_NUMBER,
    ALLOW_TREATMENTS
)
 VALUES 
 (
    :opID, 
    :ipEMPLOYEE_ID, 
    :ipSTART_DATE, 
    :ipSTART_HOUR, 
    :ipFINISH_HOUR, 
    :ipREPEAT_OPTION, 
    :ipREPEAT_NUMBER,
    'Y'
);

SUSPEND;

END^
SET TERM ; ^

