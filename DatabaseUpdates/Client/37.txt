CREATE GENERATOR GEN_SAVED_ORDERS;

GRANT USAGE ON GENERATOR GEN_SAVED_ORDERS TO USER PUBLIC;

SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNewID BIGINT;
  DECLARE VARIABLE vSiteID INTEGER;
BEGIN
  SELECT SITE_ID
  FROM REPLICATE$OPTIONS
  INTO :vSiteID;
  
  vNewID = vSiteID * 100000000;
  EXECUTE STATEMENT 'SET GENERATOR GEN_SAVED_ORDERS TO ' || :vNewID || ';';

END ^

SET TERM ; ^


SET TERM ^ ;
CREATE OR ALTER PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL13 (
    IPBASKETID Integer,
    IPUSERID Bigint,
    IPPAYMETHOD Integer,
    IPTOTAL Decimal(6,2),
    IPDISCOUNTAMMOUNT Decimal(6,2),
    IPDISCOUNT Integer,
    IPSHIPPING Decimal(6,2),
    IPVATAMMOUNT Decimal(6,2),
    IPSHIPPINGADDRESS Bigint,
    IPCONVERSION_RATE Decimal(6,2),
    IPVAT_RATE Decimal(6,2),
    IPCULTURE Varchar(50),
    IPCOUPONCODE Varchar(30),
    IPUSER_SESSION Varchar(200),
    IPREMOTE_HOST Varchar(25),
    IPSTOREID Integer,
    IPTILLID Integer,
    IPCOST_MULTIPLIER Double precision,
    IPVOUCHERTYPE Integer,
    IPNOTES Varchar(1000),
    IPWEBSITE_ID Integer,
    IPVATREMOVED WS_BOOL,
    IPORIGINALCOUNTRY Integer,
    IPSHIPPINGREMOVETAX WS_BOOL,
    IPVERSION Integer,
    IPSUBTOTAL Decimal(18,4),
    IPOPTIONS Bigint )
RETURNS (
    OPINVOICEID Bigint )
AS
DECLARE VARIABLE vProdID INTEGER; 
  DECLARE VARIABLE vProdDesc VARCHAR(255); 
  DECLARE VARIABLE vProdQty INTEGER; 
  DECLARE VARIABLE vInvDesc VARCHAR(500); 
  DECLARE VARIABLE vInvQty INTEGER; 
  DECLARE VARIABLE vInvPrice DECIMAL(6,2); 
  DECLARE VARIABLE vInvItemID INTEGER;
  DECLARE VARIABLE vInvCost DECIMAL(6,2);
  DECLARE VARIABLE vShipCost DECIMAL(6,2); 
  DECLARE VARIABLE vUserFirstName VARCHAR(50);
  DECLARE VARIABLE vEMail VARCHAR(100);
  DECLARE VARIABLE vUserName VARCHAR(100);
  DECLARE VARIABLE vItemType INTEGER;
  DECLARE VARIABLE vUserID BIGINT;
  DECLARE VARIABLE vCountry BIGINT;
  DECLARE VARIABLE vConversionRate DOUBLE PRECISION;
  DECLARE VARIABLE vUserDiscount DOUBLE PRECISION;
  DECLARE VARIABLE vProductDiscount DOUBLE PRECISION;
  DECLARE VARIABLE vSKU VARCHAR(15);
BEGIN 
   
  IF (NOT EXISTS(SELECT BASKETID FROM WS_SHOPPINGBASKET WHERE BASKETID = :ipBASKETID)) THEN 
    EXCEPTION EXC_WS_INVALID_SHOPPING_BASKET; 

  SELECT M.FIRSTNAME, M.EMAIL, M.USERNAME, M.COUNTRY
  FROM WS_MEMBERS M
  WHERE (M.ID = :ipUSERID)
  INTO :vUserFirstName, :vEMail, :vUserName, :vCountry;

  EXECUTE PROCEDURE WSF_WS_INVOICE_INS12(ipUSERID, CURRENT_TIMESTAMP, ipTOTAL, ipSHIPPING, IPDISCOUNTAMMOUNT, ipDISCOUNT, ipVATAMMOUNT, ipPAYMETHOD, ipSHIPPINGADDRESS, ipCONVERSION_RATE, ipVAT_RATE, ipCULTURE, ipCOUPONCODE, ipUSER_SESSION, ipREMOTE_HOST, ipSTOREID, ipTILLID, IPCOST_MULTIPLIER, IPVOUCHERTYPE, ipNOTES, ipWEBSITE_ID, ipVATREMOVED, ipOriginalCountry, IPSHIPPINGREMOVETAX, ipVersion, ipSUBTOTAL, ipOPTIONS) RETURNING_VALUES :opINVOICEID; 

  SELECT c.CONVERSION_RATE
  FROM WS_COUNTRIES c
  WHERE c.ID = :vCountry
  INTO :vConversionRate;
  
  FOR  
    SELECT a.OPITEMID, a.OPDESCRIPTION || ' (' || a.OPPRODUCT_SIZE || ')', a.OPPRICE, a.OPQTY, a.OPQTY * a.OPPRICE, a.OPITEM_TYPE, a.OPUSER_ID, a.opUSER_DISCOUNT
    FROM WSP_SHOPPINGBASKET(:ipBASKETID) a 
    INTO :vInvItemID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vItemType, :vUserID, :vUserDiscount
  DO 
  BEGIN   
    vProductDiscount = 0.00;
    
    IF (vItemType = 1) THEN
    BEGIN
        SELECT pcs.DISCOUNT_VALUE, LEFT(pcs.SKU, 10)
        FROM WS_PRODUCTS_COST_SIZE pcs
        WHERE pcs.ID = :vInvItemID
        INTO :vProductDiscount, :vSKU; 
    END    
    
    INSERT INTO WS_INVOICE_ITEMS(INVOICEID, DESCRIPTION, COST, QTY, PRICE, ITEM_ID, ITEM_TYPE, STAFFMEMBER, PRODUCT_DISCOUNT, USER_DISCOUNT, SKU) 
    VALUES (:opINVOICEID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vInvItemID, :vItemType, :vUserID, :vProductDiscount, :vUserDiscount, :vSKU);
  END 

  -- start saved auto_order
  IF (EXISTS(SELECT a.AUTO_ORDER FROM POS_SAVED_ORDERS a WHERE a.AUTO_ORDER = 'Y' AND a.BASKET_ID = :ipBASKETID)) THEN
  BEGIN
    INSERT INTO POS_AUTO_ORDERS (ID, USER_ID, ORDER_ID, BASKET_ID)
    VALUES (GEN_ID(GEN_SAVED_ORDERS, 1), :vUserID, :opINVOICEID, :ipBASKETID);  
  END
  -- end saved auto_order
  
  -- start increment coupon usage if used
  IF (IPCOUPONCODE <> '') THEN
  BEGIN
    UPDATE WS_COUPONS
    SET VOUCHER_USAGE = VOUCHER_USAGE + 1
    WHERE DISCOUNT_COUPON = :IPCOUPONCODE;
  END
  -- end increment coupon usage if used
  
  -- empty the shopping basket
  DELETE FROM WS_SHOPPINGBASKET WHERE (BASKETID = :ipBASKETID);  

  SUSPEND;
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL13 TO PUBLIC;

