ALTER TABLE WS_INVOICE
  ADD SUB_TOTAL DECIMAL(18, 4), 
  ADD OPTIONS BIGINT;
  
ALTER TABLE WS_INVOICE_ORDERS
  ADD SUB_TOTAL DECIMAL(18, 4), 
  ADD OPTIONS BIGINT;
  
SET TERM ^ ;
CREATE OR ALTER PROCEDURE WSF_WS_INVOICE_INS12 (
    IPUSERID Integer,
    IPPURCHASEDATE Timestamp,
    IPTOTALCOST Decimal(6,2),
    IPSHIPPING Double precision,
    IPDISCOUNTAMMOUNT Decimal(6,2),
    IPDISCOUNT Integer,
    IPVATAMMOUNT Decimal(6,2),
    IPSTATUS Integer,
    IPSHIPPINGADDRESS Integer,
    IPCONVERSION_RATE Double precision,
    IPVAT_RATE Double precision,
    IPCULTURE Varchar(50),
    IPCOUPONCODE Varchar(30),
    IPUSER_SESSION Varchar(200),
    IPREMOTE_HOST Varchar(25),
    IPSTOREID Integer,
    IPTILLID Integer,
    IPCOST_MULTIPLIER Double precision,
    IPVOUCHERTYPE Integer,
    IPNOTES Varchar(1000),
    IPWEBSITE_ID Integer,
    IPVATREMOVED WS_BOOL,
    IPORIGINALCOUNTRY Integer,
    IPSHIPPINGREMOVETAX WS_BOOL,
    IPVERSION Integer,
    ipSUBTOTAL DECIMAL(18, 4),
    ipOPTIONS BIGINT )
RETURNS (
    OPNEWID Integer )
AS
DECLARE VARIABLE vNewUserID BIGINT;
BEGIN
  vNewUserID = ipUSERID;

  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :IPUSERID)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_MEMBERS'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :IPUSERID
    INTO :vNewUserID;
    
    IF (vNewUserID IS NOT NULL) THEN
        IPUSERID = vNewUserID;
  END
  
  IF (ipUSERID IS NULL) THEN
    EXCEPTION EXC_790003550;

  IF (ipPURCHASEDATE IS NULL) THEN
    EXCEPTION EXC_790004174;

  IF (ipTOTALCOST IS NULL) THEN
    EXCEPTION EXC_790003884;

  /* Get next ID */
  opNewID = GEN_ID(GEN_INVOICE_ID, 1);

  INSERT INTO WS_INVOICE(
    ID,
    USERID, 
    PURCHASEDATE, 
    TOTALCOST,
    STATUS,
    SHIPPING_COSTS,
    DISCOUNT,
    DISCOUNT_AMMOUNT,
    VAT_AMMOUNT,
    SHIPPING_ADDRESS,
    CONVERSION_RATE, 
    VAT_RATE, 
    CULTURE,
    COUPON_NAME,
    USER_SESSION,
    REMOTE_HOST,
    STORE_ID,
    TILL_ID,
    COST_MULTIPLIER,
    VOUCHERTYPE,
    NOTES,
    WEBSITE_ID,
    VAT_REMOVED,
    ORIGINAL_COUNTRY,
    SHIPPING_REMOVE_TAX,
    INVOICE_VERSION,
    SUB_TOTAL,
    OPTIONS
  ) VALUES (
    :opNewID,
    :vNewUserID, 
    :ipPURCHASEDATE, 
    :ipTOTALCOST,
    :ipSTATUS,
    :ipSHIPPING,
    :ipDISCOUNT,
    :IPDISCOUNTAMMOUNT,
    :ipVATAMMOUNT,
    :IPSHIPPINGADDRESS,
    :ipCONVERSION_RATE, 
    :ipVAT_RATE, 
    :ipCULTURE,
    :IPCOUPONCODE,
    :ipUSER_SESSION,
    :ipREMOTE_HOST,
    :ipSTOREID,
    :ipTILLID,
    :IPCOST_MULTIPLIER,
    :IPVOUCHERTYPE,
    :IPNOTES,
    :ipWEBSITE_ID,
    :ipVATRemoved,
    :ipOriginalCountry,
    :IPSHIPPINGREMOVETAX,
    :ipVERSION,
    :ipSUBTOTAL,
    :ipOPTIONS
  );
  SUSPEND;
END^
SET TERM ; ^


GRANT EXECUTE
 ON PROCEDURE WSF_WS_INVOICE_INS12 TO PUBLIC;

SET TERM ^ ;
CREATE OR ALTER PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL12 (
    IPBASKETID Integer,
    IPUSERID Bigint,
    IPPAYMETHOD Integer,
    IPTOTAL Decimal(6,2),
    IPDISCOUNTAMMOUNT Decimal(6,2),
    IPDISCOUNT Integer,
    IPSHIPPING Decimal(6,2),
    IPVATAMMOUNT Decimal(6,2),
    IPSHIPPINGADDRESS Bigint,
    IPCONVERSION_RATE Decimal(6,2),
    IPVAT_RATE Decimal(6,2),
    IPCULTURE Varchar(50),
    IPCOUPONCODE Varchar(30),
    IPUSER_SESSION Varchar(200),
    IPREMOTE_HOST Varchar(25),
    IPSTOREID Integer,
    IPTILLID Integer,
    IPCOST_MULTIPLIER Double precision,
    IPVOUCHERTYPE Integer,
    IPNOTES Varchar(1000),
    IPWEBSITE_ID Integer,
    IPVATREMOVED WS_BOOL,
    IPORIGINALCOUNTRY Integer,
    IPSHIPPINGREMOVETAX WS_BOOL,
    IPVERSION Integer,
    ipSUBTOTAL DECIMAL(18, 4),
    IPOPTIONS BIGINT )
RETURNS (
    OPINVOICEID Bigint )
AS
DECLARE VARIABLE vProdID INTEGER; 
  DECLARE VARIABLE vProdDesc VARCHAR(255); 
  DECLARE VARIABLE vProdQty INTEGER; 
  DECLARE VARIABLE vInvDesc VARCHAR(500); 
  DECLARE VARIABLE vInvQty INTEGER; 
  DECLARE VARIABLE vInvPrice DECIMAL(6,2); 
  DECLARE VARIABLE vInvItemID INTEGER;
  DECLARE VARIABLE vInvCost DECIMAL(6,2);
  DECLARE VARIABLE vShipCost DECIMAL(6,2); 
  DECLARE VARIABLE vUserFirstName VARCHAR(50);
  DECLARE VARIABLE vEMail VARCHAR(100);
  DECLARE VARIABLE vUserName VARCHAR(100);
  DECLARE VARIABLE vItemType INTEGER;
  DECLARE VARIABLE vUserID BIGINT;
  DECLARE VARIABLE vCountry BIGINT;
  DECLARE VARIABLE vConversionRate DOUBLE PRECISION;
  DECLARE VARIABLE vUserDiscount DOUBLE PRECISION;
  DECLARE VARIABLE vProductDiscount DOUBLE PRECISION;
BEGIN 
   
  IF (NOT EXISTS(SELECT BASKETID FROM WS_SHOPPINGBASKET WHERE BASKETID = :ipBASKETID)) THEN 
    EXCEPTION EXC_WS_INVALID_SHOPPING_BASKET; 

  SELECT M.FIRSTNAME, M.EMAIL, M.USERNAME, M.COUNTRY
  FROM WS_MEMBERS M
  WHERE (M.ID = :ipUSERID)
  INTO :vUserFirstName, :vEMail, :vUserName, :vCountry;

  EXECUTE PROCEDURE WSF_WS_INVOICE_INS12(ipUSERID, CURRENT_TIMESTAMP, ipTOTAL, ipSHIPPING, IPDISCOUNTAMMOUNT, ipDISCOUNT, ipVATAMMOUNT, ipPAYMETHOD, ipSHIPPINGADDRESS, ipCONVERSION_RATE, ipVAT_RATE, ipCULTURE, ipCOUPONCODE, ipUSER_SESSION, ipREMOTE_HOST, ipSTOREID, ipTILLID, IPCOST_MULTIPLIER, IPVOUCHERTYPE, ipNOTES, ipWEBSITE_ID, ipVATREMOVED, ipOriginalCountry, IPSHIPPINGREMOVETAX, ipVersion, ipSUBTOTAL, ipOPTIONS) RETURNING_VALUES :opINVOICEID; 

  SELECT c.CONVERSION_RATE
  FROM WS_COUNTRIES c
  WHERE c.ID = :vCountry
  INTO :vConversionRate;
  
  FOR  
    SELECT a.OPITEMID, a.OPDESCRIPTION || ' (' || a.OPPRODUCT_SIZE || ')', a.OPPRICE, a.OPQTY, a.OPQTY * a.OPPRICE, a.OPITEM_TYPE, a.OPUSER_ID, a.opUSER_DISCOUNT
    FROM WSP_SHOPPINGBASKET(:ipBASKETID) a 
    INTO :vInvItemID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vItemType, :vUserID, :vUserDiscount
  DO 
  BEGIN   
    vProductDiscount = 0.00;
    
    IF (vItemType = 1) THEN
    BEGIN
        SELECT pcs.DISCOUNT_VALUE
        FROM WS_PRODUCTS_COST_SIZE pcs
        WHERE pcs.ID = :vInvItemID
        INTO :vProductDiscount; 
    END    
    
    INSERT INTO WS_INVOICE_ITEMS(INVOICEID, DESCRIPTION, COST, QTY, PRICE, ITEM_ID, ITEM_TYPE, STAFFMEMBER, PRODUCT_DISCOUNT, USER_DISCOUNT) 
    VALUES (:opINVOICEID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vInvItemID, :vItemType, :vUserID, :vProductDiscount, :vUserDiscount);
  END 

  
  IF (IPCOUPONCODE <> '') THEN
  BEGIN
    UPDATE WS_COUPONS
    SET VOUCHER_USAGE = VOUCHER_USAGE + 1
    WHERE DISCOUNT_COUPON = :IPCOUPONCODE;
  END
  
  DELETE FROM WS_SHOPPINGBASKET WHERE (BASKETID = :ipBASKETID);  

  SUSPEND;
END^
SET TERM ; ^


GRANT EXECUTE
 ON PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL12 TO PUBLIC;
 


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_INVOICE_PAID FOR WS_INVOICE ACTIVE
BEFORE UPDATE POSITION 0
AS 
  DECLARE VARIABLE vPayType INTEGER;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF ((NEW.STATUS IN (SELECT a.ID FROM WS_PAYMENT_STATUS a WHERE a.IS_PAID = 'Y')) AND (OLD.STATUS NOT IN (SELECT a.ID FROM WS_PAYMENT_STATUS a WHERE a.IS_PAID = 'Y'))) THEN
    BEGIN
        vPayType = Old.STATUS;
    
        IF (NOT EXISTS(SELECT ID FROM WS_INVOICE_ORDERS WHERE ORDER_ID = NEW.ID)) THEN
        BEGIN
            INSERT INTO WS_INVOICE_ORDERS(ORDER_ID, USERID, PURCHASEDATE, TOTALCOST, STATUS, SHIPPING_COSTS, DISCOUNT, PROCESS_STATUS, 
                SHIPPING_ADDRESS, CONVERSION_RATE, VAT_RATE, CULTURE, DISCOUNT_AMMOUNT, VAT_AMMOUNT, PAYMENT_TYPE, USER_SESSION, REMOTE_HOST, COUPON_NAME, 
                STORE_ID, TILL_ID, COST_MULTIPLIER, VOUCHERTYPE, NOTES, WEBSITE_ID, VAT_REMOVED, ORIGINAL_COUNTRY, SHIPPING_REMOVE_TAX,
                INVOICE_VERSION, SUB_TOTAL, OPTIONS)
            VALUES (NEW.ID, NEW.USERID, NEW.PURCHASEDATE, NEW.TOTALCOST, NEW.STATUS, NEW.SHIPPING_COSTS, NEW.DISCOUNT, NEW.PROCESS_STATUS, 
                NEW.SHIPPING_ADDRESS, NEW.CONVERSION_RATE, NEW.VAT_RATE, NEW.CULTURE, NEW.DISCOUNT_AMMOUNT, NEW.VAT_AMMOUNT, :vPayType, NEW.USER_SESSION, 
                NEW.REMOTE_HOST, NEW.COUPON_NAME, NEW.STORE_ID, NEW.TILL_ID, NEW.COST_MULTIPLIER, new.VOUCHERTYPE, new.NOTES, new.WEBSITE_ID, 
                NEW.VAT_REMOVED, NEW.ORIGINAL_COUNTRY, NEW.SHIPPING_REMOVE_TAX, NEW.INVOICE_VERSION, NEW.SUB_TOTAL, NEW.OPTIONS);
        END
    END
  END
END^
SET TERM ; ^




