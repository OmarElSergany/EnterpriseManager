
SET TERM ^ ;

CREATE OR ALTER PROCEDURE SPSEO_FIX_MISSING_CITIES
AS
 DECLARE VARIABLE vIPAddress VARCHAR(100);
 DECLARE VARIABLE vCityID BIGINT;
 DECLARE VARIABLE vID BIGINT;
 DECLARE VARIABLE vRunCount INTEGER;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SPSEO_FIX_MISSING_CITIES') RETURNING_VALUES :vRunCount;
    
    IF (vRunCount > 0) THEN
        EXIT;
        
        
    FOR
        SELECT a.IP_ADDRESS, a.ID
        FROM SEO_DATA a
        WHERE a.CITY_ID NOT IN (SELECT ipc.WD$ID FROM WD$IPCITY ipc)
        INTO :vIPAddress, :vID
    DO
    BEGIN
        SELECT opID
        FROM WD$GEO_DECODE_IP(:vIPAddress)
        INTO :vCityID;
        
        IF (vCityID IS NOT NULL) THEN
        BEGIN
            UPDATE SEO_DATA seo
            SET seo.CITY_ID = :vCityID
            WHERE seo.ID = :vID;
        END
    END
END ^


SET TERM ; ^

GRANT EXECUTE ON PROCEDURE SPSEO_FIX_MISSING_CITIES TO PUBLIC;





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_SEO_UPDATE FOR SEO_DATA
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
	IF (NEW.SALE_AMOUNT > 0 AND OLD.SALE_AMOUNT <= 0.00) THEN
	BEGIN
        UPDATE SEO_UPDATE_STATUS
        SET PROCESS_STATUS = 11
        WHERE SEO_DATA_ID = NEW.ID
          AND PROCESS_STATUS > 5;
	END 
END^

SET TERM ; ^ 




CREATE OR ALTER VIEW SALON_WITH_LAT_LON2 (SALON_ID, POSTCODE_1, LATITUDE, LONGITUDE)
AS 
select s.id, TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))), 
  p.latitude, p.longitude 
from ws_salons s 
  left join hwz_postcodes p on(p.outcode = TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))))
WHERE s.SHOW_ON_WEB = 0;


SET TERM ^ ;
ALTER PROCEDURE WSF_FIND_NEAREST_SALON (
    POSTCODE Varchar(5) )
RETURNS (
    DISTANCE Float,
    SALON_ID Bigint )
AS
DECLARE VARIABLE vsLAT FLOAT;
  DECLARE VARIABLE vsLON FLOAT;
  DECLARE VARIABLE vdLAT FLOAT;
  DECLARE VARIABLE vdLON FLOAT;
BEGIN
  FOR 
  SELECT source.LATITUDE, source.LONGITUDE, dest.LATITUDE, dest.LONGITUDE, dest.SALON_ID
  FROM hwz_postcodes source, 
    SALON_WITH_LAT_LON2 dest
  WHERE TRIM(source.outcode) = TRIM(:POSTCODE)
    AND dest.LONGITUDE IS NOT NULL
  INTO :vsLAT, :vsLON, vdLAT, vdLON, :SALON_ID
  DO
  BEGIN
    EXECUTE PROCEDURE GEODISTKM(vsLAT, vsLON, vdLAT, vdLON) RETURNING_VALUES :DISTANCE;
    SUSPEND;
  END
END^
SET TERM ; ^



GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SALON_WITH_LAT_LON2 TO PUBLIC;

