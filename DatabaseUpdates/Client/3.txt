
CREATE TABLE MOD_MODULE
(
  ID Bigint NOT NULL,
  NAME Varchar(250) NOT NULL,
  DESCRIPTION Blob sub_type 1,
  REPLICATE$HASH Bigint,
  CONSTRAINT IDX_MOD_MODULE PRIMARY KEY (ID)
);

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOD_MODULE TO PUBLIC;




CREATE TABLE MOD_CLASS
(
  ID Bigint NOT NULL,
  MODULE_ID Bigint NOT NULL,
  NAMESPACE Varchar(250),
  NAME Varchar(250) NOT NULL,
  DESCRIPTION Blob sub_type 1,
  EXAMPLE_USAGE Blob sub_type 1,
  IS_PRIMARY Char(1),
  REPLICATE$HASH Bigint,
  CONSTRAINT PK_MOD_CLASS_ID PRIMARY KEY (ID)
);

ALTER TABLE MOD_CLASS ADD CONSTRAINT FK_MOD_CLASS_MODULE_ID
  FOREIGN KEY (MODULE_ID) REFERENCES MOD_MODULE (ID) ON UPDATE CASCADE ON DELETE CASCADE;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOD_CLASS TO PUBLIC;



CREATE TABLE MOD_CLASS_MEMBER
(
  ID Bigint NOT NULL,
  CLASS_ID Bigint NOT NULL,
  MEMBER_PROPERTIES Bigint NOT NULL,
  NAME Varchar(250) NOT NULL,
  DESCRIPTION Blob sub_type 1,
  EXCEPTIONS Blob sub_type 1,
  EXAMPLE_USAGE Blob sub_type 1,
  RETURN_VALUE Varchar(250),
  RETURN_VALUE_DESC Varchar(5000),
  REPLICATE$HASH Bigint,
  CONSTRAINT PK_MOD_CLASS_MEMBER_ID PRIMARY KEY (ID)
);

ALTER TABLE MOD_CLASS_MEMBER ADD CONSTRAINT FK_MOD_CLASS_CLASS_ID
  FOREIGN KEY (CLASS_ID) REFERENCES MOD_CLASS (ID) ON UPDATE CASCADE ON DELETE CASCADE;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOD_CLASS_MEMBER TO PUBLIC;




CREATE TABLE MOD_CLASS_MEMBER_PARAMETERS
(
  ID Bigint NOT NULL,
  CLASS_MEMBER_ID Bigint NOT NULL,
  NAME Varchar(250) NOT NULL,
  PROPERTIES Bigint NOT NULL,
  PARAMETER_TYPE Integer NOT NULL,
  DESCRIPTION Blob sub_type 1,
  PARAM_TYPE Varchar(100) NOT NULL,
  EXAMPLE_USAGE Blob sub_type 1,
  DEFAULT_VALUE Varchar(100),
  SORT_ORDER Integer,
  REPLICATE$HASH Bigint,
  CONSTRAINT PK_MOD_CLASS_MEMBER_PARAM_ID PRIMARY KEY (ID)
);

ALTER TABLE MOD_CLASS_MEMBER_PARAMETERS ADD CONSTRAINT FK_MOD_CLASS_MEMBER_ID
  FOREIGN KEY (CLASS_MEMBER_ID) REFERENCES MOD_CLASS_MEMBER (ID) ON UPDATE CASCADE ON DELETE CASCADE;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOD_CLASS_MEMBER_PARAMETERS TO PUBLIC;

CREATE OR ALTER EXCEPTION SD$EXCEPTION_TASKS 'Error';

CREATE GENERATOR WD$GEN_SETTINGS_ID;

CREATE GENERATOR WD$GENERAL_ID;

CREATE GENERATOR GEN_GEO_IP_VERSION;

CREATE GENERATOR SD$GEN_COMPARE_ID;

CREATE GENERATOR SD$GENERATOR_TASK_ID;

CREATE GENERATOR SD$GENERATOR_TASK_ERROR_ID;

CREATE GENERATOR GEN_STOCK_CONTROL;

CREATE GENERATOR GEN_STOCK_IN;

CREATE GENERATOR GEN_STOCK_OUT;

CREATE GENERATOR GEN_STOCK_AUDIT;

CREATE GENERATOR GEN_PROD_TO_PROD_GROUP;

CREATE GENERATOR WD$GEN_IP_CITY;

CREATE GENERATOR GEN_SEO_DATA_ID;

CREATE GENERATOR GEN_MODULE_GENERIC_ID;


CREATE OR ALTER VIEW SALON_WITH_LAT_LON
(
    SALON_ID,
    LATITUDE,
    LONGITUDE,
    POSTCODE_1
)
AS
select s.id, TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))), 
  p.latitude, p.longitude 
from ws_salons s 
  left join hwz_postcodes p on(p.outcode = TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))))
WHERE s.SHOW_ON_WEB = 0;


CREATE OR ALTER VIEW VW_STATS_VISIT_BY_COUNTRY_TODAY
(
    SESSION,
    COUNTRY_CODE,
    COUNTRY
)
AS
SELECT r.USER_SESSION, r.COUNTRY_CODE, c.COUNTRY
FROM WS_WEB_LOG r
  inner join WS_COUNTRIES c on (c.COUNTRYCODE = r.COUNTRY_CODE)
WHERE CAST(r.LOG_DATE as DATE) = CURRENT_DATE
group by r.USER_SESSION, r.COUNTRY_CODE, c.COUNTRY;


CREATE INDEX IDX_REPLICATE$OPERATIONLOGO ON REPLICATE$OPERATIONLOG (OPERATION);

CREATE INDEX IDX_REPLICATE$OPERATIONLOGP ON REPLICATE$OPERATIONLOG (PKEY1);

CREATE INDEX IDX_REPLICATE$OPERATIONLOGPV ON REPLICATE$OPERATIONLOG (PKEY1_VALUE);

CREATE INDEX IDX_REPLICATE$OPERATIONLOGT ON REPLICATE$OPERATIONLOG (TABLE_NAME);

DROP INDEX IDX_KNOWLEDGEBASE_ITEMS;



CREATE UNIQUE INDEX IDX_KNOWLEDGEBASE_ITEMS ON WS_KNOWLEDGEBASE_ITEMS (SUBGROUPID, DESCRIPTION);





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_DOWNLOAD_STATS_ID FOR WS_DOWNLOAD_STATS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    NEW.ID = GEN_ID(GEN_DOWNLOAD_STATS_ID, 1);
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INVOICE_CREATE_LICENCES FOR WS_INVOICE_ORDERS ACTIVE AFTER INSERT POSITION 100
 AS 
  DECLARE VARIABLE vLicType INTEGER;
  DECLARE VARIABLE vLicCount INTEGER;
  DECLARE VARIABLE vCount INTEGER;
BEGIN 
    FOR
        SELECT pcs.LICENCE_TYPE, pcs.LICENCE_COUNT
        FROM WS_PRODUCTS_COST_SIZE pcs
        WHERE pcs.IS_LICENCE = 'Y'
            AND pcs.ID IN (SELECT ii.ITEM_ID FROM WS_INVOICE_ITEMS ii WHERE ii.INVOICEID = New.ORDER_ID)
        INTO :vLicType, :vLicCount
    DO
    BEGIN
        vCount = 0;
        
        WHILE (vCount < vLicCount) DO
        BEGIN
            INSERT INTO WS_LICENCES (LICENCE_TYPE, DOMAIN_NAME, EXPIRES, TRIAL, VALID, MEMBER_ID, UPDATES, START_DATE, INVOICE_ID)
            VALUES 
            (
                :vLicType, 
                '', 
                CURRENT_TIMESTAMP + 365, 
                'N', 
                'Y', 
                new.USERID, 
                0, 
                CURRENT_TIMESTAMP , 
                new.ID
            );
            
            vCount = vCount + 1;
        END    
    END
END^

SET TERM ; ^



