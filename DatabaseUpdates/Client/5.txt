

CREATE OR ALTER VIEW SALON_WITH_LAT_LON
(
    SALON_ID,
    LATITUDE,
    LONGITUDE,
    POSTCODE_1
)
AS
select s.id, TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))), 
  p.latitude, p.longitude 
from ws_salons s 
  left join hwz_postcodes p on(p.outcode = TRIM(LEFT(s.POSTCODE, POSITION(' ' IN s.POSTCODE))))
WHERE s.SHOW_ON_WEB = 0;




CREATE OR ALTER VIEW VW_ANNOUNCEMENTS
(
    ANNOUNCE_TEXT,
    ID,
    GROUPID,
    ANNOUNCE_DATE,
    GROUPNAME,
    SUBJECT,
    AUTHOR
)
AS
SELECT A.ID, A.GROUP_ID, AG.GROUPNAME, A.SUBJECT, A.AUTHOR, A.ANNOUNCE_DATE, A.DATA
FROM WS_ANNOUNCEMENTS A
  INNER JOIN WS_ANNOUNCEMENT_GROUPS AG ON (AG.ID = A.GROUP_ID);



CREATE OR ALTER VIEW VW_STATS_VISIT_BY_COUNTRY_TODAY
(
    SESSION,
    COUNTRY_CODE,
    COUNTRY
)
AS
SELECT r.USER_SESSION, r.COUNTRY_CODE, c.COUNTRY
FROM WS_WEB_LOG r
  inner join WS_COUNTRIES c on (c.COUNTRYCODE = r.COUNTRY_CODE)
WHERE CAST(r.LOG_DATE as DATE) = CURRENT_DATE
group by r.USER_SESSION, r.COUNTRY_CODE, c.COUNTRY;



SET TERM ^ ;
ALTER TRIGGER TR_DOWNLOAD_STATS_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_DOWNLOAD_STATS_ID, 1);
END^
SET TERM ; ^



CREATE UNIQUE INDEX UNQ_EXPORTABLE_CONTENT_FIELDS ON EXPORTABLE_CONTENT (TABLE_NAME, COLUMN_NAME);


CREATE INDEX IDX_SEO_DATA_BOT ON SEO_DATA (IS_BOT);


CREATE INDEX IDX_SEO_DATA_BOUNCED ON SEO_DATA (BOUNCED);


CREATE INDEX IDX_SEO_DATA_CITY_ID ON SEO_DATA (CITY_ID);


CREATE INDEX IDX_SEO_DATA_CREATED ON SEO_DATA (CREATED);


CREATE INDEX IDX_SEO_DATA_REFERRAL_TYPE ON SEO_DATA (REFERRAL_TYPE);


CREATE INDEX IDX_SEO_DATA_SESSION ON SEO_DATA (SESSION_ID);

ALTER TABLE HWZ_POSTCODES DROP CONSTRAINT INTEG_705;


alter table HWZ_POSTCODES
add constraint PK_HWZ_POSTCODES_OUTCODE
primary key (OUTCODE);



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_POS_LICENSES_ID FOR POS_LICENCES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN
    BEGIN
        NEW.ID = GEN_ID(GEN_POS_LICENSES, 1);
    END
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CELEBRITY_ID FOR WS_CELEBRITIES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_WS_CELEBRITY_ID, 1);
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_APPOINTMENTS_PREVENT_DELETE FOR WS_APPOINTMENTS ACTIVE BEFORE DELETE POSITION 0
 AS 
BEGIN 
	exception EXC_NO_DELETE_APPT;
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_PRODUCT_COST_PRICES FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF (NEW.PRODUCT_COST2 IS NULL) THEN
        NEW.PRODUCT_COST2 = NEW.PRODUCT_COST;
        
    IF (NEW.PRODUCT_COST3 IS NULL) THEN
        NEW.PRODUCT_COST3 = NEW.PRODUCT_COST;
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WORKING_DAYS_CREATE FOR WS_APPOINTMENT_OPTIONS_EX ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ALLOW_TREATMENTS IS NULL) THEN
        NEW.ALLOW_TREATMENTS = 'Y';
END^

SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER WS_BANNED_IP_BI FOR WS_BANNED_IP ACTIVE BEFORE INSERT POSITION 0
 AS
BEGIN
  IF (NEW.DATE_BANNED IS NULL) THEN
    NEW.DATE_BANNED = CURRENT_TIMESTAMP;
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CLIENT_ACTIONS_UPDATE FOR WS_CLIENT_ACTIONS ACTIVE BEFORE UPDATE POSITION 0
 AS 
  declare variable ActionCount integer;
  declare variable ClientID integer;
  declare variable currAction integer;
BEGIN 
	IF ((NEW.DATE_ACTIONED IS NOT NULL) AND (OLD.DATE_ACTIONED IS NULL)) THEN
	BEGIN
        IF (new.CLIENT_ACTION = 102) THEN
            UPDATE WS_CLIENTS SET SALONS = 'Y' WHERE ID = new.CLIENT_ID;
            
        IF (new.CLIENT_ACTION = 3) THEN
            UPDATE WS_CLIENTS SET INFO_PACK = 'Y' WHERE ID = new.CLIENT_ID;
	
        IF (new.CLIENT_ACTION = 101) THEN
            UPDATE WS_CLIENTS SET ACCOUNT = 'Y' WHERE ID = new.CLIENT_ID;
        
        IF (new.CLIENT_ACTION IN (5, 6, 7)) THEN
        BEGIN
            clientid = new.CLIENT_ID;
            curraction = new.CLIENT_ACTION;
            
            SELECT count(a.CLIENT_ACTION) as "ACTIONCOUNT", a.CLIENT_ID
            FROM WS_CLIENT_ACTIONS a
            where a.CLIENT_ACTION in (5, 6, 7)
            and a.DATE_ACTIONED is not null
            AND a.CLIENT_ID = :clientid
            and a.CLIENT_ACTION <> :curraction
            group by 2
            INTO :actioncount, :clientid;
            
            IF (actioncount = 2) THEN
            begin
                UPDATE WS_CLIENTS c SET c.TRAINING = 'Y' WHERE c.ID = :clientid;
            END
        END
	END
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_HASH_TAG_ID FOR WS_HASH_TAGS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_WS_HASH_TAGS, 1);
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_HASH_TAG_PAGES_ID FOR WS_HASH_TAG_PAGES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_WS_HASH_TAG_PAGES, 1);
        
    new.PAGE_NAME = UPPER(new.PAGE_NAME);
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CAMP_COUNTRIES_ID FOR WS_CAMPAIGNS_COUNTRIES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CAMP_COUNTRY_ID, 1);
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_SALON_DISCOUNT FOR WS_INVOICE_ORDERS ACTIVE AFTER INSERT POSITION 20000
 AS 
BEGIN 
    EXECUTE PROCEDURE WSF_SALON_OWNER_DISCOUNT(NEW.ID);
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_KBGROUP_ID FOR WS_KNOWLEDGEBASE_GROUPS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    IF (New.ID IS NULL) THEN
    BEGIN
      NEW.ID = GEN_ID(GEN_KNOWLEDGEBASE_GROUPS_ID, 1);
    END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_MEMBERS_CLIENT_EMAIL_UPDATE FOR WS_MEMBERS ACTIVE BEFORE UPDATE POSITION 20000
 AS 
BEGIN 
    IF (new.MEMBER_LEVEL > 0) THEN
    BEGIN
        IF (NEW.EMAIL <> OLD.EMAIL) THEN
        BEGIN
            UPDATE WS_CLIENTS C
            SET C.EMAIL = NEW.EMAIL
            WHERE UPPER(C.EMAIL) = UPPER(OLD.EMAIL);
        END
    END
END^

SET TERM ; ^




DROP TRIGGER TR_MEMBERS_PERMISSIONS;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_MEMBER_PERMISSIONS FOR WS_MEMBERS ACTIVE BEFORE UPDATE POSITION 0
 AS 
BEGIN 
    IF (New.MEMBER_LEVEL <> Old.MEMBER_LEVEL) THEN
    BEGIN
        IF (NEW.MEMBER_LEVEL > 4) THEN
        BEGIN
          IF (NOT EXISTS(SELECT USER_ID FROM WS_PERMISSIONS WHERE USER_ID = old.ID)) THEN
          BEGIN
              INSERT INTO WS_PERMISSIONS (USER_ID, PERMISSIONS_CALENDAR, PERMISSIONS_POS, PERMISSIONS_WEBSITE, PERMISSIONS_INVOICING, PERMISSIONS_REPORTS, PERMISSIONS_STOCK, PERMISSIONS_STAFF)
              VALUES (old.ID, 0, 0, 0, 0, 0, 0, 0);
          END
        END
        
        IF (NEW.MEMBER_LEVEL < 5) THEN
        BEGIN
          DELETE FROM WS_PERMISSIONS WHERE USER_ID = New.ID;
        END
    END
END^

SET TERM ; ^
DROP TRIGGER WS_MISSING_LINKS_BI;



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_MISSING_LINKS_ID FOR WS_MISSING_LINKS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN
     NEW.ID = GEN_ID(GEN_WS_MISSING_LINKS_ID, 1);
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_NEWS_DATA FOR WS_NEWS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (New.NEWS_DATE IS NULL) THEN
  BEGIN
    New.NEWS_DATE = CURRENT_TIMESTAMP;
  END
END^

SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_COST_SIZE_TYYPE FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE INSERT POSITION 1
 AS 
 DECLARE VARIABLE vNewID INTEGER;
BEGIN 
    IF (new.PRODUCT_TYPE IS NULL) THEN
    BEGIN
        SELECT FIRST 1 a.ID
        FROM WS_PRODUCT_COST_TYPE a
        INTO :vNewID;
    
        new.PRODUCT_TYPE = :vNewID;
    END
END^

SET TERM ; ^


DROP TRIGGER TR_PROD_GROUP_ID;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_PRODUCT_GROUP_ID FOR WS_PRODUCT_GROUP ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    if (NEW.ID is NULL) then
        NEW.ID = GEN_ID(GEN_WS_PRODUCT_GROUP_ID, 1);
END^
SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TIMELINE_UPDATE_STATS FOR WS_TIMELINE_EVENTS ACTIVE BEFORE INSERT OR UPDATE POSITION 100
 AS 
  DECLARE VARIABLE vSales double precision;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
	-- update sales for the DATE
	IF (NEW.EVENT_SALES IS NULL OR new.EVENT_SALES = 0) THEN
	BEGIN
	
        SELECT sum(a.TOTALCOST)
        FROM WS_INVOICE_ORDERS a
            left join WS_MEMBERS m on (m.ID = a.USERID)
            left join WS_COUNTRIES c on (c.ID = m.COUNTRY)
        where c.ID = new.EVENT_COUNRY_ID and
            cast(a.PURCHASEDATE as date) = new.EVENT_DATE 
        INTO :vSales;
    
        new.EVENT_SALES = vSales;
    END
    
    IF (new.EVENT_SALES IS NULL) THEN
        new.EVENT_SALES = 0.00;
        
    if (new.EVENT_CIRCULATION IS NULL) THEN
        new.EVENT_CIRCULATION = 0;
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_VIDEO_ID FOR WS_VIDEOS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_WS_VIDEO_ID, 1);
END^

SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CAMPAIGNS_NAME_UPDATE FOR WS_CAMPAIGNS ACTIVE AFTER UPDATE POSITION 0
 AS 
BEGIN 
  if ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (NEW.CAMPAIGN_NAME <> OLD.CAMPAIGN_NAME) THEN
    BEGIN
        UPDATE WS_CAMPAIGN_STATS SET CAMPAIGN_NAME = NEW.CAMPAIGN_NAME WHERE ID = OLD.ID;
    END
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CAMPAIGN_STATS_INSERT FOR WS_CAMPAIGNS ACTIVE AFTER INSERT POSITION 32000
 AS 
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    INSERT INTO WS_CAMPAIGN_STATS (ID, CAMPAIGN_NAME, TOTAL_VISITS, TOTAL_INVOICES, TOTAL_SALES)
    VALUES (NEW.ID, NEW.CAMPAIGN_NAME, 0, 0, 0.00);
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_KB_ITEM_ID FOR WS_KNOWLEDGEBASE_ITEMS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (new.ID is null) THEN
    BEGIN
        new.ID = gen_id(GEN_KNOWLEDGEBASE_ITEMS_ID, 1);
    end
END^

SET TERM ; ^


DROP TRIGGER TR_DOWNLOADSS_ID;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_WS_DOWNLOADS_ID FOR WS_DOWNLOADS ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_WS_DOWNLOAD_ID, 1);
END^
SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_COST_NOTIFICATIONS_UPDATE FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE UPDATE POSITION 32000
 AS 
  DECLARE VARIABLE vStockItem VARCHAR(200);
  DECLARE VARIABLE vMailMessage BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vSubject VARCHAR(200);
  DECLARE VARIABLE vEmail VARCHAR(150);
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN    
	IF (NEW.OUT_OF_STOCK = 'F' AND OLD.OUT_OF_STOCK = 'T') THEN
	BEGIN
        
        SELECT p.NAME || ' ' || pc.PRODUCT_SIZE
        FROM WS_PRODUCTS_COST_SIZE pc
            LEFT JOIN WS_PRODUCTS p ON (p.ID = pc.PRODUCT_ID)
        WHERE pc.ID = NEW.ID
        INTO :vStockItem;
	
        
        SELECT a.TEMPLATE, a.SUBJECT
        FROM WS_SYSTEM_EMAILS a
        WHERE a.ID = 13
        INTO :vMailMessage, :vSubject;
        
        
        vMailMessage = REPLACE(vMailMessage, '[STOCKITEM]', vStockItem);
        vMailMessage = REPLACE(vMailMessage, '[PRODUCTID]', NEW.PRODUCT_ID);
        vSubject = REPLACE(vSubject, '[STOCKITEM]', vStockItem);
        
        
        FOR
            SELECT a.USER_EMAIL
            FROM WS_PRODUCT_NOTIFICATIONS a
            WHERE a.PRODUCT_COST_ID = NEW.ID
            INTO :vEmail
        DO
        BEGIN
              INSERT INTO WS_EMAIL(
                ID,
                TO_NAME, 
                TO_EMAIL, 
                FROM_NAME, 
                FROM_MAIL, 
                SUBJECT, 
                MAIL_MESSAGE, 
                PRIORITY, 
                QUEUE_DATE,
                SEND_DATE_TIME    
              ) VALUES (
                GEN_ID(GEN_WS_EMAIL_ID, 1),
                :vEmail, 
                :vEmail, 
                'noreply@heavenskincare.com', 
                'noreply@heavenskincare.com', 
                :vSubject, 
                :vMailMessage, 
                1,
                CURRENT_TIMESTAMP, 
                CURRENT_TIMESTAMP
              );
        END
        
        
        DELETE 
        FROM WS_PRODUCT_NOTIFICATIONS
        WHERE PRODUCT_COST_ID = NEW.ID;
	END
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PCS_UPDATE_BASKETS FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE UPDATE POSITION 1500
 AS 
BEGIN 
	IF (NEW.IS_DELETED <> OLD.IS_DELETED OR NEW.MEMBER_LEVEL <> OLD.MEMBER_LEVEL) THEN
	BEGIN
        DELETE
        FROM WS_SHOPPINGBASKET sb
        where sb.ITEM_TYPE = 1
        and (sb.ITEMID in 
        (
        select pcs.id 
        from WS_PRODUCTS_COST_SIZE pcs
          join ws_products p ON (p.ID = pcs.PRODUCT_ID)
        where (p.IS_DELETED = 'Y'
          OR p.OUT_OF_STOCK = 'Y')
          OR (pcs.IS_DELETED = 'Y'
          OR pcs.OUT_OF_STOCK = 'Y'
          OR pcs.MEMBER_LEVEL > 0)
        ))
        OR ((sb.DATE_CREATED < CURRENT_TIMESTAMP - 360) AND (NOT EXISTS(SELECT a.BASKET_ID FROM POS_SAVED_ORDERS a WHERE a.BASKET_ID = sb.BASKETID)));
	END
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_LEAVE_STATUS_CHECK FOR STAFF_LEAVE ACTIVE BEFORE INSERT POSITION 100
 AS 
BEGIN 
  IF (NEW.STATUS IS NULL) THEN
    NEW.STATUS = 0;
END^

SET TERM ; ^


DROP TRIGGER TR_COUP_REQUIRED_ID;

SET TERM ^ ;
CREATE TRIGGER TR_COUPON_REQUIRED_ID FOR WS_COUPON_REQUIRED_PRODUCTS ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_COUP_REQUIRED_ID, 1);
END^
SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER SEO_DATA_PAGE_VIEWS_BI FOR SEO_DATA_PAGE_VIEWS ACTIVE BEFORE INSERT POSITION 500
 AS
BEGIN
  IF (NEW.URL_HASH IS NULL) THEN
    NEW.URL_HASH = HASH(LOWER(NEW.URL));
END^

SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_SEO_DATA_PAGE_VIEWS_HASH FOR SEO_DATA_PAGE_VIEWS ACTIVE BEFORE INSERT OR UPDATE POSITION 1000
 AS 
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN    
	NEW.URL_HASH = HASH(LOWER(SUBSTRING(NEW.URL FROM POSITION('/', NEW.URL, 10))));
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INVOICE_ITEM_STATUS FOR WS_INVOICE_ITEMS ACTIVE BEFORE INSERT POSITION 10
 AS 
BEGIN 
	IF (NEW.ITEM_STATUS IS NULL) THEN
        NEW.ITEM_STATUS = 0;
END^

SET TERM ; ^

DROP TRIGGER TR_APPT_CHANGES_INSERT;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_APPOINTMENT_UPDATES FOR WS_APPOINTMENTS ACTIVE
AFTER INSERT OR UPDATE POSITION 10001
AS 
BEGIN 
    IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
    BEGIN
        INSERT INTO WS_APPOINTMENTS_CHANGES(ID, APPOINTMENT_DATE, START_TIME, DURATION, STATUS, APPOINTMENT_TYPE, USER_ID, EMPLOYEE_ID, TREATMENT_ID, NOTES, CREATE_DATE, LAST_ALTERED_DATE, LAST_ALTERED_USER)
        VALUES
        (NEW.ID, new.APPOINTMENT_DATE, new.START_TIME, new.DURATION, new.STATUS, new.APPOINTMENT_TYPE, new.USER_ID, new.EMPLOYEE_ID, new.TREATMENT_ID, new.NOTES, new.CREATE_DATE, new.LAST_ALTERED_DATE, new.LAST_ALTERED_USER);
    END
END^
SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PAGE_LINK FOR WS_PRODUCTS ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF (NEW.PAGE_LINK IS NULL) THEN
		NEW.PAGE_LINK = '';
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_ANNOUNCEMENT_GROUPS_ID FOR WS_ANNOUNCEMENT_GROUPS ACTIVE BEFORE INSERT POSITION 0
 as
begin
  IF (NEW.ID IS NULL) THEN
    new.id = gen_id(ws_announcement_groups_id, 1);
end^

SET TERM ; ^

DROP TRIGGER WS_MEMBERS_BI0;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_WS_MEMBERS_ID FOR WS_MEMBERS ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
	if (new.ID is null) THEN
	  new.ID = gen_id(GEN_MEMBER_ID, 1);
END^
SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INV_ORDERS_STATUS_CHANGED FOR WS_INVOICE_ORDERS ACTIVE AFTER UPDATE POSITION 0
 AS 
BEGIN 
  IF (NEW.PROCESS_STATUS <> OLD.PROCESS_STATUS) THEN
  BEGIN
    IF ((OLD.PROCESS_STATUS = 2) OR (OLD.DATE_SHIPPED IS NOT NULL)) THEN
        EXCEPTION EXC_INV_PROCESS_STATUS_CHANGE;
        
    UPDATE WS_INVOICE SET PROCESS_STATUS = NEW.PROCESS_STATUS WHERE ID = NEW.ORDER_ID;
  END
END^

SET TERM ; ^


