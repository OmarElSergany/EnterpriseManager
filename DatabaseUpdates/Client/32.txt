SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_1
AS
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vDate DATE;
  DECLARE VARIABLE vHour INTEGER;
  DECLARE VARIABLE vQuarterHour INTEGER;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
  EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_1') RETURNING_VALUES :vCount;
    
  IF (vCount > 0) THEN
    EXIT;
  
  -- START HOURLY DATA
  FOR
    SELECT CAST(seo.CREATED AS DATE), 
    EXTRACT(HOUR FROM seo.CREATED),
    floor(EXTRACT(MINUTE FROM seo.CREATED) / 15) + 1,
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 1
    GROUP BY 1, 2, 3
    INTO :vDate, :vHour, :vQuarterHour, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE CAST(pv.VISITED AS DATE) = :vDate AND
        EXTRACT(HOUR FROM pv.VISITED) = :vHour AND
        (floor(EXTRACT(MINUTE FROM pv.VISITED) / 15) + 1) = :vQuarterHour
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT h.HOURLY_DATE FROM SEO_REPORT_HOURLY h WHERE h.HOURLY_DATE = :vDate AND h.HOURLY_HOUR = :vHour AND h.HOURLY_QUARTER = :vQuarterHour)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_HOURLY (HOURLY_DATE, HOURLY_HOUR, HOURLY_QUARTER, HOURLY_TOTALVISITS, HOURLY_HUMANVISITS, HOURLY_MOBILEVISITS, HOURLY_BOTVISITS, HOURLY_BOUNCED, HOURLY_TOTALPAGES, HOURLY_TOTAL_SALES, HOURLY_CONVERSIONS, HOURLY_MOBILECONVERSIONS, HOURLY_REFERUNKNOWN, HOURLY_REFERDIRECT, HOURLY_REFERAL, HOURLY_REFERORGANIC, HOURLY_REFERBING, HOURLY_REFERGOOGLE, HOURLY_REFERYAHOO, HOURLY_REFERFACEBOOK, HOURLY_REFERTWITTER)
        VALUES (:vDate, :vHour, :vQuarterHour, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_HOURLY SET 
        HOURLY_TOTALVISITS = HOURLY_TOTALVISITS + :vTotalVisits, 
        HOURLY_HUMANVISITS = HOURLY_HUMANVISITS + :vHumans, 
        HOURLY_MOBILEVISITS = HOURLY_MOBILEVISITS + :vMobile, 
        HOURLY_BOTVISITS = HOURLY_BOTVISITS + :vBot, 
        HOURLY_BOUNCED = HOURLY_BOUNCED + :vBounce, 
        HOURLY_TOTALPAGES = HOURLY_TOTALPAGES + :vPageCount, 
        HOURLY_TOTAL_SALES = HOURLY_TOTAL_SALES + :vSales, 
        HOURLY_CONVERSIONS = HOURLY_CONVERSIONS + :vConvert, 
        HOURLY_MOBILECONVERSIONS = HOURLY_MOBILECONVERSIONS + :vMobileConv, 
        HOURLY_REFERUNKNOWN = HOURLY_REFERUNKNOWN + :vRefUnknown, 
        HOURLY_REFERDIRECT = HOURLY_REFERDIRECT + :vRefDirect, 
        HOURLY_REFERAL = HOURLY_REFERAL + :vRefReferal, 
        HOURLY_REFERORGANIC = HOURLY_REFERORGANIC + :vRefOrganic, 
        HOURLY_REFERBING = HOURLY_REFERBING + :vRefBing, 
        HOURLY_REFERGOOGLE = HOURLY_REFERGOOGLE + :vRefGoogle, 
        HOURLY_REFERYAHOO = HOURLY_REFERYAHOO + :vRefYahoo, 
        HOURLY_REFERFACEBOOK = HOURLY_REFERFACEBOOK + :vRefFaceBook, 
        HOURLY_REFERTWITTER = HOURLY_REFERTWITTER + :vRefTwitter
        WHERE HOURLY_DATE = :vDate AND HOURLY_HOUR = :vHour AND HOURLY_QUARTER = :vQuarterHour;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 2
  WHERE us.PROCESS_STATUS = 1;
  -- END HOURLY DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_1 TO PUBLIC;


SET TERM ^ ;
ALTER PROCEDURE WD$GEO_DECODE_IP (
    IPIPADDRESS WD$IP_ADDRESS1 )
RETURNS (
    OPID Bigint,
    OPCOUNTRY Varchar(3),
    OPCITY Varchar(200),
    OPREGION Varchar(3),
    OPPOSTCODE Varchar(30),
    OPLATITUDE Decimal(10,4),
    OPLONGITUDE Decimal(10,4),
    OPMETROCODE Varchar(3),
    OPAREACODE Varchar(3),
    OPNUMERIC Bigint,
    OPSTARTBLOCK Bigint,
    OPENDBLOCK Bigint )
AS
DECLARE VARIABLE vIPAddressPart VARCHAR(3);
  DECLARE VARIABLE vCount INTEGER = 0;
  DECLARE VARIABLE vTotal BIGINT = 0;
  DECLARE VARIABLE vPart BIGINT = 0;
BEGIN
  FOR
    SELECT opPART
    FROM WD$SPLITSTRING(:ipIPADDRESS, '.')
    INTO :vIPAddressPart
  DO
  BEGIN
    IF (vCount = 0) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 16777216;
    ELSE IF (vCount = 1) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 65536;
    ELSE IF (vCount = 2) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 256;
    ELSE 
        vPart = CAST(vIPAddressPart AS BIGINT);
  
    --increase the COUNT
    vCount = vCount + 1;
    
    vTotal = vTotal + vPart;
  END

  opNUMERIC = vTotal;
    
  SELECT FIRST 1 c.WD$ID, c.WD$COUNTRY_CODE, ipc.WD$CITY, ipc.WD$REGION, 
    ipc.WD$POSTCODE, ipc.WD$LATITUDE, ipc.WD$LONGITUDE,
    ipc.WD$METRO_CODE, ipc.WD$AREA_CODE, c.WD$FROM_IP, c.WD$TO_IP
  FROM WD$IPTOCOUNTRY c
    LEFT JOIN WD$IPCITY ipc ON (ipc.WD$ID = c.WD$CITY_ID)
  WHERE (c.WD$FROM_IP <= :vTotal) AND (c.WD$TO_IP >= :vTotal)
  ORDER BY c.WD$VERSION
  INTO :opID, :opCOUNTRY, :opCITY, :opREGION, :opPOSTCODE, :opLATITUDE, :opLONGITUDE, :OPMETROCODE, :OPAREACODE, :opSTARTBLOCK, :opENDBLOCK;

  SUSPEND; 

END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE WD$GEO_DECODE_IP TO PUBLIC;



SET TERM ^ ;
ALTER PROCEDURE SPSEO_FIX_MISSING_CITIES
AS
DECLARE VARIABLE vIPAddress VARCHAR(100);
 DECLARE VARIABLE vCityID BIGINT;
 DECLARE VARIABLE vID BIGINT;
 DECLARE VARIABLE vRunCount INTEGER;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SPSEO_FIX_MISSING_CITIES') RETURNING_VALUES :vRunCount;
    
    IF (vRunCount > 0) THEN
        EXIT;
        
        
    FOR
        SELECT a.IP_ADDRESS, a.ID
        FROM SEO_DATA a
        WHERE a.CITY_ID NOT IN (SELECT ipc.WD$ID FROM WD$IPCITY ipc)
        INTO :vIPAddress, :vID
    DO
    BEGIN
        SELECT opID
        FROM WD$GEO_DECODE_IP(:vIPAddress)
        INTO :vCityID;
        
        IF (vCityID IS NOT NULL) THEN
        BEGIN
            UPDATE SEO_DATA seo
            SET seo.CITY_ID = :vCityID
            WHERE seo.ID = :vID;
        END
    END
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SPSEO_FIX_MISSING_CITIES TO PUBLIC;


