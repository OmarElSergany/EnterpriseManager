
SET TERM ^ ;
ALTER PROCEDURE WSP_WS_COUPONS_UPD (
    IPID Integer,
    IPDISCOUNT_COUPON Varchar(30),
    IPEXPIRES Timestamp,
    IPISACTIVE Integer,
    IPDISCOUNT Integer,
    IPFREEPRODUCT Bigint,
    IPMAINPRODUCT Bigint,
    IPVOUCHERTYPE Integer,
    IPFREEPOSTAGE Char(1),
    IPMAXUSAGE Integer,
    IPMINIMUMSPEND Double precision,
    IPSTART_DATE_TIME Timestamp )
AS
BEGIN
  
  IF (NOT EXISTS(SELECT ID FROM WS_COUPONS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_816002943;

  IF (ipDISCOUNT_COUPON IS NULL) THEN
    EXCEPTION EXC_816004153;

  UPDATE WS_COUPONS
  SET DISCOUNT_COUPON = :ipDISCOUNT_COUPON, 
     EXPIRES = :ipEXPIRES, 
     ISACTIVE = :ipISACTIVE, 
     DISCOUNT = :ipDISCOUNT,
     FREE_PRODUCT_CODE = :ipFREEPRODUCT,
     MAIN_PRODUCT_CODE = :ipMAINPRODUCT,
     VOUCHER_TYPE = :ipVOUCHERTYPE,
     FREE_POSTAGE = :ipFREEPOSTAGE,
     MAX_USAGE = :ipMAXUSAGE,
     MINIMUM_SPEND = :ipMINIMUMSPEND,
     START_DATE_TIME = :ipSTART_DATE_TIME
  WHERE ID = :ipID;
 
END^
SET TERM ; ^



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_CLIENTS_INS
 (IPCONTACT_NAME VARCHAR(100) CHARACTER SET UTF8, 
  IPCOMPANY_NAME VARCHAR(150) CHARACTER SET UTF8, 
  IPTELEPHONE VARCHAR(100) CHARACTER SET UTF8, 
  IPEMAIL VARCHAR(255) CHARACTER SET UTF8, 
  IPADDRESS VARCHAR(2000) CHARACTER SET UTF8, 
  IPPOSTCODE VARCHAR(15) CHARACTER SET UTF8, 
  IPNOTES VARCHAR(5000) CHARACTER SET UTF8, 
  IPSTATE INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
    OPNEWID = GEN_ID(GEN_WS_CLIENTS_ID, 1);
    
    INSERT INTO WS_CLIENTS
    (
        ID,
        CONTACT_NAME, 
        COMPANY_NAME, 
        TELEPHONE, 
        EMAIL, 
        ADDRESS, 
        POSTCODE,
        NOTES,
        STATE
    )
    VALUES
    (
        :OPNEWID,
        :ipCONTACT_NAME,
        :IPCOMPANY_NAME,
        :IPTELEPHONE,
        :IPEMAIL,
        :IPADDRESS,
        :IPPOSTCODE,
        :IPNOTES,
        :ipSTATE
    );
    
    SUSPEND;
END^

SET TERM ; ^ 

SET TERM ^ ;
ALTER PROCEDURE WSF_WS_INVOICE_INS10 (
    IPUSERID Integer,
    IPPURCHASEDATE Timestamp,
    IPTOTALCOST Decimal(6,2),
    IPSHIPPING Double precision,
    IPDISCOUNTAMMOUNT Decimal(6,2),
    IPDISCOUNT Integer,
    IPVATAMMOUNT Decimal(6,2),
    IPSTATUS Integer,
    IPSHIPPINGADDRESS Integer,
    IPCONVERSION_RATE Double precision,
    IPVAT_RATE Double precision,
    IPCULTURE Varchar(50),
    IPCOUPONCODE Varchar(30),
    IPUSER_SESSION Varchar(200),
    IPREMOTE_HOST Varchar(25),
    IPSTOREID Integer,
    IPTILLID Integer,
    IPCOST_MULTIPLIER Double precision,
    IPVOUCHERTYPE Integer,
    IPNOTES Varchar(1000),
    IPWEBSITE_ID Integer,
    IPVATREMOVED WS_BOOL,
    IPORIGINALCOUNTRY Integer,
    IPSHIPPINGREMOVETAX WS_BOOL )
RETURNS (
    OPNEWID Integer )
AS
DECLARE VARIABLE vNewIDCheck BIGINT;
BEGIN
  vNewIDCheck = ipUSERID;

  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :IPUSERID)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_MEMBERS'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :IPUSERID
    INTO :vNewIDCheck;
    
    IF (vNewIDCheck IS NOT NULL) THEN
        IPUSERID = vNewIDCheck;
  END
  
  vNewIDCheck = IPSHIPPINGADDRESS;

  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS_ADDRESSES WHERE ID = :IPSHIPPINGADDRESS)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_MEMBERS_ADDRESSES'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :IPSHIPPINGADDRESS
    INTO :vNewIDCheck;
    
    IF (vNewIDCheck IS NOT NULL) THEN
        IPSHIPPINGADDRESS = vNewIDCheck;
  END

  IF (ipUSERID IS NULL) THEN
    EXCEPTION EXC_790003550;

  IF (ipPURCHASEDATE IS NULL) THEN
    EXCEPTION EXC_790004174;

  IF (ipTOTALCOST IS NULL) THEN
    EXCEPTION EXC_790003884;

  
  opNewID = GEN_ID(GEN_INVOICE_ID, 1);

  INSERT INTO WS_INVOICE(
    ID,
    USERID, 
    PURCHASEDATE, 
    TOTALCOST,
    STATUS,
    SHIPPING_COSTS,
    DISCOUNT,
    DISCOUNT_AMMOUNT,
    VAT_AMMOUNT,
    SHIPPING_ADDRESS,
    CONVERSION_RATE, 
    VAT_RATE, 
    CULTURE,
    COUPON_NAME,
    USER_SESSION,
    REMOTE_HOST,
    STORE_ID,
    TILL_ID,
    COST_MULTIPLIER,
    VOUCHERTYPE,
    NOTES,
    WEBSITE_ID,
    VAT_REMOVED,
    ORIGINAL_COUNTRY,
    SHIPPING_REMOVE_TAX
  ) VALUES (
    :opNewID,
    :IPUSERID, 
    :ipPURCHASEDATE, 
    :ipTOTALCOST,
    :ipSTATUS,
    :ipSHIPPING,
    :ipDISCOUNT,
    :IPDISCOUNTAMMOUNT,
    :ipVATAMMOUNT,
    :IPSHIPPINGADDRESS,
    :ipCONVERSION_RATE, 
    :ipVAT_RATE, 
    :ipCULTURE,
    :IPCOUPONCODE,
    :ipUSER_SESSION,
    :ipREMOTE_HOST,
    :ipSTOREID,
    :ipTILLID,
    :IPCOST_MULTIPLIER,
    :IPVOUCHERTYPE,
    :IPNOTES,
    :ipWEBSITE_ID,
    :ipVATRemoved,
    :ipOriginalCountry,
    :IPSHIPPINGREMOVETAX
  );
  SUSPEND;
END^
SET TERM ; ^

SET TERM ^ ;
ALTER PROCEDURE WSP_PRODUCT_CAROUSEL
RETURNS (
    OPID Bigint,
    OPNAME Varchar(200),
    OPDESCRIPTION Varchar(4000),
    OPSHOW_ON_WEB Integer,
    OPIMAGE Varchar(300),
    OPSORT_ORDER Integer,
    OPSPECIAL_OFFER Integer,
    OPPRODUCT_GROUP Integer,
    OPPOPUPID Integer,
    OPSKU Varchar(15),
    OPREGAL Integer,
    OPOUT_OF_STOCK Varchar(1),
    OPBEST_SELLER Varchar(1),
    OPNEW_PRODUCT Varchar(1),
    OPFEATURED Char(1),
    OPCAROUSEL Char(1),
    OPFEATURES Varchar(4000),
    OPINGREDIENTS Varchar(4000),
    OPPRE_ORDER Char(1),
    OPVIDEO_LINK Varchar(1000),
    OPHOW_TO_USE Varchar(2000),
    OPPRIMARY_GROUP_TYPE Integer,
    OPFREE_SHIPPING Char(1),
    OPPAGE_LINK Varchar(255),
    OPFREE_PRODUCT Varchar(1) )
AS
BEGIN
  FOR 
  SELECT ID, NAME, DESCRIPTION, SHOW_ON_WEB, IMAGE, SORT_ORDER, SPECIAL_OFFER, PRODUCT_GROUP, 
    POPUP_ID, SKU, REGAL, OUT_OF_STOCK, BEST_SELLER, NEW_PRODUCT, FEATURED_PRODUCT, CAROUSEL, 
    FEATURES, INGREDIENTS, PRE_ORDER, VIDEO_LINK, HOW_TO_USE, PRIMARY_GROUP_TYPE, FREE_SHIPPING,
    PAGE_LINK, FREE_PRODUCT
  FROM WS_PRODUCTS
  WHERE (SHOW_ON_WEB = 0) AND  (CAROUSEL = 'Y')
    AND IS_DELETED = 'N'
  INTO :opID, :opNAME, :opDESCRIPTION, :opSHOW_ON_WEB, :opIMAGE, :opSORT_ORDER, :opSPECIAL_OFFER, 
    :opPRODUCT_GROUP, :opPOPUPID, :opSKU, :opREGAL, :opOUT_OF_STOCK, :opBEST_SELLER, :opNEW_PRODUCT, 
    :OPFEATURED, :OPCAROUSEL, :opFEATURES, :opINGREDIENTS, :opPRE_ORDER, :opVIDEO_LiNK, :opHOW_TO_USE,
    :opPRIMARY_GROUP_TYPE, :opFREE_SHIPPING, :opPAGE_LINK, :opFREE_PRODUCT
  DO
  BEGIN
      SUSPEND;
  END
  
END^
SET TERM ; ^



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_PAGE
 (IPPAGESIZE BIGINT, 
  IPPAGENUMBER BIGINT)
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPSTAFF_ID BIGINT, 
  OPNOTES VARCHAR(8000) CHARACTER SET UTF8, 
  OPEXPIRES TIMESTAMP, 
  OPLAST_REVIEWED TIMESTAMP, 
  OPREVIEWED_BY BIGINT, 
  OPPREFERRED_DATE DATE, 
  OPPREFERRED_TIME DOUBLE PRECISION )
AS
DECLARE VARIABLE vPAGENO INTEGER;
  DECLARE VARIABLE vCOUNTER INTEGER;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Invalid Page Number, must be greater than zero';

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Invalid Page Size, must be greater than zero';

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR
    SELECT a.ID, a.USER_ID, a.STAFF_ID, a.NOTES, a.EXPIRES, a.LAST_REVIEWED, a.REVIEWED_BY, a.PREFERRED_DATE, a.PREFERRED_TIME
    FROM WS_APPOINTMENT_WAIT_LIST_LONG a
    INTO :opID, :opUSER_ID, :opSTAFF_ID, :opNOTES, :opEXPIRES, :opLAST_REVIEWED, :opREVIEWED_BY, :opPREFERRED_DATE, :opPREFERRED_TIME
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WEB_LOG_INS_3
 (IPPLATFORM VARCHAR(255) CHARACTER SET UTF8, 
  IPBROWSERVERSION VARCHAR(255) CHARACTER SET UTF8, 
  IPISCRAWLER VARCHAR(255) CHARACTER SET UTF8, 
  IPREMOTEHOST VARCHAR(25) CHARACTER SET UTF8, 
  IPMETHOD VARCHAR(20) CHARACTER SET UTF8, 
  IPPATH VARCHAR(255) CHARACTER SET UTF8, 
  IPQUERY VARCHAR(500) CHARACTER SET UTF8, 
  IPREFERER VARCHAR(255) CHARACTER SET UTF8, 
  IPSESSION VARCHAR(200) CHARACTER SET UTF8, 
  IPCOUNTRY_CODE VARCHAR(10) CHARACTER SET UTF8, 
  IPWEBSITE_ID INTEGER)
RETURNS
 (OPNEWID INTEGER)
AS
DECLARE VARIABLE vDateTime TIMESTAMP;
BEGIN
  vDateTime = 'NOW';

  
  opNewID = GEN_ID(GEN_WS_WEB_LOG, 1);

  INSERT INTO WS_WEB_LOG(
    ID,
    LOG_DATE, 
    PLATFORM, 
    BROWSERVERSION, 
    ISCRAWLER, 
    REMOTEHOST, 
    METHOD, 
    PATH, 
    QUERY,
    REFERER,
    USER_SESSION,
    COUNTRY_CODE,
    WEBSITE_ID
  ) VALUES (
    :opNewID,
    :vDateTime, 
    :ipPLATFORM, 
    :ipBROWSERVERSION, 
    :ipISCRAWLER, 
    :ipREMOTEHOST, 
    :ipMETHOD, 
    :ipPATH, 
    :ipQUERY,
    :ipREFERER,
    :ipSESSION,
    :ipCOUNTRY_CODE,
    :ipWEBSITE_ID
  );
  SUSPEND;
END^

SET TERM ; ^ 

SET TERM ^ ;
ALTER PROCEDURE SP_WORKINGHOURS_CREATE (
    IPEMPLOYEE_ID Bigint,
    IPSTART_DATE Date,
    IPSTART_HOUR Double precision,
    IPFINISH_HOUR Double precision,
    IPREPEAT_OPTION Integer,
    IPREPEAT_NUMBER Integer )
RETURNS (
    OPID Integer )
AS
declare variable vLoopCounter INTEGER;
BEGIN
    vLoopCounter = 0;
    
    opID = GEN_ID(GEN_WS_APPT_OPTIONS_EX_ID, 1);
    while (exists (SELECT ID FROM WS_APPOINTMENT_OPTIONS_EX WHERE ID = :opID)) do
    BEGIN
        opid = gen_id(GEN_WS_APPT_OPTIONS_EX_ID, 1);
        vLoopCounter = vLoopCounter + 1;
        
        
        if (vLoopCounter > 2000) THEN
            break;
    end
    
INSERT INTO WS_APPOINTMENT_OPTIONS_EX 
(
    ID, 
    EMPLOYEE_ID, 
    START_DATE, 
    START_HOUR, 
    FINISH_HOUR, 
    REPEAT_OPTION, 
    REPEAT_NUMBER,
    ALLOW_TREATMENTS
)
 VALUES 
 (
    :opID, 
    :ipEMPLOYEE_ID, 
    :ipSTART_DATE, 
    :ipSTART_HOUR, 
    :ipFINISH_HOUR, 
    :ipREPEAT_OPTION, 
    :ipREPEAT_NUMBER,
    'Y'
);

SUSPEND;

END^
SET TERM ; ^

