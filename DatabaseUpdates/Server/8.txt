CREATE GENERATOR GEN_STOCK_CONTROL;
GRANT USAGE ON GENERATOR GEN_STOCK_CONTROL TO USER PUBLIC;

CREATE GENERATOR GEN_STOCK_AUDIT;
GRANT USAGE ON GENERATOR GEN_STOCK_AUDIT TO USER PUBLIC;


CREATE GENERATOR GEN_STOCK_OUT;
GRANT USAGE ON GENERATOR GEN_STOCK_OUT TO USER PUBLIC;

CREATE GENERATOR GEN_STOCK_IN;
GRANT USAGE ON GENERATOR GEN_STOCK_IN TO USER PUBLIC;

SET TERM ^ ;
ALTER PROCEDURE WSP_TICKET_MAINTENANCE
AS
DECLARE VARIABLE vHeaderID INTEGER;
  DECLARE VARIABLE vEmail VARCHAR(50);
  DECLARE VARIABLE vUser VARCHAR(50);
  DECLARE VARIABLE vSubject VARCHAR(100);
  DECLARE VARIABLE vMessage blob SUB_TYPE text;
  DECLARE VARIABLE vKey VARCHAR(10);
  DECLARE VARIABLE vID INTEGER; -- not used
  DECLARE VARIABLE vDepartment VARCHAR(25);
BEGIN
/*
  FOR 
    SELECT th.ID, th.CREATED_BY, th.CREATED_BY_EMAIL, td.DESCRIPTION, th.TICKET_KEY, th.SUBJECT
    FROM WS_TICKET_HEADER th
      INNER JOIN WS_TICKET_DEPARTMENT td ON (td.ID = th.DEPARTMENT)
    WHERE ((th.STATUS = 3)
      AND ((CURRENT_DATE -7) > CAST(th.LAST_UPDATED AS DATE)))
    INTO :vHeaderID, :vUser, :vEmail, :vDepartment, :vKey, :vSubject
  DO
  BEGIN
    -- insert record into ticket to say closed automatically
    INSERT INTO WS_TICKET_BODY (HEADER_ID, CONTENT, CREATE_DATE, USER_NAME)
    VALUES (:vHeaderID, 'Automatically closed as on Hold for 7 days', CURRENT_TIMESTAMP, 'Heaven - System');
    vMessage = vUser || '

Your ticket has been automatically closed as it has now been on hold for more than 7 days.

Ticket Information:
Ticket Key: ' || vKey || '
Subject: ' || vSubject || '
Department: ' || vDepartment || '

You can re-open, check the status or reply to this ticket online by visiting

http://www.heavenskincare.com/Helpdesk/Tickets/ShowTicket.aspx?TicketID=' || vKey || '&Email=' || vEmail || '

Please let us know if we can assist you any further,

Heaven Health & Beauty Ltd';
    EXECUTE PROCEDURE WSP_EMAIL_INSERT(vUser, vEmail, 'Heaven SysAdmin', 'noreply@heavenbydeborahmitchell.co.uk', '[' || vKey || '] - ' || vSubject, vMessage, 2) RETURNING_VALUES vID;
    -- update the header
    UPDATE WS_TICKET_HEADER a
    SET a.STATUS = 2
    WHERE a.ID = :vHeaderID;
  END
  
  */
END^
SET TERM ; ^



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_ROUTINE_MAINTENANCE
AS
DECLARE VARIABLE vName VARCHAR(40);
  DECLARE VARIABLE vSendEmail CHAR(1);
  DECLARE VARIABLE vEmailSent CHAR(1);
  DECLARE VARIABLE vSenderName VARCHAR(150);
  DECLARE VARIABLE vSenderEmail VARCHAR(250);
  DECLARE VARIABLE vEmail BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vEmail2 BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vEmailSubject VARCHAR(100);
  DECLARE VARIABLE vFirstName VARCHAR(100);
    
  DECLARE VARIABLE vUserEmail VARCHAR(100);
  DECLARE VARIABLE vUserName VARCHAR(100);
  DECLARE VARIABLE vUserGUUID VARCHAR(40);
  DECLARE VARIABLE vNewID BIGINT;
  DECLARE VARIABLE vSendTime TIMESTAMP;
    
  DECLARE VARIABLE vMessagesSent BIGINT;
    
  DECLARE VARIABLE vPRODUCTGROUP INTEGER;
    
  DECLARE VARIABLE vURL VARCHAR(500);
  DECLARE VARIABLE vCount integer;
BEGIN
  EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('WSP_ROUTINE_MAINTENANCE') RETURNING_VALUES :vCount;
  
  IF (vCount = 0) THEN
  BEGIN
    DELETE FROM WS_BANNED_IP a 
    WHERE a.DATE_BANNED < CURRENT_TIMESTAMP - 30;
    
    FOR
    SELECT a.ACTIVATE_PRODUCT_GROUP
    FROM WS_CAMPAIGNS a
	WHERE (a.CAMPAIGN_START < CURRENT_TIMESTAMP) AND (a.CAMPAIGN_FINISH > CURRENT_TIMESTAMP)
	INTO :vPRODUCTGROUP
	DO
	BEGIN
        IF ((vPRODUCTGROUP IS NOT NULL) AND 
            (NOT EXISTS(SELECT a.ID FROM WS_PRODUCT_GROUP a WHERE a.SHOW_ON_WEBSITE = 'Y' AND a.ID = :vPRODUCTGROUP))) THEN
        BEGIN
            IF (EXISTS(SELECT pg.ID FROM WS_PRODUCT_GROUP pg WHERE pg.ID = :vPRODUCTGROUP)) THEN
            BEGIN
                UPDATE WS_PRODUCT_GROUP
                SET SHOW_ON_WEBSITE = 'Y'
                WHERE ID = :vPRODUCTGROUP;
            END
        END
	
	END

    
    FOR
    SELECT a.ACTIVATE_PRODUCT_GROUP
    FROM WS_CAMPAIGNS a
	WHERE (a.CAMPAIGN_FINISH < CURRENT_TIMESTAMP) AND (a.ACTIVATE_PRODUCT_GROUP > -1)
	INTO :vPRODUCTGROUP
	DO
	BEGIN
        IF ((vPRODUCTGROUP IS NOT NULL) AND 
            (EXISTS(SELECT a.ID FROM WS_PRODUCT_GROUP a WHERE a.SHOW_ON_WEBSITE = 'Y' AND a.ID = :vPRODUCTGROUP))) THEN
        BEGIN
            IF (EXISTS(SELECT pg.ID FROM WS_PRODUCT_GROUP pg WHERE pg.ID = :vPRODUCTGROUP)) THEN
            BEGIN
                UPDATE WS_PRODUCT_GROUP
                SET SHOW_ON_WEBSITE = 'N'
                WHERE ID = :vPRODUCTGROUP;
            END
        END
	
	END


    
    vMessagesSent = 0;
    FOR
    SELECT a.CAMPAIGN_NAME, a.EMAIL_SEND, a.EMAIL_SENT, a.EMAIL_SENDER, a.EMAIL_ADDRESS, a.EMAIL_MESSAGE, a.EMAIL_SUBJECT
    FROM WS_CAMPAIGNS a
	WHERE (a.CAMPAIGN_START < CURRENT_TIMESTAMP) AND (a.CAMPAIGN_FINISH > CURRENT_TIMESTAMP)
	INTO :vName, :vSendEmail, :vEmailSent, :vSenderName, :vSenderEmail, :vEmail, :vEmailSubject
	DO
	BEGIN

	IF ((vSendEmail = 'Y') AND (vEmailSent = 'N')) THEN
	BEGIN
        SELECT a.NAME_VALUE
        FROM WS_DATA a
        WHERE a.NAME = 'SITE.URL'
        INTO :vURL;
        
        
        vEmail = REPLACE(vEmail, '{campaign}', vName);
        
        IF (vEMAIL CONTAINING('{site-url}')) THEN
            vEmail = REPLACE(vEmail, '{site-url}', vURL);
        
        IF (vEMAIL CONTAINING('{site-url-short}')) THEN
            vEmail = REPLACE(vEmail, '{site-url-short}', REPLACE(REPLACE(LOWER(vURL), 'https://', ''), 'http://', ''));
        
        FOR 
            SELECT a.EMAIL, a.NAME, a.NAME, a.USER_GUUID
            FROM WS_MAIL_SUBSCRIBERS a
            UNION ALL
            SELECT m.EMAIL, m.USERNAME, m.FIRSTNAME, m.USER_GUUID
            FROM WS_MEMBERS m
            WHERE (m.RECEIVE_EMAIL_SPECIAL_OFFERS = 'T')
              AND (m.EMAIL CONTAINING('@'))
              AND (UPPER(m.EMAIL) NOT CONTAINING('AOL.COM'))
        INTO :vUserEmail, :vUserName, :vFirstName, :vUserGUUID
        DO
        BEGIN 
            
            vNewID = GEN_ID(GEN_WS_EMAIL_ID, 1);
            
            vEmail2 = vEmail;
            
            IF (vEmail2 CONTAINING('{username')) THEN
                vEmail2 = REPLACE(vEmail2, '{username}', vFirstName);
            
            IF (vEmail2 CONTAINING('{UserGUUID}')) THEN
                vEmail2 = REPLACE(vEmail2, '{UserGUUID}', vUserGUUID);
    
            
            IF (MOD(vMessagesSent, 1000) = 0) THEN
            BEGIN
                vSendTime = vSendTime + (5.00000000/1440);
            END
    
            INSERT INTO WS_EMAIL(
                ID,
                TO_NAME, 
                TO_EMAIL, 
                FROM_NAME, 
                FROM_MAIL, 
                SUBJECT, 
                MAIL_MESSAGE, 
                PRIORITY, 
                QUEUE_DATE,
                SEND_DATE_TIME
            ) VALUES (
                :vNewID,
                :vUserName, 
                :vUserEmail, 
                :vSenderName,  
                :vSenderEmail, 
                :vEmailSubject, 
                :vEmail2, 
                2, 
                'NOW',
                :vSendTime
            );
            
            vMessagesSent = vMessagesSent + 1;
        END
        
        
        UPDATE WS_CAMPAIGNS SET EMAIL_SENT = 'Y' WHERE CAMPAIGN_NAME = :vName;
        END
	END
  END
  
  
  --remove old appointments
  DELETE
  FROM WS_APPOINTMENTS_CHANGES a
  WHERE a.APPOINTMENT_DATE < (SELECT CURRENT_TIMESTAMP - CAST(a.NAME_VALUE AS INTEGER)
                              FROM WS_DATA a
                              WHERE a.NAME = 'Max Appointment History');

  -- remove old web log data
  DELETE
  FROM WS_WEB_LOG a
  WHERE a.LOG_DATE < CURRENT_TIMESTAMP -365;  
  
END^

SET TERM ; ^ 

SET TERM ^ ;
ALTER PROCEDURE SPWS_APPT_WAIT_LONG_DEL (
    IPID BIGINT )
AS
BEGIN
  IF (NOT EXISTS(SELECT ID FROM WS_APPOINTMENT_WAIT_LIST_LONG WHERE ID = :ipID)) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Record does not exist in table WS_APPOINTMENT_WAIT_LIST_LONG';

  DELETE FROM WS_APPOINTMENT_WAIT_LIST_LONG
  WHERE ID = :ipID;
END^
SET TERM ; ^



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_IU
 (IPID BIGINT, 
  IPUSER_ID BIGINT, 
  IPSTAFF_ID BIGINT, 
  IPNOTES VARCHAR(8000) CHARACTER SET UTF8, 
  IPEXPIRES TIMESTAMP, 
  IPLAST_REVIEWED TIMESTAMP, 
  IPREVIEWED_BY BIGINT, 
  IPPREFERRED_DATE DATE, 
  IPPREFERRED_TIME DOUBLE PRECISION )
RETURNS
 (OPNEWID INTEGER)
AS
BEGIN
  IF (EXISTS(SELECT ID FROM WS_APPOINTMENT_WAIT_LIST_LONG WHERE ID = :ipID)) THEN
  BEGIN
    opNEWID = ipID;

    UPDATE WS_APPOINTMENT_WAIT_LIST_LONG
    SET USER_ID = :ipUSER_ID,
      STAFF_ID = :ipSTAFF_ID,
      NOTES = :ipNOTES,
      EXPIRES = :ipEXPIRES,
      LAST_REVIEWED = :ipLAST_REVIEWED,
      REVIEWED_BY = :ipREVIEWED_BY,
      PREFERRED_DATE = :ipPREFERRED_DATE,
      PREFERRED_TIME = :ipPREFERRED_TIME
    WHERE ID = :ipID;
  END ELSE BEGIN
    opNEWID = GEN_ID(GEN_APPT_WAIT_LIST_ID, 1);

    INSERT INTO WS_APPOINTMENT_WAIT_LIST_LONG (
      ID,
      USER_ID,
      STAFF_ID,
      NOTES,
      EXPIRES,
      LAST_REVIEWED,
      REVIEWED_BY,
      PREFERRED_DATE,
      PREFERRED_TIME
    ) VALUES (
      :opNEWID,
      :ipUSER_ID,
      :ipSTAFF_ID,
      :ipNOTES,
      :ipEXPIRES,
      :ipLAST_REVIEWED,
      :ipREVIEWED_BY,
      :ipPREFERRED_DATE,
      :ipPREFERRED_TIME
    );
  END

  SUSPEND;
END^

SET TERM ; ^ 


DROP PROCEDURE WSF_WS_INVOICE_INS_REPLICATION;



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_MAINTENANCE_ORDERS
AS
DECLARE VARIABLE vOrderID INTEGER;
  DECLARE VARIABLE vFirstName VARCHAR(50);
  DECLARE VARIABLE vFullName VARCHAR(100);
  DECLARE VARIABLE vEmail VARCHAR(100);
  DECLARE VARIABLE vMessage BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vNewID BIGINT;
BEGIN
  FOR 
    SELECT r.ID, m.FIRSTNAME, m.EMAIL, m.USERNAME
    FROM WS_INVOICE r
      INNER JOIN WS_MEMBERS m ON (m.ID = r.USERID)
    WHERE r.STATUS NOT IN (1, 6, 7, 8, 9, 11, 26)
      AND r.USER_SESSION IS NOT NULL
      AND r.REMOTE_HOST IS NOT NULL
      AND r.ID NOT IN (SELECT ORDER_ID FROM WS_INVOICE_ORDERS)
      AND r.NON_PAYMENT_REMINDER IS NULL
      AND r.PURCHASEDATE < CURRENT_TIMESTAMP -7
    INTO :vOrderID, :vFirstName, :vEmail, :vFullName
  DO
  BEGIN
    vMessage = 'Dear ' || vFirstName || ',' || '

You recently placed an order on our website but did not complete the
process by paying.

If you would like to continue with this order please follow the link
below and click "Pay Now"

http://www.heavenskincare.com/Members/Accounts/OrderViewItem.aspx?AccountsID=' || vOrderID || '

If you do not wish to complete this order then please disregard this email.

Heaven Health & Beauty Ltd';
    
    
    
    UPDATE WS_INVOICE
    SET NON_PAYMENT_REMINDER = CURRENT_TIMESTAMP
    WHERE ID = :vOrderID;
  END
  

  UPDATE WS_INVOICE r
  SET r.PROCESS_STATUS = 10, r.STATUS = 10
  WHERE r.STATUS NOT IN (1, 6, 7, 8, 9, 10, 11, 26)
    AND r.NON_PAYMENT_REMINDER < CURRENT_TIMESTAMP -7;
END^

SET TERM ; ^ 

DROP PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL9;

DROP PROCEDURE WSF_WS_INVOICE_INS9;

SET TERM ^ ;
ALTER PROCEDURE SPWS_APPT_WAIT_LONG_IU (
    IPID Bigint,
    IPUSER_ID Bigint,
    IPSTAFF_ID Bigint,
    IPNOTES Varchar(8000),
    IPEXPIRES Timestamp,
    IPLAST_REVIEWED Timestamp,
    IPREVIEWED_BY Bigint,
    IPPREFERRED_DATE Date,
    IPPREFERRED_TIME Double precision )
RETURNS (
    OPNEWID Bigint )
AS
BEGIN
  IF (EXISTS(SELECT ID FROM WS_APPOINTMENT_WAIT_LIST_LONG WHERE ID = :ipID)) THEN
  BEGIN
    opNEWID = ipID;

    UPDATE WS_APPOINTMENT_WAIT_LIST_LONG
    SET USER_ID = :ipUSER_ID,
      STAFF_ID = :ipSTAFF_ID,
      NOTES = :ipNOTES,
      EXPIRES = :ipEXPIRES,
      LAST_REVIEWED = :ipLAST_REVIEWED,
      REVIEWED_BY = :ipREVIEWED_BY,
      PREFERRED_DATE = :ipPREFERRED_DATE,
      PREFERRED_TIME = :ipPREFERRED_TIME
    WHERE ID = :ipID;
  END ELSE BEGIN
    opNEWID = GEN_ID(GEN_APPT_WAIT_LIST_ID, 1);

    INSERT INTO WS_APPOINTMENT_WAIT_LIST_LONG (
      ID,
      USER_ID,
      STAFF_ID,
      NOTES,
      EXPIRES,
      LAST_REVIEWED,
      REVIEWED_BY,
      PREFERRED_DATE,
      PREFERRED_TIME
    ) VALUES (
      :opNEWID,
      :ipUSER_ID,
      :ipSTAFF_ID,
      :ipNOTES,
      :ipEXPIRES,
      :ipLAST_REVIEWED,
      :ipREVIEWED_BY,
      :ipPREFERRED_DATE,
      :ipPREFERRED_TIME
    );
  END

  SUSPEND;
END^
SET TERM ; ^




DROP PROCEDURE WSP_REPLICATION_STATS_CORRECT;



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_CUSTOM_PAGES_IU
 (IPID BIGINT, 
  IPPAGE_DATA BLOB SUB_TYPE 1 , 
  IPDESCRIPTION VARCHAR(1000) CHARACTER SET UTF8, 
  IPWEBSITE_ID INTEGER, 
  IPCOUNTRY_ID INTEGER, 
  IPIS_ACTIVE CHAR(1) CHARACTER SET UTF8, 
  IPPAGE_TYPE INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  IF (ipPAGE_TYPE IS NULL) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Column ipPAGE_TYPE in Table WS_CUSTOM_PAGES can not be null';

  IF (EXISTS(SELECT ID FROM WS_CUSTOM_PAGES WHERE ID = :ipID)) THEN
  BEGIN
    opNEWID = ipID;

    UPDATE WS_CUSTOM_PAGES
    SET PAGE_DATA = :ipPAGE_DATA,
      DESCRIPTION = :ipDESCRIPTION,
      WEBSITE_ID = :ipWEBSITE_ID,
      COUNTRY_ID = :ipCOUNTRY_ID,
      IS_ACTIVE = :ipIS_ACTIVE,
      PAGE_TYPE = :ipPAGE_TYPE
    WHERE ID = :ipID;
  END ELSE BEGIN
    opNEWID = GEN_ID(GEN_CUSTOM_PAGES_ID, 1);

    INSERT INTO WS_CUSTOM_PAGES (
      ID,
      PAGE_DATA,
      DESCRIPTION,
      WEBSITE_ID,
      COUNTRY_ID,
      IS_ACTIVE,
      PAGE_TYPE
    ) VALUES (
      :opNEWID,
      :ipPAGE_DATA,
      :ipDESCRIPTION,
      :ipWEBSITE_ID,
      :ipCOUNTRY_ID,
      :ipIS_ACTIVE,
      :ipPAGE_TYPE
    );
  END

  SUSPEND;
END^

SET TERM ; ^ 

DROP DOMAIN DMN_WS_GRADE;

DROP GENERATOR GEN_GENERIC_ID;


CREATE GENERATOR GEN_STOCK_CONTROL_ID;

GRANT USAGE ON GENERATOR GEN_STOCK_CONTROL_ID TO USER PUBLIC;

SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_STOCK_CONTROL, 1) + 1
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_STOCK_CONTROL_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_HS_STOCKCONTROL_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_STOCK_CONTROL_ID, 1);
END^
SET TERM ; ^

DROP GENERATOR GEN_STOCK_CONTROL;



CREATE GENERATOR GEN_STOCK_IN_ID;

GRANT USAGE ON GENERATOR GEN_STOCK_IN_ID TO USER PUBLIC;


SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_STOCK_IN, 1) + 1
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_STOCK_IN_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_HS_STOCK_IN_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_STOCK_IN_ID, 1);
END^
SET TERM ; ^

DROP GENERATOR GEN_STOCK_IN;




CREATE GENERATOR GEN_STOCK_OUT_ID;

GRANT USAGE ON GENERATOR GEN_STOCK_OUT_ID TO USER PUBLIC;

SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_STOCK_OUT, 1) + 1
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_STOCK_OUT_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_HS_STOCK_OUT_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_STOCK_OUT_ID, 1);
END^
SET TERM ; ^

DROP GENERATOR GEN_STOCK_OUT;



CREATE GENERATOR GEN_STOCK_AUDIT_ID;

GRANT USAGE ON GENERATOR GEN_STOCK_AUDIT_ID TO USER PUBLIC;


SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_STOCK_AUDIT, 1) + 1
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_STOCK_AUDIT_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_HS_STOCK_AUDIT_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_STOCK_AUDIT_ID, 1);
END^
SET TERM ; ^

DROP GENERATOR GEN_STOCK_AUDIT;





CREATE GENERATOR GEN_PROD_TO_PROD_GROUP_ID;

GRANT USAGE ON GENERATOR GEN_PROD_TO_PROD_GROUP_ID TO USER PUBLIC;

SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_PROD_TO_PROD_GROUP, 1) + 1
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_PROD_TO_PROD_GROUP_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_PROD_TO_PROD_GRP_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_PROD_TO_PROD_GROUP_ID, 1);
END^
SET TERM ; ^


DROP GENERATOR GEN_PROD_TO_PROD_GROUP;


DROP PROCEDURE SP_IBLM$OPERATION_ARCHIVE;



DROP TRIGGER TR_WS_ORDERS_ID;
DROP TRIGGER TR_WS_ORDERS_USER;
DROP TRIGGER TR_WS_ORDERS_USER_AFTER;
DROP PROCEDURE WSP_ORDER_CREATE;
DROP PROCEDURE WSP_ORDER_CREATE_MANUAL;
DROP TABLE WS_ORDERS;
DROP GENERATOR GEN_WS_ORDER_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TICKET_BODY_ID FOR WS_TICKET_BODY ACTIVE BEFORE INSERT POSITION 0
 AS
BEGIN
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_TICKET_BODY, 1);
    
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    UPDATE WS_TICKET_HEADER SET last_replier = new.user_name, LAST_UPDATED = 'NOW' WHERE ID = new.header_ID;
  END
END^

SET TERM ; ^


DROP TRIGGER TR_REDIRECT_STATS_REMOVE_HACK;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INSERT_STOCK_STORE_TILL_ID FOR HS_STOCKCONTROL ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (NEW.STORE_ID IS NULL) THEN
    NEW.STORE_ID = 0;
    
  IF (NEW.TILL_ID IS NULL) THEN
    NEW.TILL_ID = 1;
END^

SET TERM ; ^

DROP TRIGGER TR_INSERT;


DROP TRIGGER TEMP_VALIDITY_CHECK;





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PRODUCTS_FREE FOR WS_PRODUCTS ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
    IF (NEW.FREE_PRODUCT IS NULL) THEN
        NEW.FREE_PRODUCT = 'N';
END^

SET TERM ; ^

DROP TRIGGER TR_RODUCTS_FREE;





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INVOICE_STATUS_CHANGED FOR WS_INVOICE_ORDERS ACTIVE BEFORE UPDATE POSITION 32000
 AS
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (OLD.PROCESS_STATUS <> NEW.PROCESS_STATUS) THEN
    BEGIN
      IF ((NEW.PROCESS_STATUS <> 10) AND (OLD.PROCESS_STATUS = 2) AND (OLD.DATE_SHIPPED IS NOT NULL)) THEN
        EXCEPTION EXC_INV_PROCESS_STATUS_CHANGE;

      UPDATE WS_INVOICE SET PROCESS_STATUS = NEW.PROCESS_STATUS WHERE ID = NEW.ORDER_ID;
    END
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_COST_NOTIFICATIONS_UPDATE FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE UPDATE POSITION 32000
 AS 
  DECLARE VARIABLE vStockItem VARCHAR(200);
  DECLARE VARIABLE vMailMessage BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vSubject VARCHAR(200);
  DECLARE VARIABLE vEmail VARCHAR(150);
BEGIN 
    
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN    
	IF (NEW.OUT_OF_STOCK = 'F' AND OLD.OUT_OF_STOCK = 'T') THEN
	BEGIN
        
        SELECT p.NAME || ' ' || pc.PRODUCT_SIZE
        FROM WS_PRODUCTS_COST_SIZE pc
            LEFT JOIN WS_PRODUCTS p ON (p.ID = pc.PRODUCT_ID)
        WHERE pc.ID = NEW.ID
        INTO :vStockItem;
	
        
        SELECT a.TEMPLATE, a.SUBJECT
        FROM WS_SYSTEM_EMAILS a
        WHERE a.ID = 13
        INTO :vMailMessage, :vSubject;
        
        
        vMailMessage = REPLACE(vMailMessage, '[STOCKITEM]', vStockItem);
        vMailMessage = REPLACE(vMailMessage, '[PRODUCTID]', NEW.PRODUCT_ID);
        vSubject = REPLACE(vSubject, '[STOCKITEM]', vStockItem);
        
        
        FOR
            SELECT a.USER_EMAIL
            FROM WS_PRODUCT_NOTIFICATIONS a
            WHERE a.PRODUCT_COST_ID = NEW.ID
            INTO :vEmail
        DO
        BEGIN
              INSERT INTO WS_EMAIL(
                ID,
                TO_NAME, 
                TO_EMAIL, 
                FROM_NAME, 
                FROM_MAIL, 
                SUBJECT, 
                MAIL_MESSAGE, 
                PRIORITY, 
                QUEUE_DATE,
                SEND_DATE_TIME    
              ) VALUES (
                GEN_ID(GEN_WS_EMAIL_ID, 1),
                :vEmail, 
                :vEmail, 
                'noreply@heavenskincare.com', 
                'noreply@heavenskincare.com', 
                :vSubject, 
                :vMailMessage, 
                1,
                CURRENT_TIMESTAMP, 
                CURRENT_TIMESTAMP
              );
        END
        
        
        DELETE 
        FROM WS_PRODUCT_NOTIFICATIONS
        WHERE PRODUCT_COST_ID = NEW.ID;
	END
  END
END^

SET TERM ; ^





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_INVOICE_ORDERS_DISPATCHED FOR WS_INVOICE_ORDERS ACTIVE BEFORE UPDATE POSITION 7
 AS 
  DECLARE VARIABLE opEmailID BIGINT;
  DECLARE VARIABLE vUserName VARCHAR(50);
  DECLARE VARIABLE vFullName VARCHAR(100);
  DECLARE VARIABLE vEmail VARCHAR(100);
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
      IF ((New.PROCESS_STATUS = 2) AND (NEW.PROCESS_STATUS <> OLD.PROCESS_STATUS)) THEN
      BEGIN
        NEW.PROCESS_STATUS = 2;
        New.DATE_SHIPPED = CURRENT_TIMESTAMP; 
        
        SELECT EMAIL, USERNAME, FIRSTNAME
        FROM WS_MEMBERS
        WHERE ID = NEW.USERID
        INTO :vEmail, :vFullName, :vUserName;
        
        EXECUTE PROCEDURE WSF_SYSYEM_EMAIL_CREATE(5, vFullName, vEmail, vUserName, vEmail, NULL, NULL, NULL, NULL, NEW.ORDER_ID);
      END
  END
END^

SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_INVOICE_SENDEMAIL INACTIVE
AFTER INSERT POSITION 30
AS 
  DECLARE VARIABLE vI INTEGER; 
  DECLARE VARIABLE vMsg BLOB SUB_TYPE TEXT;
  DECLARE VARIABLE vUserFirstName VARCHAR(50);
  DECLARE VARIABLE vEMail VARCHAR(100);
  DECLARE VARIABLE vUserName VARCHAR(100);
BEGIN 
    IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
    BEGIN
        IF ((NEW.ID > 0) AND (NEW.STATUS NOT IN (65, 67))) THEN
        BEGIN
            SELECT M.FIRSTNAME, M.EMAIL, M.USERNAME
            FROM WS_MEMBERS M
            WHERE (M.ID = NEW.USERID)
            INTO :vUserFirstName, :vEMail, vUserName;
        
            IF (vUSERNAME IS NOT NULL) THEN
            BEGIN
                IF (NEW.STATUS = 3) THEN
                BEGIN
                    EXECUTE PROCEDURE WSF_SYSYEM_EMAIL_CREATE(12, vUserName, vEmail, vUserFirstName, NULL, NULL, NULL, NULL, NULL, NEW.ID);
                END
                IF (NEW.STATUS = 4) THEN
                BEGIN
                    EXECUTE PROCEDURE WSF_SYSYEM_EMAIL_CREATE(11, vUserName, vEmail, vUserFirstName, NULL, NULL, NULL, NULL, NULL, NEW.ID);
                END
                IF (NEW.STATUS NOT IN (3, 4)) THEN
                BEGIN
                    EXECUTE PROCEDURE WSF_SYSYEM_EMAIL_CREATE(7, vUserName, vEmail, vUserFirstName, NULL, NULL, NULL, NULL, NULL, NEW.ID);
                END
            END
        END
    END
END^
SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CLIENTS_INSERT_EMAIL FOR WS_CLIENTS ACTIVE AFTER INSERT POSITION 100
 AS 
  declare variable vID BIGINT;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Liza Ward', 'liza.heavenskincare@gmail.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Louise Polak', 'louisepolak.heavenskincare@gmail.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Louise Ratcliff', 'louise.heavenskincare@gmail.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Emily Arnold', 'emily.heavenskincare@gmail.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Deborah Mitchell', 'deborah.heaven@gmail.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
	EXECUTE PROCEDURE WSP_EMAIL_INSERT('Sales', 'sales@heavenskincare.com','no-reply', 'noreply@heavenbydeborahmitchell.co.uk','New Client Signup', NEW.CONTACT_NAME || ' Has signed up as a trade client', 1) RETURNING_VALUES :vID;
  END
END^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TIMELINE_UPDATE_STATS FOR WS_TIMELINE_EVENTS ACTIVE BEFORE INSERT OR UPDATE POSITION 100
 AS 
  DECLARE VARIABLE vSales double precision;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
	-- update sales for the DATE
	IF (NEW.EVENT_SALES IS NULL OR new.EVENT_SALES = 0) THEN
	BEGIN
	
        SELECT sum(a.TOTALCOST)
        FROM WS_INVOICE_ORDERS a
            left join WS_MEMBERS m on (m.ID = a.USERID)
            left join WS_COUNTRIES c on (c.ID = m.COUNTRY)
        where c.ID = new.EVENT_COUNRY_ID and
            cast(a.PURCHASEDATE as date) = new.EVENT_DATE 
        INTO :vSales;
    
        new.EVENT_SALES = vSales;
    END
    
    IF (new.EVENT_SALES IS NULL) THEN
        new.EVENT_SALES = 0.00;
        
    if (new.EVENT_CIRCULATION IS NULL) THEN
        new.EVENT_CIRCULATION = 0;
  END
END^

SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_APPOINTMENT_UPDATES ACTIVE
AFTER INSERT OR UPDATE POSITION 10001
AS 
BEGIN 
    IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
    BEGIN
        INSERT INTO WS_APPOINTMENTS_CHANGES(ID, APPOINTMENT_DATE, START_TIME, DURATION, STATUS, APPOINTMENT_TYPE, USER_ID, EMPLOYEE_ID, TREATMENT_ID, NOTES, CREATE_DATE, LAST_ALTERED_DATE, LAST_ALTERED_USER)
        VALUES
        (NEW.ID, new.APPOINTMENT_DATE, new.START_TIME, new.DURATION, new.STATUS, new.APPOINTMENT_TYPE, new.USER_ID, new.EMPLOYEE_ID, new.TREATMENT_ID, new.NOTES, new.CREATE_DATE, new.LAST_ALTERED_DATE, new.LAST_ALTERED_USER);
    END
END^
SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_CLIENT_ACTIONS_AFTER_TAKE_ON ACTIVE
AFTER UPDATE POSITION 0
AS 
  DECLARE VARIABLE vEmail VARCHAR(255);
  DECLARE VARIABLE vStaffName VARCHAR(100);
  DECLARE VARIABLE vStaffID BIGINT;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (new.CLIENT_ACTION = 4) THEN
    BEGIN
      IF (new.DATE_ACTIONED IS NOT NULL) THEN
      BEGIN
          SELECT EMAIL 
          FROM WS_CLIENTS
          WHERE ID = NEW.CLIENT_ID
          INTO :vEmail;
          
          EXECUTE PROCEDURE SP_CLIENT_ACTION_CREATE(101, new.CLIENT_ID) RETURNING_VALUES :vStaffID, :vStaffName;
          
          IF (EXISTS(SELECT ID FROM WS_MEMBERS WHERE UPPER(EMAIL) = UPPER(:vEmail))) THEN
          BEGIN
            INSERT INTO WS_CLIENT_ACTIONS (CLIENT_ACTION, CLIENT_ID, EXPIRES, EXPECTED_BY, USER_ID)
            VALUES (101, NEW.CLIENT_ID, CURRENT_TIMESTAMP +10, :vStaffName, :vStaffID);
            
            EXECUTE PROCEDURE SP_CLIENT_ACTION_CREATE(102, new.CLIENT_ID) RETURNING_VALUES :vStaffID, :vStaffName;
            
            INSERT INTO WS_CLIENT_ACTIONS (CLIENT_ACTION, CLIENT_ID, EXPIRES, EXPECTED_BY, USER_ID)
            VALUES (102, NEW.CLIENT_ID, CURRENT_TIMESTAMP +10, :vStaffName, :vStaffID);
          END ELSE
          BEGIN
            INSERT INTO WS_CLIENT_ACTIONS (CLIENT_ACTION, CLIENT_ID, EXPIRES, EXPECTED_BY, USER_ID)
            VALUES (101, NEW.CLIENT_ID, CURRENT_TIMESTAMP +10, :vStaffName, :vStaffID);
          END
      END
    END
  END
END^
SET TERM ; ^


