CREATE GENERATOR GEN_STOCK_IN;
GRANT USAGE ON GENERATOR GEN_STOCK_IN TO USER PUBLIC;

ALTER TABLE WS_ANNOUNCEMENTS DROP CONSTRAINT INTEG_462;

ALTER TABLE WS_ANNOUNCEMENTS ALTER ID TYPE BigInt;

alter table WS_ANNOUNCEMENTS
add constraint PK_WS_ANNOUNCEMENTS_ID
primary key (ID);

alter table WS_ANNOUNCEMENTS
add constraint UNQ_WS_ANNOUNCEMENTS_ID_GROUP
unique (ID, GROUP_ID);

SET TERM ^ ;
ALTER TRIGGER TR_ANNOUNCEMENT_GROUPS_ID ACTIVE
BEFORE INSERT POSITION 0
as
begin
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    new.id = gen_id(ws_announcement_groups_id, 1);
end^
SET TERM ; ^


ALTER TABLE HWZ_POSTCODES DROP CONSTRAINT INTEG_461;

alter table HWZ_POSTCODES
add constraint PK_HWZ_POSTCODES_OUTCODE
primary key (OUTCODE);



ALTER TABLE WS_CAMPAIGN_STATS DROP CONSTRAINT FK_WS_CAMPAIGN_STATS_ID;

ALTER TABLE WS_CAMPAIGN_STATS ADD CONSTRAINT FK_WS_CAMPAIGN_STATS_ID FOREIGN KEY (ID)
  REFERENCES WS_CAMPAIGNS (ID) ON UPDATE CASCADE ON DELETE CASCADE;





SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CAMP_COUNTRIES_ID FOR WS_CAMPAIGNS_COUNTRIES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_CAMP_COUNTRY_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_MEMBER_PERMISSIONS FOR WS_MEMBERS ACTIVE BEFORE UPDATE POSITION 0
 AS 
BEGIN 
    IF (New.MEMBER_LEVEL <> Old.MEMBER_LEVEL) THEN
    BEGIN
        IF (NEW.MEMBER_LEVEL > 4) THEN
        BEGIN
          IF (NOT EXISTS(SELECT USER_ID FROM WS_PERMISSIONS WHERE USER_ID = old.ID)) THEN
          BEGIN
              INSERT INTO WS_PERMISSIONS (USER_ID, PERMISSIONS_CALENDAR, PERMISSIONS_POS, PERMISSIONS_WEBSITE, PERMISSIONS_INVOICING, PERMISSIONS_REPORTS, PERMISSIONS_STOCK, PERMISSIONS_STAFF)
              VALUES (old.ID, 0, 0, 0, 0, 0, 0, 0);
          END
        END
        
        IF (NEW.MEMBER_LEVEL < 5) THEN
        BEGIN
          DELETE FROM WS_PERMISSIONS WHERE USER_ID = New.ID;
        END
    END
END^

SET TERM ; ^



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_COST_SIZE_TYYPE FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE INSERT POSITION 1
 AS 
 DECLARE VARIABLE vNewID INTEGER;
BEGIN 
    IF (new.PRODUCT_TYPE IS NULL) THEN
    BEGIN
        SELECT FIRST 1 a.ID
        FROM WS_PRODUCT_COST_TYPE a
        INTO :vNewID;
    
        new.PRODUCT_TYPE = :vNewID;
    END
END^

SET TERM ; ^


CREATE GENERATOR GEN_TREAT_TO_THER_ID;

DROP TRIGGER TR_TREAT_TO_THER_UPDATE_ID;

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_TREAT_TO_THERE_ID FOR WS_TREATMENT_TO_THERAPIST ACTIVE
BEFORE INSERT OR UPDATE POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_TREAT_TO_THER_ID, 1);
END^
SET TERM ; ^



CREATE GENERATOR GEN_COUP_REQUIRED_ID;

SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_COUPON_REQUIRED_ID FOR WS_COUPON_REQUIRED_PRODUCTS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN
    IF (NEW.ID < 0 OR NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_COUP_REQUIRED_ID, 1); 
END^

SET TERM ; ^


DROP TRIGGER TR_WS_PRODUCT_GROUP_ID;

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_PRODUCT_GROUP_ID FOR WS_PRODUCT_GROUP ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
    NEW.ID = GEN_ID(GEN_WS_PRODUCT_GROUP_ID, 1);
END^
SET TERM ; ^


DROP TRIGGER TR_WS_PRODUCT_GROUP_ID;

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_PRODUCT_GROUP_ID FOR WS_PRODUCT_GROUP ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
    NEW.ID = GEN_ID(GEN_WS_PRODUCT_GROUP_ID, 1);
END^
SET TERM ; ^

CREATE GENERATOR GEN_DELETED_SKU_ID;

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_COST_SIZE_SOFT_DELETE_CHECK FOR WS_PRODUCTS_COST_SIZE ACTIVE
BEFORE UPDATE POSITION 0
AS 
  DECLARE VARIABLE vCount BIGINT;
BEGIN 
    IF (NEW.IS_DELETED = 'Y' AND OLD.IS_DELETED = 'N') THEN
    BEGIN
        SELECT SUM(a.TOTAL_AVAILABLE)
        FROM HS_STOCKCONTROL a
        WHERE a.ITEM_ID = NEW.ID
        INTO :vCount;
        
        IF (vCount > 0) THEN
        BEGIN
            EXCEPTION EXC_PROD_ITEM_DELETE 'Can not delete as stock exists';
        END
        
        NEW.SKU = 'DE' || GEN_ID(GEN_DELETED_SKU_ID, 1);
    END
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_WS_MAIL_SUBSCRIBERS_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_MAIL_SUBSCRIBERS_ID, 1); 

    IF (NEW.USER_GUUID IS NULL) THEN
        NEW.USER_GUUID = UUID_TO_CHAR(GEN_UUID());
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_POS_BARCODE_LOGIN ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    new.ID = gen_id(GEN_POS_BARCODE_ID, 1);
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_ENFORCE_STOCK_LEVELS ACTIVE
BEFORE UPDATE POSITION 0
AS 
DECLARE VARIABLE vEnforce WS_BOOL;
BEGIN 
    IF (new.TOTAL_AVAILABLE < 0) THEN
    BEGIN
        SELECT hs.ENFORCE_STOCK_LEVELS
        FROM HEAVEN_STORES hs
        WHERE hs.ID = new.STORE_ID
        INTO :vEnforce;
        
        IF (vEnforce = 'Y') THEN
            EXCEPTION EXC_STOCK_LEVEL_INVALID 'Stock Level Can not be less than zero Product ' || new.ITEM_ID;
    END
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_HS_STOCK_IN_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_STOCK_IN, 1);
END^
SET TERM ; ^

