CREATE GENERATOR GEN_PROD_TO_PROD_GROUP;

GRANT USAGE ON GENERATOR GEN_PROD_TO_PROD_GROUP TO USER PUBLIC;

DROP TRIGGER WS_APPT_OPTIONS_EX_BI;

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_WS_APPT_OPTIONS_EX_ID FOR WS_APPOINTMENT_OPTIONS_EX ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
    NEW.ID = GEN_ID(GEN_WS_APPT_OPTIONS_EX_ID, 1);
END^
SET TERM ; ^

DROP TRIGGER WS_APPOINTMENTS_CHANGES_BI;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_WS_APPOINTMENTS_CHANGES_ID FOR WS_APPOINTMENTS_CHANGES ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.PK_ID IS NULL) OR (NEW.PK_ID < 0)) THEN
    NEW.PK_ID = GEN_ID(GEN_WS_APPT_CHANGES, 1);
END^
SET TERM ; ^

DROP TRIGGER WS_COUPONS_BI;


SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_WS_COUPONS_ID FOR WS_COUPONS ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
    NEW.ID = GEN_ID(GEN_WS_COUPONS_ID, 1);
END^
SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_WS_PRODUCT_COST_SIZE_NEW ACTIVE
AFTER INSERT POSITION 29999
AS 
  DECLARE VARIABLE vID BIGINT;
  DECLARE VARIABLE vStore INTEGER;
BEGIN 
  vID = NEW.ID;
  
  FOR
    SELECT ID
    FROM HEAVEN_STORES
    INTO :vStore
  DO
  BEGIN
    INSERT INTO HS_STOCKCONTROL (STORE_ID, TILL_ID, ITEM_ID, TOTAL_AVAILABLE, MIN_STOCK_LEVEL, RE_ORDER_QUANTITY)
    VALUES(:vStore, 1, :vID, 0, 3, 5);
  END
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_WS_MEMBERS_ADDRESSES_ID ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (New.ID IS NULL OR NEW.ID < 0) THEN
  BEGIN
    NEW.ID = GEN_ID(GEN_WS_MEMBERS_ADDRESSES_ID, 1);
  END
END^
SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_EMAIL_ID FOR WS_EMAIL ACTIVE BEFORE INSERT POSITION 0
 AS
BEGIN
    IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_WS_EMAIL_ID, 1);
END^

SET TERM ; ^

CREATE GENERATOR GEN_TREAT_TO_TREAT_GRP_ID;

GRANT USAGE ON GENERATOR GEN_TREAT_TO_TREAT_GRP_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TREAT_TO_TREAT_GRP_ID FOR WS_TREAT_TO_TREAT_GROUP ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_TREAT_TO_TREAT_GRP_ID, 1);
END^

SET TERM ; ^

UPDATE WS_TREAT_TO_TREAT_GROUP a
SET a.ID = GEN_ID(GEN_TREAT_TO_TREAT_GRP_ID, 1);



CREATE GENERATOR GEN_COMM_PAYMENTS_ID;

GRANT USAGE ON GENERATOR GEN_COMM_PAYMENTS_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_COMM_PAYMENTS_ID FOR STAFF_COMMISSION_PAYMENTS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_COMM_PAYMENTS_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_WS_SALONS_TO_MMBERS_ID;

GRANT USAGE ON GENERATOR GEN_WS_SALONS_TO_MMBERS_ID TO USER PUBLIC;

SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_SALONS_TO_MEMBERS_ID FOR WS_SALONS_TO_MEMBERS ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_WS_SALONS_TO_MMBERS_ID, 1);
END^

SET TERM ; ^


UPDATE WS_SALONS_TO_MEMBERS a
SET a.ID = GEN_ID(GEN_WS_SALONS_TO_MMBERS_ID, 1);


CREATE GENERATOR GEN_WS_PROD_NOTIFY_ID;

GRANT USAGE ON GENERATOR GEN_WS_PROD_NOTIFY_ID TO USER PUBLIC;



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PRODUCT_NOTIFICATION_ID FOR WS_PRODUCT_NOTIFICATIONS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
  IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
    NEW.ID = GEN_ID(GEN_WS_PROD_NOTIFY_ID, 1);
END^

SET TERM ; ^

SET TERM ^ ;
ALTER TRIGGER TR_PROD_TO_PROD_GRP_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
    NEW.ID = GEN_ID(GEN_PROD_TO_PROD_GROUP, 1);
END^
SET TERM ; ^


SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT  COALESCE(MAX(a.ID) + 1, 1)
  FROM WS_PRODUCT_NOTIFICATIONS a
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_WS_PROD_NOTIFY_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_COST_SIZE_TYYPE FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE INSERT POSITION 1
AS 
 DECLARE VARIABLE vNewID INTEGER;
BEGIN 
    IF (new.PRODUCT_TYPE IS NULL) THEN
    BEGIN
        SELECT FIRST 1 a.ID
        FROM WS_PRODUCT_COST_TYPE a
        INTO :vNewID;
    
        new.PRODUCT_TYPE = :vNewID;
    END
END^

SET TERM ; ^



CREATE GENERATOR GEN_PAY_TO_PAY_POOL_ID;

GRANT USAGE ON GENERATOR GEN_PAY_TO_PAY_POOL_ID TO USER PUBLIC;



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PAY_PAY_POOL_ID FOR PAYMENT_TO_POOL_TYPE ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_PAY_TO_PAY_POOL_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_MEMBER_PERMISSIONS ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (New.MEMBER_LEVEL <> Old.MEMBER_LEVEL) THEN
    BEGIN
        IF (NEW.MEMBER_LEVEL > 4) THEN
        BEGIN
          IF (NOT EXISTS(SELECT USER_ID FROM WS_PERMISSIONS WHERE USER_ID = old.ID)) THEN
          BEGIN
              INSERT INTO WS_PERMISSIONS (USER_ID, PERMISSIONS_CALENDAR, PERMISSIONS_POS, PERMISSIONS_WEBSITE, PERMISSIONS_INVOICING, PERMISSIONS_REPORTS, PERMISSIONS_STOCK, PERMISSIONS_STAFF)
              VALUES (old.ID, 0, 0, 0, 0, 0, 0, 0);
          END
        END
        
        IF (NEW.MEMBER_LEVEL < 5) THEN
        BEGIN
          DELETE FROM WS_PERMISSIONS WHERE USER_ID = New.ID;
        END
    END
END^
SET TERM ; ^

CREATE GENERATOR GEN_LOCAL_ORDER_ID;

GRANT USAGE ON GENERATOR GEN_LOCAL_ORDER_ID TO USER PUBLIC;



SET TERM ^ ;

EXECUTE BLOCK
AS
  DECLARE VARIABLE vNEWID BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(1000);
BEGIN
  SELECT GEN_ID(GEN_INVOINCE_FINAL_ID, 0)
  FROM RDB$DATABASE
  INTO :vNewID;
  
  EXECUTE STATEMENT 'SET GENERATOR GEN_LOCAL_ORDER_ID TO ' || vNEWID ||';';
END ^

SET TERM ; ^

SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_ORDER_SET_LOCAL_ID FOR WS_INVOICE ACTIVE
BEFORE INSERT POSITION 10
AS 
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (NEW.LOCAL_ORDER_ID IS NULL) THEN
        NEW.LOCAL_ORDER_ID = GEN_ID(GEN_LOCAL_ORDER_ID, 1);
  END
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER TR_INVOICE_IF_NULL_ID ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (new.ID IS NULL OR NEW.ID < 0) THEN
      new.ID = GEN_ID(GEN_INVOICE_ID, 1);
END^
SET TERM ; ^



CREATE GENERATOR GEN_COMMISSION_POOL_ID;


GRANT USAGE ON GENERATOR GEN_COMMISSION_POOL_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_COMMISSION_POOL_ID FOR COMMISSION_POOLS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_COMMISSION_POOL_ID, 1);
END^

SET TERM ; ^



UPDATE COMMISSION_POOLS a
SET a.ID = GEN_ID(GEN_COMMISSION_POOL_ID, 1);




SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_CLIENT_ACTIONS_CLOSED FOR WS_CLIENT_ACTIONS ACTIVE
    AFTER UPDATE POSITION 0
AS 
  DECLARE VARIABLE vStaffName VARCHAR(100);
  DECLARE VARIABLE vStaffID BIGINT;
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF ((OLD.CLIENT_ACTION IN (1, 2)) AND (NEW.DATE_ACTIONED IS NOT NULL)) THEN
    BEGIN
        EXECUTE PROCEDURE SP_CLIENT_ACTION_CREATE(OLD.CLIENT_ACTION, OLD.CLIENT_ID) RETURNING_VALUES :vStaffID, :vStaffName;
        
        INSERT INTO WS_CLIENT_ACTIONS(CLIENT_ACTION, CLIENT_ID, EXPIRES, USER_ID, EXPECTED_BY)
        VALUES (OLD.CLIENT_ACTION, OLD.CLIENT_ID, CURRENT_TIMESTAMP + 40, :vStaffID, :vStaffName);
    END
  END
END^
SET TERM ; ^




CREATE GENERATOR GEN_WAIT_LIST_TO_TRT_ID;


GRANT USAGE ON GENERATOR GEN_WAIT_LIST_TO_TRT_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_APPT_WAIT_LIST_TO_TREAT_ID FOR WS_WAIT_LIST_LONG_TO_TREAT ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_WAIT_LIST_TO_TRT_ID, 1);
END^

SET TERM ; ^




CREATE GENERATOR GEN_STAFF_SICK_ID;


GRANT USAGE ON GENERATOR GEN_STAFF_SICK_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_SICK_RECORDS_ID FOR STAFF_SICK_RECORDS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_STAFF_SICK_ID, 1);
END^

SET TERM ; ^



CREATE GENERATOR GEN_STAFF_REPORTING_ID;


GRANT USAGE ON GENERATOR GEN_STAFF_REPORTING_ID TO USER PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_REPORTING_ID FOR STAFF_REPORTING ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_STAFF_REPORTING_ID, 1);
END^

SET TERM ; ^



UPDATE STAFF_REPORTING a
SET a.ID = GEN_ID(GEN_STAFF_REPORTING_ID, 1);




CREATE GENERATOR GEN_STAFF_LEAVE_ID;

GRANT USAGE ON GENERATOR GEN_STAFF_LEAVE_ID TO USER PUBLIC;



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_LEAVE_ID FOR STAFF_LEAVE ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_STAFF_LEAVE_ID, 1);
END^

SET TERM ; ^


UPDATE STAFF_LEAVE a
SET a.ID = GEN_ID(GEN_STAFF_LEAVE_ID, 1);




CREATE GENERATOR GEN_CLIENT_TO_STAFF_ID;


GRANT USAGE ON GENERATOR GEN_CLIENT_TO_STAFF_ID TO USER PUBLIC;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CLIENT_TO_STAFF_ID FOR CLIENT_TO_STAFF ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF ((NEW.ID < 0) OR (NEW.ID IS NULL)) THEN
        NEW.ID = GEN_ID(GEN_CLIENT_TO_STAFF_ID, 1);
END^

SET TERM ; ^



UPDATE CLIENT_TO_STAFF a
SET a.ID = GEN_ID(GEN_CLIENT_TO_STAFF_ID, 1);




CREATE GENERATOR GEN_UPDATE_DATA_ID;



GRANT USAGE ON GENERATOR GEN_UPDATE_DATA_ID TO USER PUBLIC;



SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_AUTO_UPDATE_DATA_ID FOR AUTO_UPDATE_DATA ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL OR NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_UPDATE_DATA_ID, 1);
END^

SET TERM ; ^


UPDATE AUTO_UPDATE_DATA a
SET a.ID = GEN_ID(GEN_UPDATE_DATA_ID, 1);




CREATE GENERATOR GEN_APPT_WAIT_LIST_ID;



GRANT USAGE ON GENERATOR GEN_APPT_WAIT_LIST_ID TO USER PUBLIC;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_APPT_WAIT_LIST_LONG FOR WS_APPOINTMENT_WAIT_LIST_LONG ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_APPT_WAIT_LIST_ID, 1);
END^

SET TERM ; ^


UPDATE WS_APPOINTMENT_WAIT_LIST_LONG a
SET a.ID = GEN_ID(GEN_APPT_WAIT_LIST_ID, 1);


DROP PROCEDURE REPLICATION_HS_STOCKCONTROL;
DROP PROCEDURE REPLICATION_HS_STOCK_IN;
DROP PROCEDURE REPLICATION_HS_STOCK_OUT;
DROP PROCEDURE REPLICATION_PRODUCT_COST_INSERT;
DROP PROCEDURE REPLICATION_PRODUCT_INSERT;
DROP PROCEDURE REPLICATION_EMAIL_INSERT;

DROP PROCEDURE WSF_WS_INVOICE_INS_REPLICATION;
CREATE GENERATOR GEN_WAIT_LIST_TO_TREAT_ID;

GRANT USAGE ON GENERATOR GEN_WAIT_LIST_TO_TREAT_ID TO USER PUBLIC;

SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWAIT_LIST_LONG_TO_TREAT_INS
 (IPWAIT_LIST_ID BIGINT, 
  IPTREATMENT_ID INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  opNEWID = GEN_ID(GEN_WAIT_LIST_TO_TREAT_ID, 1);

  INSERT INTO WS_WAIT_LIST_LONG_TO_TREAT (
    ID,
    WAIT_LIST_ID,
    TREATMENT_ID
  ) VALUES (
    :opNEWID,
    :ipWAIT_LIST_ID,
    :ipTREATMENT_ID
  );

  SUSPEND;
END^

SET TERM ; ^ 



SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_APPT_WAIT_LIST_TO_TREAT_ID FOR WS_WAIT_LIST_LONG_TO_TREAT ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF ((NEW.ID IS NULL) OR (NEW.ID < 0)) THEN
        NEW.ID = GEN_ID(GEN_WAIT_LIST_TO_TREAT_ID, 1);
END^
SET TERM ; ^

DROP GENERATOR GEN_WAIT_LIST_TO_TRT_ID;



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_INVOICEORDERS_PAGE
 (IPPAGESIZE BIGINT, 
  IPPAGENUMBER BIGINT, 
  IPWHERECLAUSE VARCHAR(1000) CHARACTER SET UTF8)
RETURNS
 (OPINVOICEID BIGINT)
AS
DECLARE VARIABLE vPAGENO BIGINT;
  DECLARE VARIABLE vCOUNTER BIGINT;
  DECLARE VARIABLE vSQL VARCHAR(5000);
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_NUM;

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_SIZE;

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;
  vSQL = 'SELECT a.ID FROM WS_INVOICE_ORDERS a ' || :IPWHERECLAUSE || ' ORDER BY a.PURCHASEDATE DESC';
  
  FOR EXECUTE STATEMENT vSQL
  INTO :OPINVOICEID
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
  END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_MEMBERS_DEL
 (IPID BIGINT)
AS
BEGIN
  /* verify record exists */
  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_MEMBERS_DELETE_FAILED;

  DELETE FROM WS_MEMBERS
  WHERE ID = :ipID;
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_INVOICE_NOTES_IU
 (IPID INTEGER, 
  IPNOTES BLOB SUB_TYPE 1 )
AS
  DECLARE VARIABLE vNewID BIGINT;
BEGIN
  IF (NOT EXISTS(SELECT ID FROM WS_INVOICE_NOTES WHERE ID = :ipID)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_INVOICE_NOTES'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :ipID
    INTO :vNewID;
    
    IF (vNewID IS NOT NULL) THEN
        ipID = vNewID;
  END

  IF (EXISTS(SELECT ID FROM WS_INVOICE_NOTES WHERE ID = :ipID)) THEN
  BEGIN
    UPDATE WS_INVOICE_NOTES
    SET NOTES = :ipNOTES
    WHERE ID = :ipID;
  END ELSE BEGIN
    INSERT INTO WS_INVOICE_NOTES (
      ID,
      NOTES
    ) VALUES (
      :ipID,
      :ipNOTES
    );
  END
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWAIT_LIST_LONG_TO_TREAT_IU
 (IPID BIGINT, 
  IPWAIT_LIST_ID BIGINT, 
  IPTREATMENT_ID INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  IF (EXISTS(SELECT ID FROM WS_WAIT_LIST_LONG_TO_TREAT WHERE ID = :ipID)) THEN
  BEGIN
    opNEWID = ipID;

    UPDATE WS_WAIT_LIST_LONG_TO_TREAT
    SET WAIT_LIST_ID = :ipWAIT_LIST_ID,
      TREATMENT_ID = :ipTREATMENT_ID
    WHERE ID = :ipID;
  END ELSE BEGIN
    opNEWID = GEN_ID(GEN_WAIT_LIST_TO_TREAT_ID, 1);

    INSERT INTO WS_WAIT_LIST_LONG_TO_TREAT (
      ID,
      WAIT_LIST_ID,
      TREATMENT_ID
    ) VALUES (
      :opNEWID,
      :ipWAIT_LIST_ID,
      :ipTREATMENT_ID
    );
  END

  SUSPEND;
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPAUTO_UPDATE_DATA_INS
 (IPNAME VARCHAR(100) CHARACTER SET UTF8, 
  IPEXECUTE_SQL VARCHAR(8100) CHARACTER SET UTF8, 
  IPEXEUTE_RUN_TIME TIMESTAMP, 
  IPEXECUTE_COMPLETE CHAR(1) CHARACTER SET UTF8, 
  IPCREATED_BY BIGINT, 
  IPCREATED_DATE TIMESTAMP)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  opNEWID = GEN_ID(GEN_UPDATE_DATA_ID, 1);

  INSERT INTO AUTO_UPDATE_DATA (
    ID,
    NAME,
    EXECUTE_SQL,
    EXEUTE_RUN_TIME,
    EXECUTE_COMPLETE,
    CREATED_BY,
    CREATED_DATE
  ) VALUES (
    :opNEWID,
    :ipNAME,
    :ipEXECUTE_SQL,
    :ipEXEUTE_RUN_TIME,
    :ipEXECUTE_COMPLETE,
    :ipCREATED_BY,
    :ipCREATED_DATE
  );

  SUSPEND;
END^

SET TERM ; ^ 



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_EMAIL_INSERT
 (IPTO_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPTO_EMAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPFROM_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPFROM_MAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPSUBJECT VARCHAR(600) CHARACTER SET UTF8, 
  IPMESSAGE BLOB SUB_TYPE 1 , 
  IPPRIORITY INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
DECLARE VARIABLE vMSG BLOB SUB_TYPE TEXT;
DECLARE VARIABLE vCount BIGINT;
BEGIN
  opNEWID = -1;
  
  -- ignore, client side problem
  IF (ipMESSAGE CONTAINING 'System.Web.UI.ViewStateException: Invalid viewstate') THEN
    EXIT;
      
  IF (LOWER(ipSUBJECT) = 'pos application replication error') THEN
  BEGIN
    SELECT COUNT(ID)
    FROM WS_EMAIL
    WHERE SUBJECT = 'POS Application Replication Error'
    INTO :vCount;
    
    IF (vCount > 5) THEN
      EXIT;
  END
    
  -- not a valid email then exit  
  IF (NOT (IPTO_EMAIL CONTAINING '@')) THEN
    EXIT;
    
  /* Get next ID */
  opNewID = GEN_ID(GEN_WS_EMAIL_ID, 1);

  IF (ipTO_NAME IS NULL) THEN
    EXCEPTION EXC_609003195;

  IF (ipTO_EMAIL IS NULL) THEN
    EXCEPTION EXC_609003296;

  IF (ipFROM_NAME IS NULL) THEN
    EXCEPTION EXC_609003401;

  IF (ipFROM_MAIL IS NULL) THEN
    EXCEPTION EXC_609003403;

  IF (ipSUBJECT IS NULL) THEN
    EXCEPTION EXC_609003176;

  IF (ipMESSAGE IS NULL) THEN
    EXCEPTION EXC_609003165;

  IF (ipPRIORITY IS NULL) THEN
    ipPRIORITY =  2;

  vMSG = '<HTML><HEAD><LINK href="http://www.heavenbydeborahmitchell.co.uk/Styles/Popup.css" type="text/css" rel="stylesheet"></HEAD>';
  vMSG = VMSG || '<body bgColor="#ffffff">';
  vMSG = VMSG || '<TABLE cellSpacing="0" cellPadding="0" width="100%" border="0" height="100%"><TR>';
  vMSG = VMSG || '<TD class="PageBorderTopLeftCorner" vAlign="top" align="left" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTop" vAlign="top" align="left" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTopRightCorner" vAlign="top" align="right" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '</TR><TR><TD class="PageBorderLeft" vAlign="top" align="left" height="25"></TD>';
  vMSG = VMSG || '<TD class="TextBodySubHeader" vAlign="middle" align="left" height="25">';
  vMSG = VMSG || '<img src="http://www.heavenbydeborahmitchell.co.uk/Images/popuplogo.jpg" border=0 align=left><span class="TextBodySubHeader"><b>';
  vMSG = VMSG || ipSUBJECT || '</b></span><br><hr>';
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right" height="25"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderLeft" vAlign="top" align="left">&nbsp;</TD><TD class="TextBodySmall">';
  vMSG = VMSG || '<br><br>' || ipMESSAGE;
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderBottomLeftCorner" vAlign="top" align="left" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottom" vAlign="bottom" align="left">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottomRightCorner" vAlign="bottom" align="right" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '</TR></TABLE></body></HTML>';



  INSERT INTO WS_EMAIL(
    ID,
    TO_NAME, 
    TO_EMAIL, 
    FROM_NAME, 
    FROM_MAIL, 
    SUBJECT, 
    MAIL_MESSAGE, 
    PRIORITY, 
    QUEUE_DATE
  ) VALUES (
    :opNewID,
    :ipTO_NAME, 
    :ipTO_EMAIL, 
    :ipFROM_NAME, 
    :ipFROM_MAIL, 
    :ipSUBJECT, 
    :vMSG, 
    :ipPRIORITY, 
    'NOW'
  );
  SUSPEND;
END^

SET TERM ; ^ 

SET TERM ^ ;
ALTER PROCEDURE WSP_WS_SALON_UPDATES_DEL (
    IPUSERID Integer,
    IPSALONID Integer )
AS
DECLARE VARIABLE vUserFirstName VARCHAR(100);
 DECLARE VARIABLE vEMail VARCHAR(100);
 DECLARE VARIABLE vUserName VARCHAR(100);
 DECLARE VARIABLE vMsg blob SUB_TYPE text;
 DECLARE VARIABLE vI BIGINT;
BEGIN
  /* verify record exists */
  IF (NOT EXISTS(SELECT USERID, SALONID FROM WS_SALON_UPDATES WHERE USERID = :ipUSERID AND SALONID = :ipSALONID)) THEN
    EXCEPTION EXC_127504454;

  DELETE FROM WS_SALON_UPDATES
  WHERE USERID = :ipUSERID AND SALONID = :ipSALONID;
  
    
  --send email
  SELECT M.FIRSTNAME, M.EMAIL, M.USERNAME
  FROM WS_MEMBERS M
  WHERE (M.ID = :ipUSERID)
  INTO :vUserFirstName, :vEMail, vUserName;

  vMsg = '<P>Hi ' || vUserFirstName || ',</p><P>You recently updated your salon details on Heaven''s website, these updates have not been accepted.</p><p>Please <a href="http://www.heavenskincare.com/ContactUs.aspx\">contact</a> Heaven for further details.</p><p>Thankyou</p>';
  EXECUTE PROCEDURE WSP_EMAIL_INSERT(vUserName, vEmail, 'Heaven Health & Beauty Ltd', 'noreply@heavenskincare.com', 'Your Salon Update', vMsg, 2) RETURNING_VALUES :vI;

END^
SET TERM ; ^


