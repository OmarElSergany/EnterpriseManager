SET TERM ^ ;
CREATE OR ALTER TRIGGER TR_DOWNLOAD_STATS_ID FOR WS_DOWNLOAD_STATS ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL OR NEW.ID < 0) THEN
        NEW.ID = GEN_ID(GEN_DOWNLOAD_STATS_ID, 1);
END^
SET TERM ; ^

UPDATE WS_VOUCHERS a
SET a.USER_ID = NULL
WHERE a.USER_ID NOT IN
(
SELECT ID
FROM WS_MEMBERS);



CREATE GENERATOR GEN_COMMISSION_POOL_ID;
GRANT USAGE ON GENERATOR GEN_COMMISSION_POOL_ID TO USER PUBLIC;


CREATE GENERATOR GEN_STAFF_SICK_ID;
GRANT USAGE ON GENERATOR GEN_STAFF_SICK_ID TO USER PUBLIC;


CREATE GENERATOR GEN_STAFF_LEAVE_ID;


CREATE OR ALTER EXCEPTION EXC_VOUCHER_ALREADY_SOLD 'The voucher has already been sold';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_EXISTS 'Voucher already exists.';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_EXPIRED 'Voucher has expired';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_INVALID_AMOUNT 'Invalid Voucher Amount';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_INVALID_CODE 'Invalid Voucher Code';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_NOT_EXIST 'Voucher does not exist';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_NOT_SOLD 'The voucher with this code has not been sold.';

CREATE OR ALTER EXCEPTION EXC_VOUCHER_REDEEMED 'Voucher has already been redeemed';

CREATE OR ALTER EXCEPTION EXC_CONN_NO 'No!';

CREATE OR ALTER EXCEPTION EXC_LICENCE_UPDATES 'Maximum number of updates exceeded';

CREATE OR ALTER EXCEPTION EXC_STOCK_CREATE 'STOCK CREATE ERROR';

CREATE OR ALTER EXCEPTION EXC_INVALID_SKU 'Invalid SKU Code';


CREATE OR ALTER VIEW VW_KNOWLEDGEBASE_GROUPS
(
    GROUP_ID,
    GROUP_ORDER,
    GROUP_NAME,
    GROUP_DESCRIPTION
)
AS
SELECT kbg.ID, kbg.group_name, kbg.Description, kbg.GROUPORDER
FROM WS_KNOWLEDGEBASE_GROUPS kbg;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_KNOWLEDGEBASE_GROUPS TO PUBLIC;

CREATE OR ALTER VIEW VW_KNOWLEDGEBASE_ITEM
(
    GROUP_ID,
    GROUP_ORDER,
    SUB_GROUP_ID,
    SUB_GROUP_ORDER,
    ITEM_ID,
    GROUP_NAME,
    SUB_GROUP_NAME,
    ITEM_NAME,
    ITEM_CONTENT
)
AS
SELECT kbg.ID, kbg.group_name, kbg.GROUPORDER,
  kbsg.ID, kbsg.Description, kbsg.GROUPORDER,
  kbi.ID, kbi.Description, kbi.Content
FROM WS_KNOWLEDGEBASE_GROUPS kbg,
  WS_KNOWLEDGEBASE_SUBGROUPS kbsg,
  WS_KNOWLEDGEBASE_ITEMS kbi
WHERE kbsg.GROUPID = kbg.ID
  AND kbi.SUBGROUPID = kbsg.ID;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_KNOWLEDGEBASE_ITEM TO PUBLIC;



CREATE OR ALTER VIEW VW_KNOWLEDGEBASE_ITEM2
(
    GROUP_ID,
    GROUP_ORDER,
    SUB_GROUP_ID,
    SUB_GROUP_ORDER,
    ITEM_ID,
    ITEM_VIEWCOUNT,
    GROUP_NAME,
    SUB_GROUP_NAME,
    ITEM_NAME,
    ITEM_CONTENT
)
AS
SELECT kbg.ID, kbg.group_name, kbg.GROUPORDER,
  kbsg.ID, kbsg.Description, kbsg.GROUPORDER,
  kbi.ID, kbi.Description, kbi.Content, kbi.ViewCount
FROM WS_KNOWLEDGEBASE_GROUPS kbg,
  WS_KNOWLEDGEBASE_SUBGROUPS kbsg,
  WS_KNOWLEDGEBASE_ITEMS kbi
WHERE kbsg.GROUPID = kbg.ID
  AND kbi.SUBGROUPID = kbsg.ID;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_KNOWLEDGEBASE_ITEM2 TO PUBLIC;


CREATE OR ALTER VIEW VW_KNOWLEDGEBASE_ITEMS
(
    GROUP_ID,
    SUB_GROUP_ID,
    SUB_GROUP_ORDER,
    ITEM_ID,
    GROUP_NAME,
    SUB_GROUP_NAME,
    ITEM_NAME,
    ITEM_CONTENT
)
AS
SELECT kgb.ID, kgb.Group_Name, kbsg.ID, kbsg.Description, kbsg.GROUPORDER,
  kbi.ID, kbi.Description, kbi.Content
FROM WS_KNOWLEDGEBASE_GROUPS kgb, WS_KNOWLEDGEBASE_SUBGROUPS kbsg,
  WS_KNOWLEDGEBASE_ITEMS kbi
WHERE kbi.SUBGROUPID = kbsg.ID
  AND kbsg.Groupid = kgb.id;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_KNOWLEDGEBASE_ITEMS TO PUBLIC;



CREATE OR ALTER VIEW VW_KNOWLEDGEBASE_SUB_GROUPS
(
    GROUP_ID,
    GROUP_ORDER,
    SUB_GROUP_ID,
    SUB_GROUP_ORDER,
    SUB_GROUP_SUBGROUPID,
    GROUP_NAME,
    GROUP_DESCRIPTION,
    SUB_GROUP_NAME
)
AS
SELECT kbg.ID, kbg.group_name, kbg.Description, kbg.GROUPORDER,
  kbsg.ID, kbsg.Description, kbsg.GROUPORDER, kbsg.subgroupid

FROM WS_KNOWLEDGEBASE_GROUPS kbg,
  WS_KNOWLEDGEBASE_SUBGROUPS kbsg
WHERE kbsg.GROUPID = kbg.ID;


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_KNOWLEDGEBASE_SUB_GROUPS TO PUBLIC;



CREATE OR ALTER VIEW VW_USER_PURCHASE_B_VENOM_EYES
(
    FIRSTNAME,
    LASTNAME,
    EMAIL
)
AS
SELECT FIRSTNAME, LASTNAME, EMAIL FROM WS_MEMBERS
WHERE ID IN (
SELECT r.USERID
FROM WS_INVOICE_ORDERS r
where r.ORDER_ID in (select invoiceid from WS_INVOICE_ITEMS where ITEM_ID = 364)
);


GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON VW_USER_PURCHASE_B_VENOM_EYES TO PUBLIC;



ALTER TABLE STAFF_LEAVE ADD CONSTRAINT PK_STAFF_LEAVE_ID PRIMARY KEY (ID);


ALTER TABLE WS_CAMPAIGNS_COUNTRIES ADD CONSTRAINT PK_WS_CAMPAIGNS_COUNTRIES_ID PRIMARY KEY (ID);


CREATE UNIQUE INDEX UNQ_PAYMENT_TO_POOL_TYPE1 ON PAYMENT_TO_POOL_TYPE (COMMISSION_POOL_ID, PAYMENT_STATUS_ID);


CREATE UNIQUE INDEX IDX_STAFF_COMMISSION1 ON STAFF_COMMISSION (STAFF_ID, INVOICE_ID);


CREATE UNIQUE INDEX IDX_STAFF_POOL_COMMISSION1 ON STAFF_POOL_COMMISSION (COMMISSION_POOL_ID, INVOICE_ID);


CREATE INDEX IDX_WS_VOUCHER_USER ON WS_VOUCHERS (USER_ID);


ALTER TABLE WS_MEMBER_NOTES ADD CONSTRAINT FK_WS_MEMBER_NOTES_1 FOREIGN KEY (MEMBER_ID)
  REFERENCES WS_MEMBERS (ID) ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE WS_TREATMENT_TO_THERAPIST ADD CONSTRAINT IDX_FK_TREAT_TREATMENTS2 FOREIGN KEY (TREATMENT_ID)
  REFERENCES WS_APPOINTMENT_TREATMENTS (ID) ON UPDATE CASCADE ON DELETE CASCADE;


ALTER TABLE WS_VOUCHERS ADD CONSTRAINT FK_WS_VOUCHERS_USER FOREIGN KEY (USER_ID)
  REFERENCES WS_MEMBERS (ID) ON UPDATE CASCADE ON DELETE SET NULL;

SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_EMAIL_INSERT
 (IPTO_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPTO_EMAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPFROM_NAME VARCHAR(200) CHARACTER SET UTF8, 
  IPFROM_MAIL VARCHAR(100) CHARACTER SET UTF8, 
  IPSUBJECT VARCHAR(600) CHARACTER SET UTF8, 
  IPMESSAGE BLOB SUB_TYPE 1 , 
  IPPRIORITY INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
DECLARE VARIABLE vMSG BLOB SUB_TYPE TEXT;
DECLARE VARIABLE vCount BIGINT;
BEGIN
  opNEWID = -1;
  
  -- ignore, client side problem
  IF (ipMESSAGE CONTAINING 'System.Web.UI.ViewStateException: Invalid viewstate') THEN
    EXIT;
      
  IF (LOWER(ipSUBJECT) = 'pos application replication error') THEN
  BEGIN
    SELECT COUNT(ID)
    FROM WS_EMAIL
    WHERE SUBJECT = 'POS Application Replication Error'
    INTO :vCount;
    
    IF (vCount > 5) THEN
      EXIT;
  END
    
  -- not a valid email then exit  
  IF (NOT (IPTO_EMAIL CONTAINING '@')) THEN
    EXIT;
    
  /* Get next ID */
  opNewID = GEN_ID(GEN_WS_EMAIL_ID, 1);

  IF (ipTO_NAME IS NULL) THEN
    EXCEPTION EXC_609003195;

  IF (ipTO_EMAIL IS NULL) THEN
    EXCEPTION EXC_609003296;

  IF (ipFROM_NAME IS NULL) THEN
    EXCEPTION EXC_609003401;

  IF (ipFROM_MAIL IS NULL) THEN
    EXCEPTION EXC_609003403;

  IF (ipSUBJECT IS NULL) THEN
    EXCEPTION EXC_609003176;

  IF (ipMESSAGE IS NULL) THEN
    EXCEPTION EXC_609003165;

  IF (ipPRIORITY IS NULL) THEN
    ipPRIORITY =  2;

  vMSG = '<HTML><HEAD><LINK href="http://www.heavenbydeborahmitchell.co.uk/Styles/Popup.css" type="text/css" rel="stylesheet"></HEAD>';
  vMSG = VMSG || '<body bgColor="#ffffff">';
  vMSG = VMSG || '<TABLE cellSpacing="0" cellPadding="0" width="100%" border="0" height="100%"><TR>';
  vMSG = VMSG || '<TD class="PageBorderTopLeftCorner" vAlign="top" align="left" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTop" vAlign="top" align="left" height="17">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderTopRightCorner" vAlign="top" align="right" width="18" height="17">&nbsp;</TD>';
  vMSG = VMSG || '</TR><TR><TD class="PageBorderLeft" vAlign="top" align="left" height="25"></TD>';
  vMSG = VMSG || '<TD class="TextBodySubHeader" vAlign="middle" align="left" height="25">';
  vMSG = VMSG || '<img src="http://www.heavenbydeborahmitchell.co.uk/Images/popuplogo.jpg" border=0 align=left><span class="TextBodySubHeader"><b>';
  vMSG = VMSG || ipSUBJECT || '</b></span><br><hr>';
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right" height="25"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderLeft" vAlign="top" align="left">&nbsp;</TD><TD class="TextBodySmall">';
  vMSG = VMSG || '<br><br>' || ipMESSAGE;
  vMSG = VMSG || '</TD><TD class="PageBorderRight" vAlign="top" align="right"></TD></TR><TR>';
  vMSG = VMSG || '<TD class="PageBorderBottomLeftCorner" vAlign="top" align="left" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottom" vAlign="bottom" align="left">&nbsp;</TD>';
  vMSG = VMSG || '<TD class="PageBorderBottomRightCorner" vAlign="bottom" align="right" width="18" height="18">&nbsp;</TD>';
  vMSG = VMSG || '</TR></TABLE></body></HTML>';



  INSERT INTO WS_EMAIL(
    ID,
    TO_NAME, 
    TO_EMAIL, 
    FROM_NAME, 
    FROM_MAIL, 
    SUBJECT, 
    MAIL_MESSAGE, 
    PRIORITY, 
    QUEUE_DATE
  ) VALUES (
    :opNewID,
    :ipTO_NAME, 
    :ipTO_EMAIL, 
    :ipFROM_NAME, 
    :ipFROM_MAIL, 
    :ipSUBJECT, 
    :vMSG, 
    :ipPRIORITY, 
    'NOW'
  );
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_EMAIL_INSERT TO PUBLIC;



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SP_WS_APPOINTMENT_TREATMENTS
 (IPISACTIVE VARCHAR(1) CHARACTER SET UTF8, 
  IPNAME VARCHAR(150) CHARACTER SET UTF8, 
  IPDURATION INTEGER, 
  IPREQUIRE_FOLLOW_ON VARCHAR(1) CHARACTER SET UTF8, 
  IPCOST DOUBLE PRECISION , 
  IPMAXIMUM_AVAILABLE INTEGER)
RETURNS
 (OPNEWID INTEGER)
AS
BEGIN
  opNewID = GEN_ID(GEN_APPOINTMENT_TREATMENTS, 1);	
  
  INSERT INTO WS_APPOINTMENT_TREATMENTS
  (
       ID, 
       ISACTIVE, 
       NAME, 
       DURATION, 
       REQUIRE_FOLLOW_ON, 
       COST, MAXIMUM_AVAILABLE
  )
  VALUES
  (
      :opNewID, 
      :ipISACTIVE, 
      :ipNAME, 
      :ipDURATION, 
      :ipREQUIRE_FOLLOW_ON, 
      :ipCOST, 
      :ipMAXIMUM_AVAILABLE
  );
  
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SP_WS_APPOINTMENT_TREATMENTS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_LEAVE_INS
 (IPUSER_ID BIGINT, 
  IPDATE_REQUESTED TIMESTAMP, 
  IPDATE_FROM TIMESTAMP, 
  IPDATE_TO TIMESTAMP, 
  IPTOTAL_TIME DOUBLE PRECISION , 
  IPAUTHORISED_BY BIGINT, 
  IPGRANTED_BY BIGINT, 
  IPNOTES VARCHAR(200) CHARACTER SET UTF8)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  opNEWID = GEN_ID(GEN_STAFF_LEAVE_ID, 1);
 
  IF (ipGRANTED_BY = -1) THEN ipGRANTED_BY = NULL;
  IF (ipAUTHORISED_BY = -1) THEN ipAUTHORISED_BY = NULL;


  INSERT INTO STAFF_LEAVE (
    ID,
    USER_ID,
    DATE_REQUESTED,
    DATE_FROM,
    DATE_TO,
    TOTAL_TIME,
    AUTHORISED_BY,
    GRANTED_BY,
    NOTES
  ) VALUES (
    :opNEWID,
    :ipUSER_ID,
    :ipDATE_REQUESTED,
    :ipDATE_FROM,
    :ipDATE_TO,
    :ipTOTAL_TIME,
    :ipAUTHORISED_BY,
    :ipGRANTED_BY,
    :ipNOTES
  );

  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_LEAVE_INS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_LEAVE_UPD
 (IPID BIGINT, 
  IPUSER_ID BIGINT, 
  IPDATE_REQUESTED TIMESTAMP, 
  IPDATE_FROM TIMESTAMP, 
  IPDATE_TO TIMESTAMP, 
  IPTOTAL_TIME DOUBLE PRECISION , 
  IPAUTHORISED_BY BIGINT, 
  IPGRANTED_BY BIGINT, 
  IPNOTES VARCHAR(200) CHARACTER SET UTF8, 
  IPSTATUS BIGINT)
AS
BEGIN
  IF (NOT EXISTS(SELECT ID FROM STAFF_LEAVE WHERE ID = :ipID)) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Record does not exist in table STAFF_LEAVE';

  IF (ipGRANTED_BY = -1) THEN ipGRANTED_BY = NULL;
  IF (ipAUTHORISED_BY = -1) THEN ipAUTHORISED_BY = NULL;


  UPDATE STAFF_LEAVE
  SET USER_ID = :ipUSER_ID,
    DATE_REQUESTED = :ipDATE_REQUESTED,
    DATE_FROM = :ipDATE_FROM,
    DATE_TO = :ipDATE_TO,
    TOTAL_TIME = :ipTOTAL_TIME,
    AUTHORISED_BY = :ipAUTHORISED_BY,
    GRANTED_BY = :ipGRANTED_BY,
    NOTES = :ipNOTES,
    STATUS = :ipSTATUS
  WHERE ID = :ipID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_LEAVE_UPD TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_APPOINTMENT_OPTIONS_UPD
 (IPEMPLOYEE_ID BIGINT, 
  IPALLOW_MONDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_TUESDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_WEDNESDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_THURSDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_FRIDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_SATURDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPALLOW_SUNDAY VARCHAR(1) CHARACTER SET UTF8, 
  IPSTART_TIME DOUBLE PRECISION , 
  IPEND_TIME DOUBLE PRECISION , 
  IPLUNCH_START DOUBLE PRECISION , 
  IPLUNCH_DURATION INTEGER, 
  IPALLOW_BOOK_CURRENT_DAY VARCHAR(1) CHARACTER SET UTF8, 
  IPPUBLIC_DIARY VARCHAR(1) CHARACTER SET UTF8, 
  IPGROUP INTEGER)
AS
BEGIN
  UPDATE WS_APPOINTMENT_OPTIONS a
  SET   a.ALLOW_MONDAY = :ipALLOW_MONDAY, 
        a.ALLOW_TUESDAY = :ipALLOW_TUESDAY, 
        a.ALLOW_WEDNESDAY = :ipALLOW_WEDNESDAY, 
        a.ALLOW_THURSDAY = :ipALLOW_THURSDAY, 
        a.ALLOW_FRIDAY = :ipALLOW_FRIDAY, 
        a.ALLOW_SATURDAY = :ipALLOW_SATURDAY, 
        a.ALLOW_SUNDAY = :ipALLOW_SUNDAY, 
        a.START_TIME = :ipSTART_TIME, 
        a.END_TIME = :ipEND_TIME, 
        a.LUNCH_START = :ipLUNCH_START, 
        a.LUNCH_DURATION = :ipLUNCH_DURATION, 
        a.ALLOW_BOOK_CURRENT_DAY = :ipALLOW_BOOK_CURRENT_DAY, 
        a.PUBLIC_DIARY = :ipPUBLIC_DIARY,
        a.APPOINTMENT_GROUP = :ipGROUP
  WHERE a.EMPLOYEE_ID = :ipEMPLOYEE_ID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_APPOINTMENT_OPTIONS_UPD TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_APPOINTMENT_TREATMENTS_SAVE
 (IPID INTEGER, 
  IPISACTIVE VARCHAR(1) CHARACTER SET UTF8, 
  IPNAME VARCHAR(150) CHARACTER SET UTF8, 
  IPDURATION INTEGER, 
  IPREQUIRE_FOLLOW_ON VARCHAR(1) CHARACTER SET UTF8, 
  IPCOST DOUBLE PRECISION , 
  IPMAXIMUM_AVAILABLE INTEGER)
AS
BEGIN
  UPDATE WS_APPOINTMENT_TREATMENTS
  SET ISACTIVE = :ipISACTIVE,
      NAME = :ipNAME,
      DURATION = :ipDURATION,
      REQUIRE_FOLLOW_ON = :ipREQUIRE_FOLLOW_ON,
      COST = :ipCOST,
      MAXIMUM_AVAILABLE = :ipMAXIMUM_AVAILABLE
  WHERE (ID = :ipID);
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_APPOINTMENT_TREATMENTS_SAVE TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_APPT_TREATMENTS_INSERT
 (IPISACTIVE VARCHAR(1) CHARACTER SET UTF8, 
  IPNAME VARCHAR(150) CHARACTER SET UTF8, 
  IPDURATION INTEGER, 
  IPREQUIRE_FOLLOW_ON VARCHAR(1) CHARACTER SET UTF8, 
  IPCOST DOUBLE PRECISION , 
  IPMAXIMUM_AVAILABLE INTEGER)
RETURNS
 (OPNEWID INTEGER)
AS
BEGIN
  opNewID = GEN_ID(GEN_APPOINTMENT_TREATMENTS, 1);	
  
  INSERT INTO WS_APPOINTMENT_TREATMENTS
  (
       ID, 
       ISACTIVE, 
       NAME, 
       DURATION, 
       REQUIRE_FOLLOW_ON, 
       COST, MAXIMUM_AVAILABLE
  )
  VALUES
  (
      :opNewID, 
      :ipISACTIVE, 
      :ipNAME, 
      :ipDURATION, 
      :ipREQUIRE_FOLLOW_ON, 
      :ipCOST, 
      :ipMAXIMUM_AVAILABLE
  );
  
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_APPT_TREATMENTS_INSERT TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_LEAVE_GET
 (IPID BIGINT)
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPDATE_REQUESTED TIMESTAMP, 
  OPDATE_FROM TIMESTAMP, 
  OPDATE_TO TIMESTAMP, 
  OPTOTAL_TIME DOUBLE PRECISION , 
  OPAUTHORISED_BY BIGINT, 
  OPGRANTED_BY BIGINT, 
  OPNOTES VARCHAR(200) CHARACTER SET UTF8, 
  OPAPPROVED_DATE TIMESTAMP, 
  OPAUTHORISED_DATE TIMESTAMP, 
  OPSTATUS BIGINT)
AS
BEGIN
  FOR
    SELECT a.ID, a.USER_ID, a.DATE_REQUESTED, a.DATE_FROM, a.DATE_TO, a.TOTAL_TIME, a.AUTHORISED_BY, a.GRANTED_BY, a.NOTES, a.APPROVED_DATE, a.AUTHORISED_DATE, a.STATUS
    FROM STAFF_LEAVE a
    WHERE (a.ID = :ipID)
    INTO :opID, :opUSER_ID, :opDATE_REQUESTED, :opDATE_FROM, :opDATE_TO, :opTOTAL_TIME, :opAUTHORISED_BY, :opGRANTED_BY, :opNOTES, :OPAPPROVED_DATE, :opAUTHORISED_DATE, :opSTATUS
DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_LEAVE_GET TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_LEAVE_ALL
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPDATE_REQUESTED TIMESTAMP, 
  OPDATE_FROM TIMESTAMP, 
  OPDATE_TO TIMESTAMP, 
  OPTOTAL_TIME DOUBLE PRECISION , 
  OPAUTHORISED_BY BIGINT, 
  OPGRANTED_BY BIGINT, 
  OPNOTES VARCHAR(200) CHARACTER SET UTF8, 
  OPAPPROVED_DATE TIMESTAMP, 
  OPAUTHORISED_DATE TIMESTAMP, 
  OPSTATUS BIGINT)
AS
BEGIN
  FOR
    SELECT a.ID, a.USER_ID, a.DATE_REQUESTED, a.DATE_FROM, a.DATE_TO, a.TOTAL_TIME, a.AUTHORISED_BY, a.GRANTED_BY, a.NOTES, a.APPROVED_DATE, a.AUTHORISED_DATE, a.STATUS
    FROM STAFF_LEAVE a
    INTO :opID, :opUSER_ID, :opDATE_REQUESTED, :opDATE_FROM, :opDATE_TO, :opTOTAL_TIME, :opAUTHORISED_BY, :opGRANTED_BY, :opNOTES, :OPAPPROVED_DATE, :opAUTHORISED_DATE, :opSTATUS
  DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_LEAVE_ALL TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_MERGE_MEMBER_ACCOUNTS
 (IPCURRENT_USER BIGINT, 
  IPPRIMARY_ACCOUNT_ID BIGINT, 
  IPSECONDARY_ACCOUNT_ID BIGINT)
AS
BEGIN
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID) VALUES
    (:ipCURRENT_USER, 'Merge Started', 0, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID);

    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_APPOINTMENTS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_APPOINTMENTS
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_APPOINTMENTS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_APPOINTMENTS
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_APPOINTMENTS 
    SET USER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_APPOINTMENTS 
    SET EMPLOYEE_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_INVOICE', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_INVOICE
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;

    UPDATE WS_INVOICE
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_INVOICE_ITEMS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_INVOICE_ITEMS
    WHERE STAFFMEMBER = :ipSECONDARY_ACCOUNT_ID;

    UPDATE WS_INVOICE_ITEMS
    SET STAFFMEMBER = :ipPRIMARY_ACCOUNT_ID
    WHERE STAFFMEMBER = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_INVOICE_ORDERS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_INVOICE_ORDERS
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_INVOICE_ORDERS
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_MEMBERS_ADDRESSES', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_MEMBERS_ADDRESSES
    WHERE MEMBER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_MEMBERS_ADDRESSES
    SET MEMBER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE MEMBER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_MEMBERS_CARDS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_MEMBERS_CARDS
    WHERE CUSTOMER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_MEMBERS_CARDS
    SET CUSTOMER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE CUSTOMER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    DELETE FROM WS_PERMISSIONS
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_REFUNDS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_REFUNDS
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_REFUNDS
    SET EMPLOYEE_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_SALONS_TO_MEMBERS', MEMBER_ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_SALONS_TO_MEMBERS
    WHERE MEMBER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    DELETE
    FROM WS_SALONS_TO_MEMBERS a
    WHERE a.MEMBER_ID = :ipSECONDARY_ACCOUNT_ID
    AND a.SALON_ID IN
    (
    SELECT SALON_ID
    FROM WS_SALONS_TO_MEMBERS
    WHERE MEMBER_ID = :ipPRIMARY_ACCOUNT_ID
    );
    
    UPDATE WS_SALONS_TO_MEMBERS
    SET MEMBER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE MEMBER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_SALON_UPDATES', USERID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_SALON_UPDATES
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_SALON_UPDATES
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    DELETE FROM WS_TREATMENT_TO_THERAPIST
    WHERE THERAPIST_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_USER_TO_BASKET', USERID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_USER_TO_BASKET
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_USER_TO_BASKET
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_VOUCHERS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_VOUCHERS
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_VOUCHERS
    SET USER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    DELETE FROM WS_APPOINTMENT_OPTIONS
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    DELETE FROM WS_APPOINTMENT_OPTIONS_EX
    WHERE EMPLOYEE_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_CUSTOMER_COMMENTS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_CUSTOMER_COMMENTS
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_CUSTOMER_COMMENTS
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_LINKS_MEMBERS', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_LINKS_MEMBERS
    WHERE MEMBERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_LINKS_MEMBERS
    SET MEMBERID = :ipPRIMARY_ACCOUNT_ID
    WHERE MEMBERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_SHOPPINGBASKET_COUPONS', USERID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_SHOPPINGBASKET_COUPONS
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_SHOPPINGBASKET_COUPONS
    SET USERID = :ipPRIMARY_ACCOUNT_ID
    WHERE USERID = :ipSECONDARY_ACCOUNT_ID;
    
    
    
    DELETE FROM POS_BARCODE_LOGIN
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'WS_CASH_DRAWER', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM WS_CASH_DRAWER
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE WS_CASH_DRAWER
    SET USER_ID = :ipPRIMARY_ACCOUNT_ID
    WHERE USER_ID = :ipSECONDARY_ACCOUNT_ID;
    
    
    INSERT INTO MERGE_CHANGES(USER_ID, TABLE_NAME, TABLE_ID, PRIMARY_ID, SECONDARY_ID)
    SELECT :ipCURRENT_USER, 'TRAINING_COURSE', ID, :ipPRIMARY_ACCOUNT_ID, :ipSECONDARY_ACCOUNT_ID
    FROM TRAINING_COURSE
    WHERE TRAINER = :ipSECONDARY_ACCOUNT_ID;
    
    UPDATE TRAINING_COURSE
    SET TRAINER = :ipPRIMARY_ACCOUNT_ID
    WHERE TRAINER = :ipSECONDARY_ACCOUNT_ID;
    
    
    
    
    UPDATE WS_MEMBERS
    SET EMAIL = 'MERGED RECORD ' || :ipSECONDARY_ACCOUNT_ID,
        FIRSTNAME = 'MERGED',
        LASTNAME = 'MERGED',
        PWORD = 'op824n;f-+=la983j;aiu',
        BUSINESSNAME = 'MERGED',
        ADDRESSLINE1 = 'MERGED',
        ADDRESSLINE2 = 'MERGED',
        ADDRESSLINE3 = 'MERGED',
        CITY = 'MERGED',
        COUNTY = 'MERGED',
        POSTCODE = 'MERGED',
        RECEIVE_EMAIL_SPECIAL_OFFERS = 'F',
        RECEIVE_PHONE_SPECIAL_OFFERS = 'F',
        RECEIVE_POSTAL_SPECIAL_OFFERS = 'F',
        AUTO_DISCOUNT = 0,
        RECORD_TYPE = 5,
        MEMBER_LEVEL = 0,
        NOTES = 'Record Merged with record ID: ' || :ipPRIMARY_ACCOUNT_ID
    WHERE ID  = :ipSECONDARY_ACCOUNT_ID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_MERGE_MEMBER_ACCOUNTS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_UPD
 (IPID BIGINT, 
  IPUSER_ID BIGINT, 
  IPSTAFF_ID BIGINT, 
  IPNOTES VARCHAR(8000) CHARACTER SET UTF8, 
  IPEXPIRES TIMESTAMP, 
  IPLAST_REVIEWED TIMESTAMP, 
  IPREVIEWED_BY BIGINT, 
  IPPREFERRED_DATE DATE, 
  IPPREFERRED_TIME DOUBLE PRECISION )
AS
BEGIN
  IF (NOT EXISTS(SELECT ID FROM WS_APPOINTMENT_WAIT_LIST_LONG WHERE ID = :ipID)) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Record does not exist in table WS_APPOINTMENT_WAIT_LIST_LONG';

  UPDATE WS_APPOINTMENT_WAIT_LIST_LONG
  SET USER_ID = :ipUSER_ID,
    STAFF_ID = :ipSTAFF_ID,
    NOTES = :ipNOTES,
    EXPIRES = :ipEXPIRES,
    LAST_REVIEWED = :ipLAST_REVIEWED,
    REVIEWED_BY = :ipREVIEWED_BY,
    PREFERRED_DATE = :ipPREFERRED_DATE,
    PREFERRED_TIME = :ipPREFERRED_TIME
  WHERE ID = :ipID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPWS_APPT_WAIT_LONG_UPD TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_ALL
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPSTAFF_ID BIGINT, 
  OPNOTES VARCHAR(8000) CHARACTER SET UTF8, 
  OPEXPIRES TIMESTAMP, 
  OPLAST_REVIEWED TIMESTAMP, 
  OPREVIEWED_BY BIGINT, 
  OPPREFERRED_DATE DATE, 
  OPPREFERRED_TIME DOUBLE PRECISION )
AS
BEGIN
  FOR
    SELECT a.ID, a.USER_ID, a.STAFF_ID, a.NOTES, a.EXPIRES, a.LAST_REVIEWED, a.REVIEWED_BY, a.PREFERRED_DATE, a.PREFERRED_TIME
    FROM WS_APPOINTMENT_WAIT_LIST_LONG a
    INTO :opID, :opUSER_ID, :opSTAFF_ID, :opNOTES, :opEXPIRES, :opLAST_REVIEWED, :opREVIEWED_BY, :opPREFERRED_DATE, :opPREFERRED_TIME
  DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPWS_APPT_WAIT_LONG_ALL TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPWS_APPT_WAIT_LONG_CNT
RETURNS
 (OPCOUNT INTEGER)
AS
BEGIN
  SELECT COUNT(ID)
  FROM WS_APPOINTMENT_WAIT_LIST_LONG a
  INTO opCOUNT;
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPWS_APPT_WAIT_LONG_CNT TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_TREATMENT_TO_THERAPIST_INS
 (IPTHERAPIST_ID BIGINT, 
  IPTREATMENT_ID INTEGER)
AS
BEGIN
	IF (NOT EXISTS(SELECT a.THERAPIST_ID, a.TREATMENT_ID FROM WS_TREATMENT_TO_THERAPIST a WHERE a.THERAPIST_ID = :ipTHERAPIST_ID AND a.TREATMENT_ID = :ipTREATMENT_ID)) THEN
    BEGIN
      INSERT INTO WS_TREATMENT_TO_THERAPIST
      (
        THERAPIST_ID,
        TREATMENT_ID
      )
      VALUES
      (
        :ipTHERAPIST_ID,
        :ipTREATMENT_ID
      );
      
	END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_TREATMENT_TO_THERAPIST_INS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_VOUCHER_CREATE
 (IPVOUCHERCODE VARCHAR(80) CHARACTER SET UTF8, 
  IPAMOUNT DOUBLE PRECISION )
AS
DECLARE VARIABLE vID Bigint;
DECLARE VARIABLE vVOUCHER_CODE Varchar(80);
DECLARE VARIABLE vISSUE_DATE Date;
DECLARE VARIABLE vEXPIRE_DATE Date;
DECLARE VARIABLE vVOUCHER_AMOUNT Double precision;
DECLARE VARIABLE vREDEEM_DATE Date;
BEGIN
    IF (EXISTS(SELECT * FROM WS_VOUCHERS WHERE VOUCHER_CODE = :IPVOUCHERCODE)) THEN
        EXCEPTION EXC_VOUCHER_EXISTS;
     
     
    INSERT INTO WS_VOUCHERS (VOUCHER_CODE, ISSUE_DATE, EXPIRE_DATE, VOUCHER_AMOUNT, REDEEM_DATE, USER_ID)
    VALUES (
        :IPVOUCHERCODE, 
        NULL, 
        NULL, 
        :IPAMOUNT, 
        NULL, 
        NULL
    );
        
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_VOUCHER_CREATE TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_VOUCHER_PURCHASE
 (IPVOUCHERCODE VARCHAR(80) CHARACTER SET UTF8, 
  IPUSER BIGINT, 
  IPVALUE DOUBLE PRECISION )
AS
DECLARE VARIABLE vID Bigint;
DECLARE VARIABLE vVOUCHER_CODE Varchar(80);
DECLARE VARIABLE vISSUE_DATE Date;
DECLARE VARIABLE vEXPIRE_DATE Date;
DECLARE VARIABLE vVOUCHER_AMOUNT Double precision;
DECLARE VARIABLE vREDEEM_DATE Date;
BEGIN
    IF (NOT EXISTS(SELECT * FROM WS_VOUCHERS WHERE REPLACE(VOUCHER_CODE, '-', '') = REPLACE(:IPVOUCHERCODE, '-', ''))) THEN
        EXCEPTION EXC_VOUCHER_NOT_EXIST;
     
    SELECT VOUCHER_AMOUNT, ISSUE_DATE
    FROM WS_VOUCHERS
    WHERE REPLACE(VOUCHER_CODE, '-', '') = REPLACE(:IPVOUCHERCODE, '-', '')
    INTO :vVOUCHER_AMOUNT, :vISSUE_DATE;
    
    IF (vVOUCHER_AMOUNT <> IPVALUE) THEN
        EXCEPTION EXC_VOUCHER_INVALID_AMOUNT;
        
    IF (vISSUE_DATE IS NOT NULL) THEN
        EXCEPTION EXC_VOUCHER_ALREADY_SOLD;
        
    UPDATE WS_VOUCHERS
    SET issue_date = CURRENT_DATE,
        user_id = :IPUSER,
        expire_date = CURRENT_DATE + 364
    WHERE REPLACE(VOUCHER_CODE, '-', '') = REPLACE(:IPVOUCHERCODE, '-', '');
    
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_VOUCHER_PURCHASE TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_VOUCHER_REDEEM
 (IPVOUCHERCODE VARCHAR(80) CHARACTER SET UTF8, 
  IPUSER BIGINT)
RETURNS
 (OPAMOUNT DOUBLE PRECISION )
AS
DECLARE VARIABLE vID Bigint;
DECLARE VARIABLE vVOUCHER_CODE Varchar(80);
DECLARE VARIABLE vISSUE_DATE Date;
DECLARE VARIABLE vEXPIRE_DATE Date;
DECLARE VARIABLE vVOUCHER_AMOUNT Double precision;
DECLARE VARIABLE vREDEEM_DATE Date;
BEGIN
    IF (NOT EXISTS(SELECT * FROM WS_VOUCHERS WHERE REPLACE(VOUCHER_CODE, '-', '') = REPLACE(:IPVOUCHERCODE, '-', ''))) THEN
        EXCEPTION EXC_VOUCHER_INVALID_CODE;
        
    SELECT a.ID, a.VOUCHER_CODE, a.ISSUE_DATE, a.EXPIRE_DATE, a.VOUCHER_AMOUNT, a.REDEEM_DATE
    FROM WS_VOUCHERS a
    WHERE REPLACE(a.VOUCHER_CODE, '-', '') = REPLACE(:IPVOUCHERCODE, '-', '')
    INTO :vID, :vVOUCHER_CODE, :vISSUE_DATE, :vEXPIRE_DATE, :vVOUCHER_AMOUNT, :vREDEEM_DATE;
	
	opAMOUNT = vVoucher_Amount;
	
    IF (vREDEEM_DATE IS NOT NULL) THEN
        EXCEPTION EXC_VOUCHER_REDEEMED;
            
    IF (vEXPIRE_DATE < CURRENT_DATE) THEN
        EXCEPTION EXC_VOUCHER_EXPIRED;
            
    IF (vISSUE_DATE IS NULL) THEN
        EXCEPTION EXC_VOUCHER_NOT_SOLD;
        
    UPDATE WS_VOUCHERS
    SET REDEEM_DATE = CURRENT_DATE,
        USER_ID = :IPUSER
    WHERE ID = :vID;
    
    SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_VOUCHER_REDEEM TO PUBLIC;



CREATE GENERATOR GEN_WS_TREATMENT_GROUP_ID;



SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSP_WS_TREATMENT_GROUP_INS
 (IPDESCRIPTION VARCHAR(100) CHARACTER SET UTF8, 
  IPSORT_ORDER INTEGER)
RETURNS
 (OPNEWID INTEGER)
AS
BEGIN
  IF (ipDESCRIPTION IS NULL) THEN
    EXCEPTION EXC_130205335;

  /* Get next ID */
  opNewID = GEN_ID(GEN_WS_TREATMENT_GROUP_ID, 1);

  INSERT INTO WS_TREATMENT_GROUPS(
    ID,
    DESCRIPTION, 
    SORT_ORDER
  ) VALUES (
    :opNewID,
    :ipDESCRIPTION, 
    :ipSORT_ORDER
  );
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSP_WS_TREATMENT_GROUP_INS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_MEMBERS_UPD
 (IPUSER_ID BIGINT, 
  IPTITLE VARCHAR(150) CHARACTER SET UTF8, 
  IPLOCATION VARCHAR(100) CHARACTER SET UTF8, 
  IPPART_TIME CHAR(1) CHARACTER SET UTF8, 
  IPWEEKLY_HOURS BIGINT, 
  IPPAYROLL_NUMBER VARCHAR(30) CHARACTER SET UTF8, 
  IPPAY_PERIOD BIGINT, 
  IPLEAVE_ENTITLEMENT BIGINT, 
  IPENTITLEMENT_TYPE CHAR(1) CHARACTER SET UTF8, 
  IPLEAVE_ACCRUES CHAR(1) CHARACTER SET UTF8, 
  IPLEAVE_CARRY_OVER CHAR(1) CHARACTER SET UTF8, 
  IPGENDER INTEGER, 
  IPMARITAL_STATUS INTEGER, 
  IPNATIONALITY INTEGER, 
  IPDATE_OF_BIRTH DATE, 
  IPEMERGENCY_CONTACT_NAME VARCHAR(100) CHARACTER SET UTF8, 
  IPEMERGENCY_CONTACT_TELEPHONE VARCHAR(100) CHARACTER SET UTF8, 
  IPEMERGENCY_CONTACT_RSHIP VARCHAR(100) CHARACTER SET UTF8, 
  IPDL_NUMBER VARCHAR(100) CHARACTER SET UTF8, 
  IPDL_EXPIRE DATE, 
  IPDL_NOTES VARCHAR(200) CHARACTER SET UTF8, 
  IPTEL_HOME VARCHAR(100) CHARACTER SET UTF8, 
  IPTEL_MOBILE VARCHAR(100) CHARACTER SET UTF8, 
  IPTEL_WORK VARCHAR(100) CHARACTER SET UTF8, 
  IPTEL_OTHER_1 VARCHAR(100) CHARACTER SET UTF8, 
  IPDATE_JOINED DATE, 
  IPDATE_PROBATION_END DATE, 
  IPDATE_PERMANENT DATE, 
  IPPROPERTIES BIGINT, 
  IPEMPLOYMENT_TYPE BIGINT, 
  IPCOMMISSION_RATE INTEGER, 
  IPMANAGER_COMMISSION_RATE INTEGER)
AS
BEGIN
  IF (NOT EXISTS(SELECT USER_ID FROM STAFF_MEMBERS WHERE USER_ID = :ipUSER_ID)) THEN
  BEGIN
    INSERT INTO STAFF_MEMBERS (USER_ID, MARITAL_STATUS, NATIONALITY, LAST_UPDATED) VALUES (:ipUSER_ID, 0, 0, CURRENT_TIMESTAMP - 500);
  END

  UPDATE STAFF_MEMBERS
  SET TITLE = :ipTITLE,
    LOCATION = :ipLOCATION,
    PART_TIME = :ipPART_TIME,
    WEEKLY_HOURS = :ipWEEKLY_HOURS,
    PAYROLL_NUMBER = :ipPAYROLL_NUMBER,
    PAY_PERIOD = :ipPAY_PERIOD,
    LEAVE_ENTITLEMENT = :ipLEAVE_ENTITLEMENT,
    ENTITLEMENT_TYPE = :ipENTITLEMENT_TYPE,
    LEAVE_ACCRUES = :ipLEAVE_ACCRUES,
    LEAVE_CARRY_OVER = :ipLEAVE_CARRY_OVER,
    GENDER = :ipGENDER,
    MARITAL_STATUS = :ipMARITAL_STATUS,
    NATIONALITY = :ipNATIONALITY,
    DATE_OF_BIRTH = :ipDATE_OF_BIRTH,
    EMERGENCY_CONTACT_NAME = :ipEMERGENCY_CONTACT_NAME,
    EMERGENCY_CONTACT_TELEPHONE = :ipEMERGENCY_CONTACT_TELEPHONE,
    EMERGENCY_CONTACT_RELATIONSHIP = :ipEMERGENCY_CONTACT_RSHIP,
    DL_NUMBER = :ipDL_NUMBER,
    DL_EXPIRE = :ipDL_EXPIRE,
    DL_NOTES = :ipDL_NOTES,
    TEL_HOME = :ipTEL_HOME,
    TEL_MOBILE = :ipTEL_MOBILE,
    TEL_WORK = :ipTEL_WORK,
    TEL_OTHER_1 = :ipTEL_OTHER_1,
    DATE_JOINED = :ipDATE_JOINED,
    DATE_PROBATION_END = :ipDATE_PROBATION_END,
    DATE_PERMANENT = :ipDATE_PERMANENT,
    PROPERTIES = :ipPROPERTIES,
    EMPLOYMENT_TYPE = :ipEMPLOYMENT_TYPE,
    COMMISSION_RATE = :ipCOMMISSION_RATE,
    MANAGER_COMMISSION_RATE = :ipMANAGER_COMMISSION_RATE
  WHERE USER_ID = :ipUSER_ID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_MEMBERS_UPD TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE TEST_DUPLICATE_INVOICES
RETURNS
 (OPDEBUG1 VARCHAR(2000) CHARACTER SET UTF8, 
  OPDEBUG2 VARCHAR(2000) CHARACTER SET UTF8)
AS
DECLARE VARIABLE vInvoiceID BIGINT;
    DECLARE VARIABLE vValidInvoiceID BIGINT;
    DECLARE VARIABLE vUserID BIGINT;
    DECLARE VARIABLE vPurchaseDate TIMESTAMP;
    DECLARE VARIABLE vTotalCost DOUBLE PRECISION; 
BEGIN
  FOR
    SELECT a.ID, a.USERID, a.PURCHASEDATE, a.TOTALCOST
    FROM WS_INVOICE a
    where a.TOTALCOST > 0
    and a.ID NOT IN
    (
    SELECT ii.INVOICEID
    FROM WS_INVOICE_ITEMS ii
    )
    and a.PROCESS_STATUS <> 10
    order by a.PURCHASEDATE
  INTO :vInvoiceID, :vUserID, :vPurchaseDate, :vTotalCost
  DO
  BEGIN
    opDebug1 = 'Invoice ' || vInvoiceID || ' has no items invoice items';
    -- does a record exists that matches this one, and has invoice items??
    FOR 
        SELECT a.ID
        FROM WS_INVOICE a
        WHERE a.USERID = :vUserID AND a.PURCHASEDATE = :vPurchaseDate AND a.TOTALCOST = :vTotalCost
            AND a.ID IN (SELECT ii.INVOICEID FROM WS_INVOICE_ITEMS ii)
        INTO :vValidInvoiceID
    DO
    BEGIN
        IF (vValidInvoiceID IS NULL) THEN
        BEGIN
            opDebug2 = 'No Valid Matching Invoice Found';
        END ELSE BEGIN
            opDebug2 = 'Invoice ' || vValidInvoiceID || ' has similar properties and HAS invoice Items';
            DELETE FROM WS_INVOICE WHERE ID = :vInvoiceID;
        END

        SUSPEND;
    END
    
    opDebug2 = 'End of checks for record';
    SUSPEND;
  END

END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE TEST_DUPLICATE_INVOICES TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_MEMBERS_GET
 (IPUSER_ID BIGINT)
RETURNS
 (OPUSER_ID BIGINT, 
  OPTITLE VARCHAR(150) CHARACTER SET UTF8, 
  OPLOCATION VARCHAR(100) CHARACTER SET UTF8, 
  OPPART_TIME CHAR(1) CHARACTER SET UTF8, 
  OPWEEKLY_HOURS BIGINT, 
  OPPAYROLL_NUMBER VARCHAR(30) CHARACTER SET UTF8, 
  OPPAY_PERIOD BIGINT, 
  OPLEAVE_ENTITLEMENT BIGINT, 
  OPENTITLEMENT_TYPE CHAR(1) CHARACTER SET UTF8, 
  OPLEAVE_ACCRUES CHAR(1) CHARACTER SET UTF8, 
  OPLEAVE_CARRY_OVER CHAR(1) CHARACTER SET UTF8, 
  OPGENDER INTEGER, 
  OPMARITAL_STATUS INTEGER, 
  OPNATIONALITY INTEGER, 
  OPDATE_OF_BIRTH DATE, 
  OPEMERGENCY_CONTACT_NAME VARCHAR(100) CHARACTER SET UTF8, 
  OPEMERGENCY_CONTACT_TELEPHONE VARCHAR(100) CHARACTER SET UTF8, 
  OPEMERGENCY_CONTACT_RSHIP VARCHAR(100) CHARACTER SET UTF8, 
  OPDL_NUMBER VARCHAR(100) CHARACTER SET UTF8, 
  OPDL_EXPIRE DATE, 
  OPTEL_HOME VARCHAR(100) CHARACTER SET UTF8, 
  OPTEL_MOBILE VARCHAR(100) CHARACTER SET UTF8, 
  OPTEL_WORK VARCHAR(100) CHARACTER SET UTF8, 
  OPTEL_OTHER_1 VARCHAR(100) CHARACTER SET UTF8, 
  OPDATE_JOINED DATE, 
  OPDATE_PROBATION_END DATE, 
  OPDATE_PERMANENT DATE, 
  OPPROPERTIES BIGINT, 
  OPLAST_UPDATED TIMESTAMP, 
  OPDL_NOTES VARCHAR(200) CHARACTER SET UTF8, 
  OPEMPLOYMENT_TYPE BIGINT, 
  OPCOMMISSION_RATE INTEGER, 
  OPMANAGER_COMMISSION_RATE INTEGER)
AS
BEGIN
  FOR
    SELECT a.USER_ID, a.TITLE, a.LOCATION, a.PART_TIME, a.WEEKLY_HOURS, a.PAYROLL_NUMBER, a.PAY_PERIOD, a.LEAVE_ENTITLEMENT, a.ENTITLEMENT_TYPE, a.LEAVE_ACCRUES, a.LEAVE_CARRY_OVER, a.GENDER, a.MARITAL_STATUS, a.NATIONALITY, a.DATE_OF_BIRTH, a.EMERGENCY_CONTACT_NAME, a.EMERGENCY_CONTACT_TELEPHONE, a.EMERGENCY_CONTACT_RELATIONSHIP, a.DL_NUMBER, a.DL_EXPIRE, a.TEL_HOME, a.TEL_MOBILE, a.TEL_WORK, a.TEL_OTHER_1, a.DATE_JOINED, a.DATE_PROBATION_END, a.DATE_PERMANENT, a.PROPERTIES, a.LAST_UPDATED, a.DL_NOTES, a.EMPLOYMENT_TYPE, a.COMMISSION_RATE, a.MANAGER_COMMISSION_RATE
    FROM STAFF_MEMBERS a
    WHERE (a.USER_ID = :ipUSER_ID)
    INTO :opUSER_ID, :opTITLE, :opLOCATION, :opPART_TIME, :opWEEKLY_HOURS, :opPAYROLL_NUMBER, :opPAY_PERIOD, :opLEAVE_ENTITLEMENT, :opENTITLEMENT_TYPE, :opLEAVE_ACCRUES, :opLEAVE_CARRY_OVER, :opGENDER, :opMARITAL_STATUS, :opNATIONALITY, :opDATE_OF_BIRTH, :opEMERGENCY_CONTACT_NAME, :opEMERGENCY_CONTACT_TELEPHONE, :opEMERGENCY_CONTACT_RSHIP, :opDL_NUMBER, :opDL_EXPIRE, :opTEL_HOME, :opTEL_MOBILE, :opTEL_WORK, :opTEL_OTHER_1, :opDATE_JOINED, :opDATE_PROBATION_END, :opDATE_PERMANENT, :opPROPERTIES, :opLAST_UPDATED, :opDL_NOTES, :opEMPLOYMENT_TYPE, :opCOMMISSION_RATE, :opMANAGER_COMMISSION_RATE
  DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_MEMBERS_GET TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSF_CASH_DRAWER_VALUES
 (IPDATE DATE, 
  IPSTOREID INTEGER, 
  IPTYPE INTEGER)
RETURNS
 (OPDESCRIPTION VARCHAR(100) CHARACTER SET UTF8, 
  OPTOTAL DOUBLE PRECISION )
AS
DECLARE VARIABLE vCount INTEGER = 0;
  DECLARE VARIABLE vTotal DOUBLE PRECISION = 0.00;
BEGIN
    FOR
        SELECT 'Start Of Day', COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE CAST(a.CHECK_DATE AS DATE) = :ipDATE
          AND a.CHECK_TYPE = 'START'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
        UNION ALL
        SELECT 'Invoice Sales Cash Only', COALESCE(SUM(a.TOTALCOST), 0)
        FROM WS_INVOICE_ORDERS a
        WHERE a.STORE_ID = :ipSTOREID
          AND a.STATUS = 26
          AND a.PROCESS_STATUS = 2
          AND CAST(a.PURCHASEDATE AS DATE) = :ipDATE
        UNION ALL
        SELECT 'Invoice Sales Split Payment Cash', COALESCE(SUM(a.AMOUNT_CASH), 0)
        FROM WS_INVOICE_SPLIT_PAYMENTS a
        WHERE a.INVOICE_ID IN 
        (
        SELECT io.ORDER_ID
        FROM WS_INVOICE_ORDERS io
        WHERE io.STORE_ID = :ipSTOREID
          AND io.STATUS = 29
          AND io.PROCESS_STATUS = 2
          AND CAST(io.PURCHASEDATE AS DATE) = :ipDATE
        )
        UNION ALL
        SELECT 'Banked', COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE CAST(a.CHECK_DATE AS DATE) = :ipDATE
          AND a.CHECK_TYPE = 'BANK'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
        UNION ALL
        SELECT 'Moved to Safe', COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE CAST(a.CHECK_DATE AS DATE) = :ipDATE
          AND a.CHECK_TYPE = 'SAFEIN'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
        UNION ALL
        SELECT 'Add Cash to Till', COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE CAST(a.CHECK_DATE AS DATE) = :ipDATE
          AND a.CHECK_TYPE = 'CASHA'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
        UNION ALL
        SELECT 'End Of Day', COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE CAST(a.CHECK_DATE AS DATE) = :ipDATE
          AND a.CHECK_TYPE = 'FINISH'
          AND STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
    INTO :opDESCRIPTION, :opTOTAL
    DO
    BEGIN
        IF (vCount = 0) THEN
        BEGIN
            vTotal = opTOTAL;
            SUSPEND;
        END ELSE IF (vCount = 6) THEN
        BEGIN
            IF (IPDATE < CURRENT_DATE) THEN
            BEGIN
                IF (opTotal = 0) THEN
                BEGIN
                    opTOTAL = vTotal;
                    OPDESCRIPTION = TRIM(OPDESCRIPTION) || ' (Calculated)';
                END 

                SUSPEND;
            END
        END ELSE BEGIN
            IF ((vCount = 3) OR (vCount = 4)) THEN
                vTotal = vTotal - opTotal;
            ELSE
                vTotal = vTotal + opTOTAL;
            
            SUSPEND;
        END
        
        vCount = vCount + 1;
    
    END
    
    IF (IPDATE = CURRENT_DATE) THEN
    BEGIN
        opDescription = 'Current Till Total';
        opTotal = vTotal;
    
        SUSPEND;
    END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSF_CASH_DRAWER_VALUES TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPCOMMISSION_POOL_INS
 (IPNAME VARCHAR(100) CHARACTER SET UTF8, 
  IPRATE BIGINT, 
  IPLOCATION INTEGER)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  opNEWID = GEN_ID(GEN_COMMISSION_POOL_ID, 1);

  INSERT INTO COMMISSION_POOLS (ID, POOL_NAME, COMMISSION_RATE, LOCATION)
  VALUES 
  (
    :opNEWID, 
    :ipNAME, 
    :ipRATE,
    :ipLOCATION
  );
  
  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPCOMMISSION_POOL_INS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSF_CASH_DRAWER_VALUES_SAFE
 (IPDATE DATE, 
  IPSTOREID INTEGER, 
  IPTYPE INTEGER)
RETURNS
 (OPDATE TIMESTAMP, 
  OPDESCRIPTION VARCHAR(100) CHARACTER SET UTF8, 
  OPTOTAL DOUBLE PRECISION )
AS
DECLARE VARIABLE vCount INTEGER = 0;
  DECLARE VARIABLE vDate TIMESTAMP;
  DECLARE VARIABLE vTotal DOUBLE PRECISION = 0.00;
  DECLARE VARIABLE vDateStamp TIMESTAMP;
BEGIN
    FOR
        SELECT 'Start Of Day', 0, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'START'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Add Cash to Safe', 1, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'CASHA'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Banked', 2, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'BANK'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Remove Cash from Safe', 3, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'CASHR'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'End Of Day', 6, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'FINISH'
          AND STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
    ORDER BY 2 
          
    INTO :opDESCRIPTION, :vCount, :opDate, :vDate, :opTOTAL
    DO
    BEGIN
        IF (vCount = 0 AND vDate <= ipDATE) THEN
        BEGIN
            vTotal = opTOTAL;

            IF (vDate = ipDATE) THEN
	            SUSPEND;
        END ELSE 
        BEGIN
            IF ((vCount IN (2, 3, 4, 5))) THEN
                vTotal = vTotal - opTotal;
            ELSE
                vTotal = vTotal + opTOTAL;
            
            IF (vDate = ipDATE) THEN
                SUSPEND;
        END
    END

    opDate = ipDate;
    opDescription = 'Current Safe Total';
    opTotal = vTotal;
    
    SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSF_CASH_DRAWER_VALUES_SAFE TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE WSF_CASH_DRAWER_VALUES_CASH
 (IPDATE DATE, 
  IPSTOREID INTEGER, 
  IPTYPE INTEGER)
RETURNS
 (OPDATE TIMESTAMP, 
  OPDESCRIPTION VARCHAR(100) CHARACTER SET UTF8, 
  OPTOTAL DOUBLE PRECISION )
AS
DECLARE VARIABLE vCount INTEGER = 0;
  DECLARE VARIABLE vDate TIMESTAMP;
  DECLARE VARIABLE vTotal DOUBLE PRECISION = 0.00;
  DECLARE VARIABLE vDateStamp TIMESTAMP;
BEGIN
    FOR
        SELECT 'Start Of Day', 0, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'START'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Add Cash to Petty Cash', 1, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'CASHA'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Banked', 2, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'BANK'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Remove Cash from Petty Cash', 3, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'CASHR'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Purchase Items using Petty Cash', 4, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'PURCHA'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'Moved to Safe', 5, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'SAFEIN'
          AND a.STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
        UNION ALL
        SELECT 'End Of Day', 6, a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE), COALESCE(SUM((a.DENOMINATION_500_POUND * 500) + (a.DENOMINATION_100_POUND * 100) + (a.DENOMINATION_50_POUND * 50) + (a.DENOMINATION_20_POUND * 20) + (a.DENOMINATION_10_POUND * 10) + (a.DENOMINATION_5_POUND * 5) + (a.DENOMINATION_2_POUND * 2) + (a.DENOMINATION_1_POUND * 1) + (a.DENOMINATION_50_PENCE * 0.5) + (a.DENOMINATION_20_PENCE * 0.2) + (a.DENOMINATION_10_PENCE * 0.10) + (a.DENOMINATION_5_PENCE * 0.05) + (a.DENOMINATION_2_PENCE * 0.02) + (a.DENOMINATION_1_PENCE * 0.01)), 0)
        FROM WS_CASH_DRAWER a
        WHERE a.CHECK_TYPE = 'FINISH'
          AND STORE_ID = :ipSTOREID
          AND a.DRAWER_TYPE = :ipTYPE
          AND CAST(a.CHECK_DATE AS DATE) <= :ipDATE
        GROUP BY a.CHECK_DATE, CAST(a.CHECK_DATE AS DATE)
    ORDER BY 2 
          
    INTO :opDESCRIPTION, :vCount, :opDate, :vDate, :opTOTAL
    DO
    BEGIN
        IF (vCount = 0 AND vDate <= ipDATE) THEN
        BEGIN
            vTotal = opTOTAL;

            IF (vDate = ipDATE) THEN
	            SUSPEND;
        END ELSE 
        BEGIN
            IF ((vCount IN (2, 3, 4, 5))) THEN
                vTotal = vTotal - opTotal;
            ELSE
                vTotal = vTotal + opTOTAL;
            
            IF (vDate = ipDATE) THEN
	            SUSPEND;
        END
    END

    opDate = ipDate;
    opDescription = 'Current Petty Cash Total';
    opTotal = vTotal;
    
    SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE WSF_CASH_DRAWER_VALUES_CASH TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SP_CREATE_STOCK
 (IPSTOCK_BEING_CREATED BIGINT, 
  IPQUANTITY_CREATED INTEGER, 
  IPSTORE_ID INTEGER, 
  IPUSER_ID BIGINT)
AS
DECLARE VARIABLE vSubID BIGINT; 
DECLARE VARIABLE vQuantity DOUBLE PRECISION;
BEGIN
  IF (NOT EXISTS(SELECT PRODUCT_ID FROM HS_STOCK_CREATE_SETTINGS WHERE PRODUCT_ID = :ipSTOCK_BEING_CREATED)) THEN
    EXCEPTION EXC_STOCK_CREATE 'Can not create stock, product not found';
    
  FOR 
    SELECT SUB_PRODUCT_ID, QUANTITY
    FROM HS_STOCK_CREATE_SETTINGS
    WHERE PRODUCT_ID = :ipSTOCK_BEING_CREATED
    INTO :vSubID, :vQuantity
  DO
  BEGIN
    
    UPDATE HS_STOCKCONTROL SCR
    SET SCR.TOTAL_AVAILABLE = SCR.TOTAL_AVAILABLE - (:vQuantity * :ipQUANTITY_CREATED)
    WHERE scr.ITEM_ID = :vSubID AND scr.STORE_ID = :ipSTORE_ID;
    
    
    INSERT INTO HS_STOCK_OUT (STOCK_ID, USER_ID, QUANTITY, REASON, OUT_DATE, REPLICATED, STORE_ID, TILL_ID)
    VALUES 
    (
        :vSubID, 
        :ipUSER_ID, 
        CAST(:vQuantity * :ipQUANTITY_CREATED AS INTEGER), 
        'Stock Creation', 
        CURRENT_TIMESTAMP , 
        0, 
        :ipSTORE_ID, 
        1
    );
  END
   
  
  UPDATE HS_STOCKCONTROL SC
  SET SC.TOTAL_AVAILABLE = SC.TOTAL_AVAILABLE + :ipQUANTITY_CREATED
  WHERE SC.ITEM_ID = :ipSTOCK_BEING_CREATED AND SC.STORE_ID = :ipSTORE_ID;
   
  
  INSERT INTO HS_STOCK_IN (STOCK_ID, USER_ID, QUANTITY, IN_DATE, STORE_ID, REPLICATED, TILL_ID)
  VALUES 
  (
    :ipSTOCK_BEING_CREATED, 
    :ipUSER_ID, 
    :ipQUANTITY_CREATED, 
    CURRENT_TIMESTAMP , 
    :ipSTORE_ID, 
    0, 
    1
  );
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SP_CREATE_STOCK TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_SICK_RECORDS_INS
 (IPUSER_ID BIGINT, 
  IPDATE_STARTED TIMESTAMP, 
  IPDATE_FINISHED TIMESTAMP, 
  IPDATE_NOTIFIED TIMESTAMP, 
  IPRETURN_INTERVIEW_COMPLETED CHAR(1) CHARACTER SET UTF8, 
  IPRETURN_INTERVIEWER BIGINT, 
  IPNOTES BLOB SUB_TYPE 1 , 
  IPREASON_CITED VARCHAR(500) CHARACTER SET UTF8, 
  IPCERTIFICATE CHAR(1) CHARACTER SET UTF8, 
  IPPRE_BOOKED CHAR(1) CHARACTER SET UTF8, 
  IPPROPERTIES BIGINT)
RETURNS
 (OPNEWID BIGINT)
AS
BEGIN
  opNEWID = GEN_ID(GEN_STAFF_SICK_ID, 1);

  INSERT INTO STAFF_SICK_RECORDS (
    ID,
    USER_ID,
    DATE_STARTED,
    DATE_FINISHED,
    DATE_NOTIFIED,
    RETURN_INTERVIEW_COMPLETED,
    RETURN_INTERVIEWER,
    NOTES,
    REASON_CITED,
    CERTIFICATE,
    PRE_BOOKED,
    PROPERTIES
  ) VALUES (
    :opNEWID,
    :ipUSER_ID,
    :ipDATE_STARTED,
    :ipDATE_FINISHED,
    :ipDATE_NOTIFIED,
    :ipRETURN_INTERVIEW_COMPLETED,
    :ipRETURN_INTERVIEWER,
    :ipNOTES,
    :ipREASON_CITED,
    :ipCERTIFICATE,
    :ipPRE_BOOKED,
    :ipPROPERTIES
  );

  SUSPEND;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_SICK_RECORDS_INS TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_SICK_RECORDS_UPD
 (IPID BIGINT, 
  IPUSER_ID BIGINT, 
  IPDATE_STARTED TIMESTAMP, 
  IPDATE_FINISHED TIMESTAMP, 
  IPDATE_NOTIFIED TIMESTAMP, 
  IPRETURN_INTERVIEW_COMPLETED CHAR(1) CHARACTER SET UTF8, 
  IPRETURN_INTERVIEWER BIGINT, 
  IPNOTES BLOB SUB_TYPE 1 , 
  IPREASON_CITED VARCHAR(500) CHARACTER SET UTF8, 
  IPCERTIFICATE CHAR(1) CHARACTER SET UTF8, 
  IPPRE_BOOKED CHAR(1) CHARACTER SET UTF8, 
  IPPROPERTIES BIGINT)
AS
BEGIN
  IF (NOT EXISTS(SELECT ID FROM STAFF_SICK_RECORDS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_SPGEN_ERROR 'Record does not exist in table STAFF_SICK_RECORDS';

  UPDATE STAFF_SICK_RECORDS
  SET USER_ID = :ipUSER_ID,
    DATE_STARTED = :ipDATE_STARTED,
    DATE_FINISHED = :ipDATE_FINISHED,
    DATE_NOTIFIED = :ipDATE_NOTIFIED,
    RETURN_INTERVIEW_COMPLETED = :ipRETURN_INTERVIEW_COMPLETED,
    RETURN_INTERVIEWER = :ipRETURN_INTERVIEWER,
    NOTES = :ipNOTES,
    REASON_CITED = :ipREASON_CITED,
    CERTIFICATE = :ipCERTIFICATE,
    PRE_BOOKED = :ipPRE_BOOKED,
    PROPERTIES = :ipPROPERTIES
  WHERE ID = :ipID;
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_SICK_RECORDS_UPD TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_SICK_RECORDS_GET
 (IPID BIGINT)
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPDATE_STARTED TIMESTAMP, 
  OPDATE_FINISHED TIMESTAMP, 
  OPDATE_NOTIFIED TIMESTAMP, 
  OPRETURN_INTERVIEW_COMPLETED CHAR(1) CHARACTER SET UTF8, 
  OPRETURN_INTERVIEWER BIGINT, 
  OPNOTES BLOB SUB_TYPE 1 , 
  OPREASON_CITED VARCHAR(500) CHARACTER SET UTF8, 
  OPCERTIFICATE CHAR(1) CHARACTER SET UTF8, 
  OPPRE_BOOKED CHAR(1) CHARACTER SET UTF8, 
  OPPROPERTIES BIGINT)
AS
BEGIN
  FOR
    SELECT a.ID, a.USER_ID, a.DATE_STARTED, a.DATE_FINISHED, a.DATE_NOTIFIED, a.RETURN_INTERVIEW_COMPLETED, a.RETURN_INTERVIEWER, a.NOTES, a.REASON_CITED, a.CERTIFICATE, a.PRE_BOOKED, a.PROPERTIES
    FROM STAFF_SICK_RECORDS a
    WHERE (a.ID = :ipID)
    INTO :opID, :opUSER_ID, :opDATE_STARTED, :opDATE_FINISHED, :opDATE_NOTIFIED, :opRETURN_INTERVIEW_COMPLETED, :opRETURN_INTERVIEWER, :opNOTES, :opREASON_CITED, :opCERTIFICATE, :opPRE_BOOKED, :opPROPERTIES
  DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_SICK_RECORDS_GET TO PUBLIC;


SET TERM ^ ; 

CREATE OR ALTER PROCEDURE SPSTAFF_SICK_RECORDS_ALL
RETURNS
 (OPID BIGINT, 
  OPUSER_ID BIGINT, 
  OPDATE_STARTED TIMESTAMP, 
  OPDATE_FINISHED TIMESTAMP, 
  OPDATE_NOTIFIED TIMESTAMP, 
  OPRETURN_INTERVIEW_COMPLETED CHAR(1) CHARACTER SET UTF8, 
  OPRETURN_INTERVIEWER BIGINT, 
  OPNOTES BLOB SUB_TYPE 1 , 
  OPREASON_CITED VARCHAR(500) CHARACTER SET UTF8, 
  OPCERTIFICATE CHAR(1) CHARACTER SET UTF8, 
  OPPRE_BOOKED CHAR(1) CHARACTER SET UTF8, 
  OPPROPERTIES BIGINT)
AS
BEGIN
  FOR
    SELECT a.ID, a.USER_ID, a.DATE_STARTED, a.DATE_FINISHED, a.DATE_NOTIFIED, a.RETURN_INTERVIEW_COMPLETED, a.RETURN_INTERVIEWER, a.NOTES, a.REASON_CITED, a.CERTIFICATE, a.PRE_BOOKED, a.PROPERTIES
    FROM STAFF_SICK_RECORDS a
    INTO :opID, :opUSER_ID, :opDATE_STARTED, :opDATE_FINISHED, :opDATE_NOTIFIED, :opRETURN_INTERVIEW_COMPLETED, :opRETURN_INTERVIEWER, :opNOTES, :opREASON_CITED, :opCERTIFICATE, :opPRE_BOOKED, :opPROPERTIES
  DO
  BEGIN
    SUSPEND;
  END
END^

SET TERM ; ^ 


GRANT EXECUTE ON PROCEDURE SPSTAFF_SICK_RECORDS_ALL TO PUBLIC;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_HEAVEN_STORES_STOCK FOR HEAVEN_STORES ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF (NEW.ENFORCE_STOCK_LEVELS IS NULL) THEN
		NEW.ENFORCE_STOCK_LEVELS = 'N';
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_MEMBER_UPDATED FOR STAFF_MEMBERS ACTIVE BEFORE UPDATE POSITION 0
 AS 
BEGIN 
	NEW.LAST_UPDATED = CURRENT_TIMESTAMP;
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INVOICE_ITEMS_STATUS FOR WS_INVOICE_ITEMS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ITEM_STATUS IS NULL) THEN
        NEW.ITEM_STATUS = 0;
END^

SET TERM ; ^


CREATE GENERATOR GEN_TREAT_TO_THER_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TREAT_TO_THERE_ID FOR WS_TREATMENT_TO_THERAPIST ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_TREAT_TO_THER_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_CAMPAIGN_COUNTRY_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_CAMPAIGNS_COUNTRY_ID FOR WS_CAMPAIGNS_COUNTRIES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_CAMPAIGN_COUNTRY_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_AUTH_DATETIME FOR STAFF_LEAVE ACTIVE BEFORE INSERT OR UPDATE POSITION 5
 AS 
BEGIN 
  IF (NEW.STATUS IS NULL) THEN
    NEW.STATUS = 0;
    
    
	IF (OLD.AUTHORISED_BY IS NULL OR OLD.AUTHORISED_BY = -1 AND NEW.AUTHORISED_BY >= 0) THEN
        NEW.AUTHORISED_DATE = CURRENT_TIMESTAMP;

	IF (OLD.GRANTED_BY IS NULL OR OLD.GRANTED_BY = -1 AND NEW.GRANTED_BY >= 0) THEN
        NEW.APPROVED_DATE = CURRENT_TIMESTAMP;
END^

SET TERM ; ^


CREATE GENERATOR GEN_EXPORTABLE_CONTENT_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_EXPORTABLE_INSERT FOR EXPORTABLE_CONTENT ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_EXPORTABLE_CONTENT_ID, 1);
        
    IF (NEW.DESCRIPTION IS NULL OR NEW.DESCRIPTION = '') THEN
        NEW.DESCRIPTION = NEW.COLUMN_NAME;
END^

SET TERM ; ^


CREATE GENERATOR GEN_SKU_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_COST_SKU FOR WS_PRODUCTS_COST_SIZE ACTIVE BEFORE INSERT POSITION 100
 AS 
BEGIN 
    IF (NEW.SKU IS NULL OR NEW.SKU = '') THEN
    BEGIN
        NEW.SKU = 'SKU' || GEN_ID(GEN_SKU_ID, 1);    
    END
END^

SET TERM ; ^


CREATE GENERATOR GEN_ANNOUNCEMENTS_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_ANNOUNCEMENTS_ID FOR WS_ANNOUNCEMENTS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_ANNOUNCEMENTS_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_WEBSITE_DIST_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WEBSITE_DIST_ID FOR WEBSITE_DISTRIBUTORS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_WEBSITE_DIST_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_WEBSITES_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WEBSITES_ID FOR WEBSITES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_WEBSITES_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_DOWNLOAD_STATS_ID FOR WS_DOWNLOAD_STATS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_DOWNLOAD_STATS_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_HASH_TAG_PAGES_ID FOR WS_HASH_TAG_PAGES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_WS_HASH_TAG_PAGES, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_BASKET_PRICE_COLUMN FOR WS_SHOPPINGBASKET ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF (NEW.PRICE_COLUMN IS NULL) THEN
	BEGIN
	  NEW.PRICE_COLUMN = 1;
	END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_HASH_TAGS_ID FOR WS_HASH_TAGS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_WS_HASH_TAGS, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_PROD_COST_TYPE_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_COST_SIZE_ID FOR WS_PRODUCT_COST_TYPE ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_PROD_COST_TYPE_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_LICENCES_ID FOR WS_LICENCES ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_LICENCES_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_WS_PRODUCT_GROUP_TYPE_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PROD_GROUP_TYPE_ID FOR WS_PRODUCT_GROUP_TYPE ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is null) then
        NEW.ID = GEN_ID(GEN_WS_PRODUCT_GROUP_TYPE_ID, 1);
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PRODUCT_GROUP_ID FOR WS_PRODUCT_GROUP ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    if (NEW.ID is NULL) then
        NEW.ID = GEN_ID(GEN_WS_PRODUCT_GROUP_ID, 1);
END^

SET TERM ; ^


CREATE GENERATOR GEN_TICKET_DEPARTMENT;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TICKET_DEPARTMENT_ID FOR WS_TICKET_DEPARTMENT ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
	BEGIN
        NEW.ID = GEN_ID(GEN_TICKET_DEPARTMENT, 1);
	END 
END^

SET TERM ; ^


CREATE GENERATOR GEN_TICKET_PRIORITY_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TICKET_PRIORITY_ID FOR WS_TICKET_PRIORITY ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
	BEGIN
        NEW.ID = GEN_ID(GEN_TICKET_PRIORITY_ID, 1);
	END 
END^

SET TERM ; ^


CREATE GENERATOR GEN_TICKET_STATUS_ID;




SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TICKET_STATUS_ID FOR WS_TICKET_STATUS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
	BEGIN
        NEW.ID = GEN_ID(GEN_TICKET_STATUS_ID, 1);
	END 
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_TICKET_HEADER_ID FOR WS_TICKET_HEADER ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
	IF (NEW.ID IS NULL) THEN
	BEGIN
        NEW.ID = GEN_ID(GEN_TICKET_HEADER, 1);
	END 
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_ST_AUDIT_UPD_ST_CONTROL FOR HS_STOCK_AUDIT ACTIVE AFTER INSERT POSITION 0
 AS 
BEGIN 
  if ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (new.STOCK_DIFFERENCE <> 0) THEN
    BEGIN
        UPDATE HS_STOCKCONTROL 
        SET TOTAL_AVAILABLE = new.QUANTITY 
        WHERE ITEM_ID = new.STOCK_ID 
          AND STORE_ID = new.STORE_ID
          AND TILL_ID = new.TILL_ID;
    END
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_STAFF_RECORDS_INSERT FOR WS_MEMBERS ACTIVE BEFORE UPDATE POSITION 100
 AS 
BEGIN 
  IF ((NEW.MEMBER_LEVEL > 5) AND (NOT EXISTS(SELECT ao.EMPLOYEE_ID FROM WS_APPOINTMENT_OPTIONS ao WHERE ao.EMPLOYEE_ID = NEW.ID))) THEN
  BEGIN
    INSERT INTO WS_APPOINTMENT_OPTIONS (EMPLOYEE_ID, ALLOW_MONDAY, ALLOW_TUESDAY, ALLOW_WEDNESDAY, ALLOW_THURSDAY, ALLOW_FRIDAY, ALLOW_SATURDAY, ALLOW_SUNDAY, START_TIME, END_TIME, LUNCH_START, LUNCH_DURATION, ALLOW_BOOK_CURRENT_DAY, PUBLIC_DIARY, APPOINTMENT_GROUP)
    VALUES(new.ID, 'F', 'T', 'T', 'T', 'T', 'T', 'F', 9.00, 17.00, 12.25, 45, 'F', 'T', 1);
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_BASKET_DELETE_SAVED FOR WS_SHOPPINGBASKET ACTIVE AFTER DELETE POSITION 0
 AS 
BEGIN 
	DELETE FROM POS_SAVED_ORDERS
	WHERE BASKET_ID = old.BASKETID;
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_INV_PROCESS_STATUS_CHECK FOR WS_INVOICE ACTIVE BEFORE UPDATE POSITION 0
 AS
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    IF (OLD.PROCESS_STATUS <> NEW.PROCESS_STATUS) THEN
    BEGIN
        IF (OLD.PROCESS_STATUS = 2) THEN
            EXCEPTION EXC_INV_PROCESS_STATUS_CHANGE;
    END
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_MASTER_ID_UPDATE FOR WS_APPOINTMENTS ACTIVE BEFORE UPDATE POSITION 50
 AS 
BEGIN 
	IF (NEW.ID <> OLD.ID) THEN
	BEGIN
	  UPDATE WS_APPOINTMENTS ap
	  SET ap.MASTER_APPOINTMENT = new.ID
	  where ap.MASTER_APPOINTMENT = old.ID;
	END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_THERAPISTS_DEFAULT_GROUP FOR WS_APPOINTMENT_OPTIONS ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	if (new.APPOINTMENT_GROUP is null) THEN
        new.APPOINTMENT_GROUP = -1;
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_SEO_DATA_PAGE_VIEWS_HASH FOR SEO_DATA_PAGE_VIEWS ACTIVE BEFORE INSERT OR UPDATE POSITION 1000
 AS 
BEGIN 
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN    
	NEW.URL_HASH = HASH(LOWER(SUBSTRING(NEW.URL FROM POSITION('/', NEW.URL, 10))));
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PRODUCTS_DEFAULTS FOR WS_PRODUCTS ACTIVE BEFORE INSERT POSITION 0
 AS 
BEGIN 
    IF (new.BEST_SELLER is null) THEN
        new.BEST_SELLER = 'N';
        
    IF (new.NEW_PRODUCT is null) THEN
        new.NEW_PRODUCT = 'N';
        
    IF (new.FEATURED_PRODUCT is null) THEN
        new.FEATURED_PRODUCT = 'N';
    
    IF (new.CAROUSEL is null) THEN
        new.CAROUSEL = 'N';
        
    IF (NEW.IS_DELETED IS NULL) THEN
        NEW.IS_DELETED = 'N';
        
    NEW.FREE_PRODUCT = 'N';
    NEW.FREE_SHIPPING = 'N';
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_WS_SALONS_TYPE_NULL FOR WS_SALONS ACTIVE BEFORE INSERT OR UPDATE POSITION 100
 AS 
BEGIN 
  IF (NEW.SALON_TYPE IS NULL) THEN
  BEGIN
    new.SALON_TYPE = 0;
  END
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TR_PRODUCTS_PAGE_LINK FOR WS_PRODUCTS ACTIVE BEFORE INSERT OR UPDATE POSITION 0
 AS 
BEGIN 
	IF (NEW.PAGE_LINK IS NULL) THEN
        NEW.PAGE_LINK = '';
END^

SET TERM ; ^


GRANT USAGE ON GENERATOR GEN_TREAT_TO_THER_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_CAMPAIGN_COUNTRY_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_EXPORTABLE_CONTENT_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_SKU_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_ANNOUNCEMENTS_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_WEBSITE_DIST_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_WEBSITES_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_PROD_COST_TYPE_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_WS_PRODUCT_GROUP_TYPE_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_TICKET_DEPARTMENT TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_TICKET_PRIORITY_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_TICKET_STATUS_ID TO USER PUBLIC;
GRANT USAGE ON GENERATOR GEN_STAFF_LEAVE_ID TO USER PUBLIC;



ALTER TABLE WS_ANNOUNCEMENTS DROP CONSTRAINT INTEG_462;


ALTER TABLE WS_ANNOUNCEMENTS ADD CONSTRAINT PK_WS_ANNOUNCEMENTS_ID PRIMARY KEY (ID);


