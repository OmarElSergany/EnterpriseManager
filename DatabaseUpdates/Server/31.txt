SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_1
AS
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vDate DATE;
  DECLARE VARIABLE vHour INTEGER;
  DECLARE VARIABLE vQuarterHour INTEGER;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
  EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_1') RETURNING_VALUES :vCount;
    
  IF (vCount > 0) THEN
    EXIT;
  
  -- START HOURLY DATA
  FOR
    SELECT CAST(seo.CREATED AS DATE), 
    EXTRACT(HOUR FROM seo.CREATED),
    floor(EXTRACT(MINUTE FROM seo.CREATED) / 15) + 1,
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 1
      AND seo.CREATED <= (CURRENT_TIMESTAMP - ((1.0000 / 1440) * 30))
    GROUP BY 1, 2, 3
    INTO :vDate, :vHour, :vQuarterHour, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE CAST(pv.VISITED AS DATE) = :vDate AND
        EXTRACT(HOUR FROM pv.VISITED) = :vHour AND
        (floor(EXTRACT(MINUTE FROM pv.VISITED) / 15) + 1) = :vQuarterHour
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT h.HOURLY_DATE FROM SEO_REPORT_HOURLY h WHERE h.HOURLY_DATE = :vDate AND h.HOURLY_HOUR = :vHour AND h.HOURLY_QUARTER = :vQuarterHour)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_HOURLY (HOURLY_DATE, HOURLY_HOUR, HOURLY_QUARTER, HOURLY_TOTALVISITS, HOURLY_HUMANVISITS, HOURLY_MOBILEVISITS, HOURLY_BOTVISITS, HOURLY_BOUNCED, HOURLY_TOTALPAGES, HOURLY_TOTAL_SALES, HOURLY_CONVERSIONS, HOURLY_MOBILECONVERSIONS, HOURLY_REFERUNKNOWN, HOURLY_REFERDIRECT, HOURLY_REFERAL, HOURLY_REFERORGANIC, HOURLY_REFERBING, HOURLY_REFERGOOGLE, HOURLY_REFERYAHOO, HOURLY_REFERFACEBOOK, HOURLY_REFERTWITTER)
        VALUES (:vDate, :vHour, :vQuarterHour, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_HOURLY SET 
        HOURLY_TOTALVISITS = HOURLY_TOTALVISITS + :vTotalVisits, 
        HOURLY_HUMANVISITS = HOURLY_HUMANVISITS + :vHumans, 
        HOURLY_MOBILEVISITS = HOURLY_MOBILEVISITS + :vMobile, 
        HOURLY_BOTVISITS = HOURLY_BOTVISITS + :vBot, 
        HOURLY_BOUNCED = HOURLY_BOUNCED + :vBounce, 
        HOURLY_TOTALPAGES = HOURLY_TOTALPAGES + :vPageCount, 
        HOURLY_TOTAL_SALES = HOURLY_TOTAL_SALES + :vSales, 
        HOURLY_CONVERSIONS = HOURLY_CONVERSIONS + :vConvert, 
        HOURLY_MOBILECONVERSIONS = HOURLY_MOBILECONVERSIONS + :vMobileConv, 
        HOURLY_REFERUNKNOWN = HOURLY_REFERUNKNOWN + :vRefUnknown, 
        HOURLY_REFERDIRECT = HOURLY_REFERDIRECT + :vRefDirect, 
        HOURLY_REFERAL = HOURLY_REFERAL + :vRefReferal, 
        HOURLY_REFERORGANIC = HOURLY_REFERORGANIC + :vRefOrganic, 
        HOURLY_REFERBING = HOURLY_REFERBING + :vRefBing, 
        HOURLY_REFERGOOGLE = HOURLY_REFERGOOGLE + :vRefGoogle, 
        HOURLY_REFERYAHOO = HOURLY_REFERYAHOO + :vRefYahoo, 
        HOURLY_REFERFACEBOOK = HOURLY_REFERFACEBOOK + :vRefFaceBook, 
        HOURLY_REFERTWITTER = HOURLY_REFERTWITTER + :vRefTwitter
        WHERE HOURLY_DATE = :vDate AND HOURLY_HOUR = :vHour AND HOURLY_QUARTER = :vQuarterHour;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 2
  WHERE us.PROCESS_STATUS = 1
      AND us.SEO_DATA_ID IN
        (
            SELECT seo.ID
            FROM SEO_DATA_PAGE_VIEWS pv
              JOIN SEO_DATA seo ON (seo.ID = pv.SEO_DATA_ID)
              JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
            WHERE seo.CREATED <= (CURRENT_TIMESTAMP - ((1.0000 / 1440) * 30)) AND
                us.PROCESS_STATUS = 1 
        );
  -- END HOURLY DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_1 TO PUBLIC;


SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_2
AS
DECLARE VARIABLE vID BIGINT;
  DECLARE VARIABLE vCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_2') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;
  
  -- START REFERRER DATA
  FOR
    SELECT seo.INITIAL_REFERRER_ID, COUNT(seo.INITIAL_REFERRER_ID)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 2
    GROUP BY seo.INITIAL_REFERRER_ID
    INTO :vID, :vCount
  DO
  BEGIN
    UPDATE SEO_INITIAL_REFERRER ir
    SET ir.USAGE_COUNT = COALESCE(ir.USAGE_COUNT, 0) + :vCount
    WHERE ir.ID = :vID;
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 3
  WHERE us.PROCESS_STATUS = 2;
  -- END REFERRER DATA

  -- START USER AGENT DATA 
  FOR
    SELECT seo.USER_AGENT_ID, COUNT(seo.USER_AGENT_ID)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 3
    GROUP BY seo.USER_AGENT_ID
    INTO :vID, :vCount
  DO
  BEGIN
    UPDATE SEO_USER_AGENT ua
    SET ua.USAGE_COUNT = COALESCE(ua.USAGE_COUNT, 0) + :vCount
    WHERE ua.ID = :vID;
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 5
  WHERE us.PROCESS_STATUS = 3;
  -- END USER AGENT DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_2 TO PUBLIC;



SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_3
AS
  DECLARE VARIABLE vYear INTEGER;
  DECLARE VARIABLE vMonth INTEGER;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vPageData VARCHAR(1000);
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_3') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;
      
  -- PAGE VIEW DATA
  FOR
    SELECT EXTRACT(YEAR FROM seo.created),
        EXTRACT(month from seo.CREATED),
        SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
        SUM(CASE seo.IS_BOT WHEN 'Y' THEN 1 ELSE 0 END),
        LOWER(SUBSTRING(pv.URL FROM POSITION('/', pv.URL, 10)))
    FROM SEO_DATA_PAGE_VIEWS pv
      JOIN SEO_DATA seo ON (seo.ID = pv.SEO_DATA_ID)
      JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE seo.CREATED <= (CURRENT_TIMESTAMP - ((1.0000 / 1440) * 120)) AND
        us.PROCESS_STATUS = 4 AND
        (LOWER(pv.URL) NOT LIKE '%/controls/%' 
            AND LOWER(pv.URL) NOT LIKE '%/error/%'
            AND LOWER(pv.URL) NOT LIKE '%/licencevalidate%')
    GROUP BY 1, 2, 5
    ORDER BY 2 DESC, 3 DESC
    INTO :vYear, :vMonth, :vHumans, :vBot, :vPageData
  DO
  BEGIN
    IF (NOT EXISTS(SELECT PAGE_DATA_HASH FROM SEO_REPORT_PAGE_DATA WHERE PAGE_DATA_HASH = HASH(:vPageData) AND PAGE_DATA_YEAR = :vYear AND PAGE_DATA_MONTH = :vMonth)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_PAGE_DATA (PAGE_DATA_HASH, PAGE_DATA_URL, PAGE_DATA_YEAR, PAGE_DATA_MONTH, PAGE_DATA_HUMAN_COUNT, PAGE_DATA_BOT_COUNT)
         VALUES (HASH(:vPageData), :vPageData, :vYear, :vMonth, :vHumans, :vBot);
    END ELSE
    BEGIN
        UPDATE SEO_REPORT_PAGE_DATA
        SET PAGE_DATA_HUMAN_COUNT = PAGE_DATA_HUMAN_COUNT + :vHumans,
            PAGE_DATA_BOT_COUNT = PAGE_DATA_BOT_COUNT + :vBOT
        WHERE PAGE_DATA_HASH = HASH(:vPageData) AND PAGE_DATA_YEAR = :vYear AND PAGE_DATA_MONTH = :vMonth;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 10
  WHERE us.PROCESS_STATUS = 4
    AND us.SEO_DATA_ID IN
        (
            SELECT seo.ID
            FROM SEO_DATA_PAGE_VIEWS pv
              JOIN SEO_DATA seo ON (seo.ID = pv.SEO_DATA_ID)
              JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
            WHERE seo.CREATED <= (CURRENT_TIMESTAMP - ((1.0000 / 1440) * 120)) AND
                us.PROCESS_STATUS = 4 
        );
  -- END PAGE VIEW DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_3 TO PUBLIC;




SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_4
AS
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vYear INTEGER;
  DECLARE VARIABLE vMonth INTEGER;
  DECLARE VARIABLE vCity BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vCurrency VARCHAR(3);
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_4') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;
  
  -- START SALES DATA, if no city it stays at this status until a valid city is found
  FOR
    SELECT seo.CITY_ID, EXTRACT(YEAR FROM seo.CREATED), EXTRACT(MONTH FROM seo.CREATED), COUNT(seo.ID), seo.SALE_CURRENCY, SUM(COALESCE(seo.SALE_AMOUNT, 0.00))
    FROM SEO_DATA seo
      JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE COALESCE(seo.SALE_AMOUNT, 0.00) > 0.00
      AND (us.PROCESS_STATUS = 5 OR us.PROCESS_STATUS = 11)
      AND seo.CITY_ID > 0
    GROUP BY 1, 2, 3, seo.SALE_CURRENCY
    ORDER BY 2 DESC, 1 DESC  
    INTO :vCity, :vYear, :vMonth, :vCount, :vCurrency, :vSales
  DO
  BEGIN
    IF (NOT EXISTS(SELECT SALES_CITY FROM SEO_REPORT_SALES WHERE SALES_CITY = :vCity AND SALES_YEAR = :vYear AND SALES_MONTH = :vMonth AND SALES_CURRENCY = :vCurrency)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_SALES (SALES_CITY, SALES_YEAR, SALES_MONTH, SALES_COUNT, SALES_CURRENCY, SALES_AMOUNT)
        VALUES (:vCity, :vYear, :vMonth, :vCount, :vCurrency, :vSales);
    END ELSE
    BEGIN
        UPDATE SEO_REPORT_SALES
        SET SALES_AMOUNT = SALES_AMOUNT + :vSales,
            SALES_COUNT = SALES_COUNT + :vCount
        WHERE SALES_CITY = :vCity AND SALES_YEAR = :vYear AND SALES_MONTH = :vMonth AND SALES_CURRENCY = :vCurrency;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 6
  WHERE us.PROCESS_STATUS = 5
    AND us.SEO_DATA_ID NOT IN 
    (
        SELECT seo.ID
        FROM SEO_DATA seo
          JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
        WHERE us.PROCESS_STATUS = 5
          AND seo.CITY_ID <= 0    
    );
    
  
  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 10
  WHERE us.PROCESS_STATUS = 11
    AND us.SEO_DATA_ID NOT IN 
    (
        SELECT seo.ID
        FROM SEO_DATA seo
          JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
        WHERE us.PROCESS_STATUS = 11
          AND seo.CITY_ID <= 0    
    );

  -- END SALES DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_4 TO PUBLIC;



SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_5
AS
  DECLARE VARIABLE vYear INTEGER;
  DECLARE VARIABLE vMonth INTEGER;
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vCity BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_5') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- START LOCATION DATA, bot's not required for this stage
  FOR
    SELECT seo.CITY_ID, EXTRACT(YEAR FROM seo.CREATED), EXTRACT(MONTH FROM seo.CREATED), COUNT(seo.ID)
    FROM SEO_DATA seo
      JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 6
      AND seo.IS_BOT = 'N'
    GROUP BY seo.CITY_ID, 2, 3
    INTO :vCity, :vYear, :vMonth, :vCount
  DO
  BEGIN
    IF (NOT EXISTS(SELECT LOCATION_CITY FROM SEO_REPORT_LOCATION WHERE LOCATION_CITY = :vCity AND LOCATION_YEAR = :vYear AND LOCATION_MONTH = :vMonth)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_LOCATION (LOCATION_CITY, LOCATION_YEAR, LOCATION_MONTH, LOCATION_COUNT)
        VALUES (:vCity, :vYear, :vMonth, :vCount);
    END ELSE
    BEGIN
        UPDATE SEO_REPORT_LOCATION
        SET LOCATION_COUNT = LOCATION_COUNT + :vCount
        WHERE LOCATION_CITY = :vCity AND LOCATION_YEAR = :vYear AND LOCATION_MONTH = :vMonth;
    END
  END

  -- NOT A BOT, move to the next status
  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 7
  WHERE us.PROCESS_STATUS = 6;
  -- END LOCATION DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_5 TO PUBLIC;


SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_6
AS
  DECLARE VARIABLE vDate DATE;
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_6') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- START DAILY DATA
  FOR
    SELECT CAST(seo.CREATED AS DATE), 
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 7 AND seo.CREATED <= CURRENT_TIMESTAMP -1 
    GROUP BY 1
    INTO :vDate, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE CAST(pv.VISITED AS DATE) = :vDate
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT d.DAILY_DATE FROM SEO_REPORT_DAILY d WHERE d.DAILY_DATE = :vDate)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_DAILY (DAILY_DATE, DAILY_TOTALVISITS, DAILY_HUMANVISITS, DAILY_MOBILEVISITS, DAILY_BOTVISITS, DAILY_BOUNCED, DAILY_TOTALPAGES, DAILY_TOTAL_SALES, DAILY_CONVERSIONS, DAILY_MOBILECONVERSIONS, DAILY_REFERUNKNOWN, DAILY_REFERDIRECT, DAILY_REFERAL, DAILY_REFERORGANIC, DAILY_REFERBING, DAILY_REFERGOOGLE, DAILY_REFERYAHOO, DAILY_REFERFACEBOOK, DAILY_REFERTWITTER)
        VALUES (:vDate, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_DAILY SET 
        DAILY_TOTALVISITS = DAILY_TOTALVISITS + :vTotalVisits, 
        DAILY_HUMANVISITS = DAILY_HUMANVISITS + :vHumans, 
        DAILY_MOBILEVISITS = DAILY_MOBILEVISITS + :vMobile, 
        DAILY_BOTVISITS = DAILY_BOTVISITS + :vBot, 
        DAILY_BOUNCED = DAILY_BOUNCED + :vBounce, 
        DAILY_TOTALPAGES = DAILY_TOTALPAGES + :vPageCount, 
        DAILY_TOTAL_SALES = DAILY_TOTAL_SALES + :vSales, 
        DAILY_CONVERSIONS = DAILY_CONVERSIONS + :vConvert, 
        DAILY_MOBILECONVERSIONS = DAILY_MOBILECONVERSIONS + :vMobileConv, 
        DAILY_REFERUNKNOWN = DAILY_REFERUNKNOWN + :vRefUnknown, 
        DAILY_REFERDIRECT = DAILY_REFERDIRECT + :vRefDirect, 
        DAILY_REFERAL = DAILY_REFERAL + :vRefReferal, 
        DAILY_REFERORGANIC = DAILY_REFERORGANIC + :vRefOrganic, 
        DAILY_REFERBING = DAILY_REFERBING + :vRefBing, 
        DAILY_REFERGOOGLE = DAILY_REFERGOOGLE + :vRefGoogle, 
        DAILY_REFERYAHOO = DAILY_REFERYAHOO + :vRefYahoo, 
        DAILY_REFERFACEBOOK = DAILY_REFERFACEBOOK + :vRefFaceBook, 
        DAILY_REFERTWITTER = DAILY_REFERTWITTER + :vRefTwitter
        WHERE DAILY_DATE = :vDate;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 8
  WHERE us.PROCESS_STATUS = 7
    AND us.SEO_DATA_ID IN
        (
            SELECT seo.ID
            FROM SEO_DATA_PAGE_VIEWS pv
              JOIN SEO_DATA seo ON (seo.ID = pv.SEO_DATA_ID)
              JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
            WHERE seo.CREATED <= (CURRENT_DATE -1) AND
                us.PROCESS_STATUS = 7 
        );
  -- END DAILY DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_6 TO PUBLIC;


SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_7
AS
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vYear INTEGER;
  DECLARE VARIABLE vMonth INTEGER;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_7') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- START MONTHLY DATA
  FOR
    SELECT EXTRACT(YEAR FROM seo.CREATED), 
    EXTRACT(MONTH FROM seo.CREATED),
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 8 AND 
        ((CAST(EXTRACT(YEAR FROM seo.CREATED) || (EXTRACT(MONTH FROM seo.CREATED) + 10) AS INTEGER) <= 
          CAST(EXTRACT(YEAR FROM CURRENT_DATE) || (EXTRACT(MONTH FROM CURRENT_DATE) + 10) AS INTEGER)))
    GROUP BY 1, 2
    INTO :vYear, :vMonth, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE EXTRACT(YEAR FROM pv.VISITED) = :vYear AND EXTRACT(MONTH FROM pv.VISITED) = :vMonth
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT w.MONTHLY_YEAR FROM SEO_REPORT_MONTHLY w WHERE w.MONTHLY_YEAR = :vYear AND w.MONTHLY_MONTH = :vMonth)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_MONTHLY (MONTHLY_YEAR, MONTHLY_MONTH, MONTHLY_TOTALVISITS, MONTHLY_HUMANVISITS, MONTHLY_MOBILEVISITS, MONTHLY_BOTVISITS, MONTHLY_BOUNCED, MONTHLY_TOTALPAGES, MONTHLY_TOTAL_SALES, MONTHLY_CONVERSIONS, MONTHLY_MOBILECONVERSIONS, MONTHLY_REFERUNKNOWN, MONTHLY_REFERDIRECT, MONTHLY_REFERAL, MONTHLY_REFERORGANIC, MONTHLY_REFERBING, MONTHLY_REFERGOOGLE, MONTHLY_REFERYAHOO, MONTHLY_REFERFACEBOOK, MONTHLY_REFERTWITTER)
        VALUES (:vYear, :vMonth, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_MONTHLY SET 
        MONTHLY_TOTALVISITS = MONTHLY_TOTALVISITS + :vTotalVisits, 
        MONTHLY_HUMANVISITS = MONTHLY_HUMANVISITS + :vHumans, 
        MONTHLY_MOBILEVISITS = MONTHLY_MOBILEVISITS + :vMobile, 
        MONTHLY_BOTVISITS = MONTHLY_BOTVISITS + :vBot, 
        MONTHLY_BOUNCED = MONTHLY_BOUNCED + :vBounce, 
        MONTHLY_TOTALPAGES = MONTHLY_TOTALPAGES + :vPageCount, 
        MONTHLY_TOTAL_SALES = MONTHLY_TOTAL_SALES + :vSales, 
        MONTHLY_CONVERSIONS = MONTHLY_CONVERSIONS + :vConvert, 
        MONTHLY_MOBILECONVERSIONS = MONTHLY_MOBILECONVERSIONS + :vMobileConv, 
        MONTHLY_REFERUNKNOWN = MONTHLY_REFERUNKNOWN + :vRefUnknown, 
        MONTHLY_REFERDIRECT = MONTHLY_REFERDIRECT + :vRefDirect, 
        MONTHLY_REFERAL = MONTHLY_REFERAL + :vRefReferal, 
        MONTHLY_REFERORGANIC = MONTHLY_REFERORGANIC + :vRefOrganic, 
        MONTHLY_REFERBING = MONTHLY_REFERBING + :vRefBing, 
        MONTHLY_REFERGOOGLE = MONTHLY_REFERGOOGLE + :vRefGoogle, 
        MONTHLY_REFERYAHOO = MONTHLY_REFERYAHOO + :vRefYahoo, 
        MONTHLY_REFERFACEBOOK = MONTHLY_REFERFACEBOOK + :vRefFaceBook, 
        MONTHLY_REFERTWITTER = MONTHLY_REFERTWITTER + :vRefTwitter
        WHERE MONTHLY_YEAR = :vYear AND MONTHLY_MONTH = :vMonth;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 9
  WHERE us.PROCESS_STATUS = 8;
  -- END MONTHLY DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_7 TO PUBLIC;


SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_8
AS
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vYear INTEGER;
  DECLARE VARIABLE vWeek INTEGER;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_8') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- START WEEKLY DATA
  FOR
    SELECT EXTRACT(YEAR FROM seo.CREATED), 
    EXTRACT(WEEK FROM seo.CREATED),
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 9 AND 
        (EXTRACT(YEAR FROM seo.CREATED) <= EXTRACT(YEAR FROM CURRENT_DATE) AND 
        (CAST(EXTRACT(YEAR FROM seo.CREATED) || EXTRACT(WEEK FROM seo.CREATED) AS INTEGER) <= 
          CAST(EXTRACT(YEAR FROM CURRENT_DATE) || EXTRACT(WEEK FROM CURRENT_DATE) AS INTEGER)))
    GROUP BY 1, 2
    INTO :vYear, :vWeek, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE EXTRACT(YEAR FROM pv.VISITED) = :vYear AND EXTRACT(WEEK FROM pv.VISITED) = :vWeek
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT w.WEEKLY_YEAR FROM SEO_REPORT_WEEKLY w WHERE w.WEEKLY_YEAR = :vYear AND w.WEEKLY_WEEK = :vWeek)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_WEEKLY (WEEKLY_YEAR, WEEKLY_WEEK, WEEKLY_TOTALVISITS, WEEKLY_HUMANVISITS, WEEKLY_MOBILEVISITS, WEEKLY_BOTVISITS, WEEKLY_BOUNCED, WEEKLY_TOTALPAGES, WEEKLY_TOTAL_SALES, WEEKLY_CONVERSIONS, WEEKLY_MOBILECONVERSIONS, WEEKLY_REFERUNKNOWN, WEEKLY_REFERDIRECT, WEEKLY_REFERAL, WEEKLY_REFERORGANIC, WEEKLY_REFERBING, WEEKLY_REFERGOOGLE, WEEKLY_REFERYAHOO, WEEKLY_REFERFACEBOOK, WEEKLY_REFERTWITTER)
        VALUES (:vYear, :vWeek, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_WEEKLY SET 
        WEEKLY_TOTALVISITS = WEEKLY_TOTALVISITS + :vTotalVisits, 
        WEEKLY_HUMANVISITS = WEEKLY_HUMANVISITS + :vHumans, 
        WEEKLY_MOBILEVISITS = WEEKLY_MOBILEVISITS + :vMobile, 
        WEEKLY_BOTVISITS = WEEKLY_BOTVISITS + :vBot, 
        WEEKLY_BOUNCED = WEEKLY_BOUNCED + :vBounce, 
        WEEKLY_TOTALPAGES = WEEKLY_TOTALPAGES + :vPageCount, 
        WEEKLY_TOTAL_SALES = WEEKLY_TOTAL_SALES + :vSales, 
        WEEKLY_CONVERSIONS = WEEKLY_CONVERSIONS + :vConvert, 
        WEEKLY_MOBILECONVERSIONS = WEEKLY_MOBILECONVERSIONS + :vMobileConv, 
        WEEKLY_REFERUNKNOWN = WEEKLY_REFERUNKNOWN + :vRefUnknown, 
        WEEKLY_REFERDIRECT = WEEKLY_REFERDIRECT + :vRefDirect, 
        WEEKLY_REFERAL = WEEKLY_REFERAL + :vRefReferal, 
        WEEKLY_REFERORGANIC = WEEKLY_REFERORGANIC + :vRefOrganic, 
        WEEKLY_REFERBING = WEEKLY_REFERBING + :vRefBing, 
        WEEKLY_REFERGOOGLE = WEEKLY_REFERGOOGLE + :vRefGoogle, 
        WEEKLY_REFERYAHOO = WEEKLY_REFERYAHOO + :vRefYahoo, 
        WEEKLY_REFERFACEBOOK = WEEKLY_REFERFACEBOOK + :vRefFaceBook, 
        WEEKLY_REFERTWITTER = WEEKLY_REFERTWITTER + :vRefTwitter
        WHERE WEEKLY_YEAR = :vYear AND WEEKLY_WEEK = :vWeek;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 4
  WHERE us.PROCESS_STATUS = 9;
  -- END WEEKLY DATA
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_8 TO PUBLIC;



SET TERM ^ ;
CREATE OR ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_9
AS
  DECLARE VARIABLE vCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_9') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- FINAL STAGE - DELETE SEO_DATA WHEN IT IS 1 YEAR OLD AND PROCESS_STATUS IS 10
  DELETE 
  FROM SEO_DATA
  WHERE ID IN
  (
    SELECT seo.ID 
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE seo.CREATED <= CURRENT_TIMESTAMP - 365
        AND us.PROCESS_STATUS = 10
  );
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE SEO_UPDATE_TOTALS_STAGE_9 TO PUBLIC;



SET TERM ^ ;
ALTER PROCEDURE WD$GEO_DECODE_IP (
    IPIPADDRESS WD$IP_ADDRESS1 )
RETURNS (
    OPID Bigint,
    OPCOUNTRY Varchar(3),
    OPCITY Varchar(200),
    OPREGION Varchar(3),
    OPPOSTCODE Varchar(30),
    OPLATITUDE Decimal(10,4),
    OPLONGITUDE Decimal(10,4),
    OPMETROCODE Varchar(3),
    OPAREACODE Varchar(3),
    OPNUMERIC Bigint,
    OPSTARTBLOCK Bigint,
    OPENDBLOCK Bigint )
AS
DECLARE VARIABLE vIPAddressPart VARCHAR(3);
  DECLARE VARIABLE vCount INTEGER = 0;
  DECLARE VARIABLE vTotal BIGINT = 0;
  DECLARE VARIABLE vPart BIGINT = 0;
BEGIN
  FOR
    SELECT opPART
    FROM WD$SPLITSTRING(:ipIPADDRESS, '.')
    INTO :vIPAddressPart
  DO
  BEGIN
    IF (vCount = 0) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 16777216;
    ELSE IF (vCount = 1) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 65536;
    ELSE IF (vCount = 2) THEN
        vPart = CAST(vIPAddressPart AS BIGINT) * 256;
    ELSE 
        vPart = CAST(vIPAddressPart AS BIGINT);
  
    --increase the COUNT
    vCount = vCount + 1;
    
    vTotal = vTotal + vPart;
  END

  opNUMERIC = vTotal;
    
  SELECT FIRST 1 c.WD$ID, c.WD$COUNTRY_CODE, ipc.WD$CITY, ipc.WD$REGION, 
    ipc.WD$POSTCODE, ipc.WD$LATITUDE, ipc.WD$LONGITUDE,
    ipc.WD$METRO_CODE, ipc.WD$AREA_CODE, c.WD$FROM_IP, c.WD$TO_IP
  FROM WD$IPTOCOUNTRY c
    LEFT JOIN WD$IPCITY ipc ON (ipc.WD$ID = c.WD$CITY_ID)
  WHERE (c.WD$FROM_IP <= :vTotal) AND (c.WD$TO_IP >= :vTotal)
  ORDER BY c.WD$VERSION
  INTO :opID, :opCOUNTRY, :opCITY, :opREGION, :opPOSTCODE, :opLATITUDE, :opLONGITUDE, :OPMETROCODE, :OPAREACODE, :opSTARTBLOCK, :opENDBLOCK;

  SUSPEND; 

END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE WD$GEO_DECODE_IP TO GEO_IP;

GRANT EXECUTE ON PROCEDURE WD$GEO_DECODE_IP TO PUBLIC;


SET TERM ^ ;
CREATE OR ALTER PROCEDURE SPSEO_FIX_MISSING_CITIES
AS
DECLARE VARIABLE vIPAddress VARCHAR(100);
 DECLARE VARIABLE vCityID BIGINT;
 DECLARE VARIABLE vID BIGINT;
 DECLARE VARIABLE vRunCount INTEGER;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SPSEO_FIX_MISSING_CITIES') RETURNING_VALUES :vRunCount;
    
    IF (vRunCount > 0) THEN
        EXIT;
        
        
    FOR
        SELECT a.IP_ADDRESS, a.ID
        FROM SEO_DATA a
        WHERE a.CITY_ID NOT IN (SELECT ipc.WD$ID FROM WD$IPCITY ipc)
        INTO :vIPAddress, :vID
    DO
    BEGIN
        SELECT opID
        FROM WD$GEO_DECODE_IP(:vIPAddress)
        INTO :vCityID;
        
        IF (vCityID IS NOT NULL) THEN
        BEGIN
            UPDATE SEO_DATA seo
            SET seo.CITY_ID = :vCityID
            WHERE seo.ID = :vID;
        END
    END
END^
SET TERM ; ^

GRANT EXECUTE ON PROCEDURE SPSEO_FIX_MISSING_CITIES TO PUBLIC;

GRANT EXECUTE ON PROCEDURE SPSEO_FIX_MISSING_CITIES TO SYSDBA;


SET TERM ^ ;
ALTER PROCEDURE SEO_UPDATE_TOTALS_STAGE_6
AS
DECLARE VARIABLE vDate DATE;
  DECLARE VARIABLE vCount BIGINT;
  DECLARE VARIABLE vRefUnknown BIGINT;
  DECLARE VARIABLE vRefDirect BIGINT;
  DECLARE VARIABLE vRefOrganic BIGINT;
  DECLARE VARIABLE vRefReferal BIGINT;
  DECLARE VARIABLE vRefFaceBook BIGINT;
  DECLARE VARIABLE vRefTwitter BIGINT;
  DECLARE VARIABLE vRefGoogle BIGINT;
  DECLARE VARIABLE vRefYahoo BIGINT;
  DECLARE VARIABLE vRefBing BIGINT;
  DECLARE VARIABLE vTotalVisits BIGINT;
  DECLARE VARIABLE vHumans BIGINT;
  DECLARE VARIABLE vMobile BIGINT;
  DECLARE VARIABLE vBot BIGINT;
  DECLARE VARIABLE vBounce BIGINT;
  DECLARE VARIABLE vSales NUMERIC(18, 4);
  DECLARE VARIABLE vConvert BIGINT;
  DECLARE VARIABLE vMobileConv BIGINT;
  DECLARE VARIABLE vPageCount BIGINT;
BEGIN
    EXECUTE PROCEDURE WSP_PROCEDURE_RUNNING('SEO_UPDATE_TOTALS_STAGE_6') RETURNING_VALUES :vCount;
    
    IF (vCount > 0) THEN
        EXIT;

  -- START DAILY DATA
  FOR
    SELECT CAST(seo.CREATED AS DATE), 
    COUNT(seo.SESSION_ID),
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 1 ELSE 0 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(CASE seo.IS_BOT WHEN 'N' THEN 0 ELSE 1 END),
    SUM(CASE seo.BOUNCED WHEN 'N' THEN 0 ELSE 1 END), 
    SUM(COALESCE(seo.SALE_AMOUNT, 0.00)), 
    SUM(CASE seo.SALE_AMOUNT WHEN 0 THEN 0 ELSE 1 END),
    SUM(CASE seo.IS_MOBILE_DEVICE WHEN 'N' THEN 0 ELSE CASE COALESCE(seo.SALE_AMOUNT, 0.00) WHEN 0 THEN 0 ELSE 1 END END), 
    SUM(CASE seo.REFERRAL_TYPE WHEN 0 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 1 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 2 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 3 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 4 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 5 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 6 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 7 THEN 1 ELSE 0 END),
    SUM(CASE seo.REFERRAL_TYPE WHEN 8 THEN 1 ELSE 0 END)
    FROM SEO_DATA seo
        JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
    WHERE us.PROCESS_STATUS = 7 AND seo.CREATED <= CURRENT_TIMESTAMP -0.25 
    GROUP BY 1
    INTO :vDate, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vSales,
        :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefOrganic, vRefReferal, :vRefFaceBook, 
        :vRefTwitter, :vRefGoogle, :vRefYahoo, :vRefBing
  DO
  BEGIN
    SELECT COUNT(pv.ID) 
    FROM SEO_DATA_PAGE_VIEWS pv 
    WHERE CAST(pv.VISITED AS DATE) = :vDate
    INTO :vPageCount;

    IF (NOT EXISTS (SELECT d.DAILY_DATE FROM SEO_REPORT_DAILY d WHERE d.DAILY_DATE = :vDate)) THEN
    BEGIN
        INSERT INTO SEO_REPORT_DAILY (DAILY_DATE, DAILY_TOTALVISITS, DAILY_HUMANVISITS, DAILY_MOBILEVISITS, DAILY_BOTVISITS, DAILY_BOUNCED, DAILY_TOTALPAGES, DAILY_TOTAL_SALES, DAILY_CONVERSIONS, DAILY_MOBILECONVERSIONS, DAILY_REFERUNKNOWN, DAILY_REFERDIRECT, DAILY_REFERAL, DAILY_REFERORGANIC, DAILY_REFERBING, DAILY_REFERGOOGLE, DAILY_REFERYAHOO, DAILY_REFERFACEBOOK, DAILY_REFERTWITTER)
        VALUES (:vDate, :vTotalVisits, :vHumans, :vMobile, :vBot, :vBounce, :vPageCount, :vSales, :vConvert, :vMobileConv, :vRefUnknown, :vRefDirect, :vRefReferal, :vRefOrganic, :vRefBing, :vRefGoogle, :vRefYahoo, :vRefFaceBook, :vRefTwitter);
    END ELSE 
    BEGIN
        UPDATE SEO_REPORT_DAILY SET 
        DAILY_TOTALVISITS = DAILY_TOTALVISITS + :vTotalVisits, 
        DAILY_HUMANVISITS = DAILY_HUMANVISITS + :vHumans, 
        DAILY_MOBILEVISITS = DAILY_MOBILEVISITS + :vMobile, 
        DAILY_BOTVISITS = DAILY_BOTVISITS + :vBot, 
        DAILY_BOUNCED = DAILY_BOUNCED + :vBounce, 
        DAILY_TOTALPAGES = DAILY_TOTALPAGES + :vPageCount, 
        DAILY_TOTAL_SALES = DAILY_TOTAL_SALES + :vSales, 
        DAILY_CONVERSIONS = DAILY_CONVERSIONS + :vConvert, 
        DAILY_MOBILECONVERSIONS = DAILY_MOBILECONVERSIONS + :vMobileConv, 
        DAILY_REFERUNKNOWN = DAILY_REFERUNKNOWN + :vRefUnknown, 
        DAILY_REFERDIRECT = DAILY_REFERDIRECT + :vRefDirect, 
        DAILY_REFERAL = DAILY_REFERAL + :vRefReferal, 
        DAILY_REFERORGANIC = DAILY_REFERORGANIC + :vRefOrganic, 
        DAILY_REFERBING = DAILY_REFERBING + :vRefBing, 
        DAILY_REFERGOOGLE = DAILY_REFERGOOGLE + :vRefGoogle, 
        DAILY_REFERYAHOO = DAILY_REFERYAHOO + :vRefYahoo, 
        DAILY_REFERFACEBOOK = DAILY_REFERFACEBOOK + :vRefFaceBook, 
        DAILY_REFERTWITTER = DAILY_REFERTWITTER + :vRefTwitter
        WHERE DAILY_DATE = :vDate;
    END
  END

  UPDATE SEO_UPDATE_STATUS us
  SET us.PROCESS_STATUS = 8
  WHERE us.PROCESS_STATUS = 7
    AND us.SEO_DATA_ID IN
        (
            SELECT seo.ID
            FROM SEO_DATA_PAGE_VIEWS pv
              JOIN SEO_DATA seo ON (seo.ID = pv.SEO_DATA_ID)
              JOIN SEO_UPDATE_STATUS us ON (us.SEO_DATA_ID = seo.ID)
            WHERE seo.CREATED <= (CURRENT_TIMESTAMP -0.25) AND
                us.PROCESS_STATUS = 7 
        );
  -- END DAILY DATA
END^
SET TERM ; ^


SET TERM ^ ;
CREATE OR ALTER PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL13 (
    IPBASKETID Integer,
    IPUSERID Bigint,
    IPPAYMETHOD Integer,
    IPTOTAL Decimal(6,2),
    IPDISCOUNTAMMOUNT Decimal(6,2),
    IPDISCOUNT Integer,
    IPSHIPPING Decimal(6,2),
    IPVATAMMOUNT Decimal(6,2),
    IPSHIPPINGADDRESS Bigint,
    IPCONVERSION_RATE Decimal(6,2),
    IPVAT_RATE Decimal(6,2),
    IPCULTURE Varchar(50),
    IPCOUPONCODE Varchar(30),
    IPUSER_SESSION Varchar(200),
    IPREMOTE_HOST Varchar(25),
    IPSTOREID Integer,
    IPTILLID Integer,
    IPCOST_MULTIPLIER Double precision,
    IPVOUCHERTYPE Integer,
    IPNOTES Varchar(1000),
    IPWEBSITE_ID Integer,
    IPVATREMOVED WS_BOOL,
    IPORIGINALCOUNTRY Integer,
    IPSHIPPINGREMOVETAX WS_BOOL,
    IPVERSION Integer,
    IPSUBTOTAL Decimal(18,4),
    IPOPTIONS Bigint )
RETURNS (
    OPINVOICEID Bigint )
AS
DECLARE VARIABLE vProdID INTEGER; 
  DECLARE VARIABLE vProdDesc VARCHAR(255); 
  DECLARE VARIABLE vProdQty INTEGER; 
  DECLARE VARIABLE vInvDesc VARCHAR(500); 
  DECLARE VARIABLE vInvQty INTEGER; 
  DECLARE VARIABLE vInvPrice DECIMAL(6,2); 
  DECLARE VARIABLE vInvItemID INTEGER;
  DECLARE VARIABLE vInvCost DECIMAL(6,2);
  DECLARE VARIABLE vShipCost DECIMAL(6,2); 
  DECLARE VARIABLE vUserFirstName VARCHAR(50);
  DECLARE VARIABLE vEMail VARCHAR(100);
  DECLARE VARIABLE vUserName VARCHAR(100);
  DECLARE VARIABLE vItemType INTEGER;
  DECLARE VARIABLE vUserID BIGINT;
  DECLARE VARIABLE vCountry BIGINT;
  DECLARE VARIABLE vConversionRate DOUBLE PRECISION;
  DECLARE VARIABLE vUserDiscount DOUBLE PRECISION;
  DECLARE VARIABLE vProductDiscount DOUBLE PRECISION;
BEGIN 
   
  IF (NOT EXISTS(SELECT BASKETID FROM WS_SHOPPINGBASKET WHERE BASKETID = :ipBASKETID)) THEN 
    EXCEPTION EXC_WS_INVALID_SHOPPING_BASKET; 

  SELECT M.FIRSTNAME, M.EMAIL, M.USERNAME, M.COUNTRY
  FROM WS_MEMBERS M
  WHERE (M.ID = :ipUSERID)
  INTO :vUserFirstName, :vEMail, :vUserName, :vCountry;

  EXECUTE PROCEDURE WSF_WS_INVOICE_INS12(ipUSERID, CURRENT_TIMESTAMP, ipTOTAL, ipSHIPPING, IPDISCOUNTAMMOUNT, ipDISCOUNT, ipVATAMMOUNT, ipPAYMETHOD, ipSHIPPINGADDRESS, ipCONVERSION_RATE, ipVAT_RATE, ipCULTURE, ipCOUPONCODE, ipUSER_SESSION, ipREMOTE_HOST, ipSTOREID, ipTILLID, IPCOST_MULTIPLIER, IPVOUCHERTYPE, ipNOTES, ipWEBSITE_ID, ipVATREMOVED, ipOriginalCountry, IPSHIPPINGREMOVETAX, ipVersion, ipSUBTOTAL, ipOPTIONS) RETURNING_VALUES :opINVOICEID; 

  SELECT c.CONVERSION_RATE
  FROM WS_COUNTRIES c
  WHERE c.ID = :vCountry
  INTO :vConversionRate;
  
  FOR  
    SELECT a.OPITEMID, a.OPDESCRIPTION || ' (' || a.OPPRODUCT_SIZE || ')', a.OPPRICE, a.OPQTY, a.OPQTY * a.OPPRICE, a.OPITEM_TYPE, a.OPUSER_ID, a.opUSER_DISCOUNT
    FROM WSP_SHOPPINGBASKET(:ipBASKETID) a 
    INTO :vInvItemID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vItemType, :vUserID, :vUserDiscount
  DO 
  BEGIN   
    vProductDiscount = 0.00;
    
    IF (vItemType = 1) THEN
    BEGIN
        SELECT pcs.DISCOUNT_VALUE
        FROM WS_PRODUCTS_COST_SIZE pcs
        WHERE pcs.ID = :vInvItemID
        INTO :vProductDiscount; 
    END    
    
    INSERT INTO WS_INVOICE_ITEMS(INVOICEID, DESCRIPTION, COST, QTY, PRICE, ITEM_ID, ITEM_TYPE, STAFFMEMBER, PRODUCT_DISCOUNT, USER_DISCOUNT) 
    VALUES (:opINVOICEID, :vInvDesc, :vInvCost, :vInvQty, :vInvPrice, :vInvItemID, :vItemType, :vUserID, :vProductDiscount, :vUserDiscount);
  END 

  
  IF (IPCOUPONCODE <> '') THEN
  BEGIN
    UPDATE WS_COUPONS
    SET VOUCHER_USAGE = VOUCHER_USAGE + 1
    WHERE DISCOUNT_COUPON = :IPCOUPONCODE;
  END

  SUSPEND;
END^
SET TERM ; ^


GRANT EXECUTE ON PROCEDURE WSF_CREATE_ORDER_SEND_EMAIL13 TO PUBLIC;


