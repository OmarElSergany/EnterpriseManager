ALTER TABLE WS_APPOINTMENTS ALTER APPOINTMENT_DATE TYPE Date;

ALTER TABLE WS_APPOINTMENTS_CHANGES ALTER APPOINTMENT_DATE TYPE Date;



SET TERM ^ ;
ALTER TRIGGER REPLICATE$APPTS_U ACTIVE
BEFORE UPDATE POSITION 32767
AS
  DECLARE VARIABLE vOperationLogID BIGINT;
  DECLARE VARIABLE vHASH BIGINT;
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    EXECUTE PROCEDURE REPLICATE$OPERATIONLOG_INSERT ('WS_APPOINTMENTS', 'UPDATE', 'ID', OLD.ID, NULL, NULL, NULL, NULL) RETURNING_VALUES :vOperationLogID;

    IF ((OLD.APPOINTMENT_DATE IS DISTINCT FROM NEW.APPOINTMENT_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_DATE', OLD.APPOINTMENT_DATE, NEW.APPOINTMENT_DATE, NULL, NULL);

    IF ((OLD.APPOINTMENT_TYPE IS DISTINCT FROM NEW.APPOINTMENT_TYPE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_TYPE', OLD.APPOINTMENT_TYPE, NEW.APPOINTMENT_TYPE, NULL, NULL);

    IF ((OLD.CREATE_DATE IS DISTINCT FROM NEW.CREATE_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'CREATE_DATE', OLD.CREATE_DATE, NEW.CREATE_DATE, NULL, NULL);

    IF ((OLD.DURATION IS DISTINCT FROM NEW.DURATION)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'DURATION', OLD.DURATION, NEW.DURATION, NULL, NULL);

    IF ((OLD.EMPLOYEE_ID IS DISTINCT FROM NEW.EMPLOYEE_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'EMPLOYEE_ID', OLD.EMPLOYEE_ID, NEW.EMPLOYEE_ID, NULL, NULL);

    IF ((OLD.ID IS DISTINCT FROM NEW.ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'ID', OLD.ID, NEW.ID, NULL, NULL);

    IF ((OLD.LAST_ALTERED_DATE IS DISTINCT FROM NEW.LAST_ALTERED_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_DATE', OLD.LAST_ALTERED_DATE, NEW.LAST_ALTERED_DATE, NULL, NULL);

    IF ((OLD.LAST_ALTERED_USER IS DISTINCT FROM NEW.LAST_ALTERED_USER)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_USER', OLD.LAST_ALTERED_USER, NEW.LAST_ALTERED_USER, NULL, NULL);

    IF ((OLD.LOCKED_USER IS DISTINCT FROM NEW.LOCKED_USER)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LOCKED_USER', OLD.LOCKED_USER, NEW.LOCKED_USER, NULL, NULL);

    IF ((OLD.MASTER_APPOINTMENT IS DISTINCT FROM NEW.MASTER_APPOINTMENT)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'MASTER_APPOINTMENT', OLD.MASTER_APPOINTMENT, NEW.MASTER_APPOINTMENT, NULL, NULL);

    IF ((OLD.NOTES IS DISTINCT FROM NEW.NOTES)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'NOTES', OLD.NOTES, NEW.NOTES, NULL, NULL);

    IF ((OLD.REMINDER_SENT IS DISTINCT FROM NEW.REMINDER_SENT)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'REMINDER_SENT', OLD.REMINDER_SENT, NEW.REMINDER_SENT, NULL, NULL);

    IF ((OLD.START_TIME IS DISTINCT FROM NEW.START_TIME)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'START_TIME', OLD.START_TIME, NEW.START_TIME, NULL, NULL);

    IF ((OLD.STATUS IS DISTINCT FROM NEW.STATUS)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'STATUS', OLD.STATUS, NEW.STATUS, NULL, NULL);

    IF ((OLD.TREATMENT_ID IS DISTINCT FROM NEW.TREATMENT_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'TREATMENT_ID', OLD.TREATMENT_ID, NEW.TREATMENT_ID, NULL, NULL);

    IF ((OLD.USER_ID IS DISTINCT FROM NEW.USER_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'USER_ID', OLD.USER_ID, NEW.USER_ID, NULL, NULL);

    IF (NEW.ID IS DISTINCT FROM OLD.ID) THEN
    BEGIN
      EXECUTE PROCEDURE REPLICATE$LOCALPKCHANGES_INSERT('WS_APPOINTMENTS', 'ID', OLD.ID, NEW.ID); 
    END
  END
  NEW.REPLICATE$HASH = HASH(COALESCE(NEW.APPOINTMENT_DATE, '') || COALESCE(NEW.APPOINTMENT_TYPE, '') || COALESCE(NEW.CREATE_DATE, '') || COALESCE(NEW.DURATION, '') || COALESCE(NEW.EMPLOYEE_ID, '') || COALESCE(NEW.ID, '') || COALESCE(NEW.LAST_ALTERED_DATE, '') || COALESCE(NEW.LAST_ALTERED_USER, '') || COALESCE(NEW.LOCKED_USER, '') || COALESCE(NEW.MASTER_APPOINTMENT, '') || COALESCE(NEW.NOTES, '') || COALESCE(NEW.REMINDER_SENT, '') || COALESCE(NEW.START_TIME, '') || COALESCE(NEW.STATUS, '') || COALESCE(NEW.TREATMENT_ID, '') || COALESCE(NEW.USER_ID, ''));
END^
SET TERM ; ^



SET TERM ^ ;
ALTER TRIGGER REPLICATE$APPTS_I ACTIVE
BEFORE INSERT POSITION 32767
AS
  DECLARE VARIABLE vOperationLogID BIGINT;
  DECLARE VARIABLE vHASH BIGINT;
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    EXECUTE PROCEDURE REPLICATE$OPERATIONLOG_INSERT ('WS_APPOINTMENTS', 'INSERT', 'ID', NEW.ID, NULL, NULL, NULL, NULL) RETURNING_VALUES :vOperationLogID;
    IF (NEW.APPOINTMENT_DATE IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_DATE', NULL, NEW.APPOINTMENT_DATE, NULL, NULL);
    IF (NEW.APPOINTMENT_TYPE IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_TYPE', NULL, NEW.APPOINTMENT_TYPE, NULL, NULL);
    IF (NEW.CREATE_DATE IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'CREATE_DATE', NULL, NEW.CREATE_DATE, NULL, NULL);
    IF (NEW.DURATION IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'DURATION', NULL, NEW.DURATION, NULL, NULL);
    IF (NEW.EMPLOYEE_ID IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'EMPLOYEE_ID', NULL, NEW.EMPLOYEE_ID, NULL, NULL);
    IF (NEW.ID IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'ID', NULL, NEW.ID, NULL, NULL);
    IF (NEW.LAST_ALTERED_DATE IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_DATE', NULL, NEW.LAST_ALTERED_DATE, NULL, NULL);
    IF (NEW.LAST_ALTERED_USER IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_USER', NULL, NEW.LAST_ALTERED_USER, NULL, NULL);
    IF (NEW.LOCKED_USER IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LOCKED_USER', NULL, NEW.LOCKED_USER, NULL, NULL);
    IF (NEW.MASTER_APPOINTMENT IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'MASTER_APPOINTMENT', NULL, NEW.MASTER_APPOINTMENT, NULL, NULL);
    IF (NEW.NOTES IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'NOTES', NULL, NEW.NOTES, NULL, NULL);
    IF (NEW.REMINDER_SENT IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'REMINDER_SENT', NULL, NEW.REMINDER_SENT, NULL, NULL);
    IF (NEW.START_TIME IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'START_TIME', NULL, NEW.START_TIME, NULL, NULL);
    IF (NEW.STATUS IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'STATUS', NULL, NEW.STATUS, NULL, NULL);
    IF (NEW.TREATMENT_ID IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'TREATMENT_ID', NULL, NEW.TREATMENT_ID, NULL, NULL);
    IF (NEW.USER_ID IS NOT NULL) THEN        INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'USER_ID', NULL, NEW.USER_ID, NULL, NULL);
  END

  NEW.REPLICATE$HASH = HASH(COALESCE(NEW.APPOINTMENT_DATE, '') || COALESCE(NEW.APPOINTMENT_TYPE, '') || COALESCE(NEW.CREATE_DATE, '') || COALESCE(NEW.DURATION, '') || COALESCE(NEW.EMPLOYEE_ID, '') || COALESCE(NEW.ID, '') || COALESCE(NEW.LAST_ALTERED_DATE, '') || COALESCE(NEW.LAST_ALTERED_USER, '') || COALESCE(NEW.LOCKED_USER, '') || COALESCE(NEW.MASTER_APPOINTMENT, '') || COALESCE(NEW.NOTES, '') || COALESCE(NEW.REMINDER_SENT, '') || COALESCE(NEW.START_TIME, '') || COALESCE(NEW.STATUS, '') || COALESCE(NEW.TREATMENT_ID, '') || COALESCE(NEW.USER_ID, ''));
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER REPLICATE$APPTS_D ACTIVE
AFTER DELETE POSITION 32767
AS
  DECLARE VARIABLE vOperationLogID BIGINT;
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    EXECUTE PROCEDURE REPLICATE$OPERATIONLOG_INSERT ('WS_APPOINTMENTS', 'DELETE', 'ID', OLD.ID, NULL, NULL, NULL, NULL) RETURNING_VALUES :vOperationLogID;

    IF (OLD.APPOINTMENT_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_DATE', OLD.APPOINTMENT_DATE, NULL, NULL, NULL);

    IF (OLD.APPOINTMENT_TYPE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_TYPE', OLD.APPOINTMENT_TYPE, NULL, NULL, NULL);

    IF (OLD.CREATE_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'CREATE_DATE', OLD.CREATE_DATE, NULL, NULL, NULL);

    IF (OLD.DURATION IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'DURATION', OLD.DURATION, NULL, NULL, NULL);

    IF (OLD.EMPLOYEE_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'EMPLOYEE_ID', OLD.EMPLOYEE_ID, NULL, NULL, NULL);

    IF (OLD.ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'ID', OLD.ID, NULL, NULL, NULL);

    IF (OLD.LAST_ALTERED_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_DATE', OLD.LAST_ALTERED_DATE, NULL, NULL, NULL);

    IF (OLD.LAST_ALTERED_USER IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_USER', OLD.LAST_ALTERED_USER, NULL, NULL, NULL);

    IF (OLD.LOCKED_USER IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LOCKED_USER', OLD.LOCKED_USER, NULL, NULL, NULL);

    IF (OLD.MASTER_APPOINTMENT IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'MASTER_APPOINTMENT', OLD.MASTER_APPOINTMENT, NULL, NULL, NULL);

    IF (OLD.NOTES IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'NOTES', OLD.NOTES, NULL, NULL, NULL);

    IF (OLD.REMINDER_SENT IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'REMINDER_SENT', OLD.REMINDER_SENT, NULL, NULL, NULL);

    IF (OLD.START_TIME IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'START_TIME', OLD.START_TIME, NULL, NULL, NULL);

    IF (OLD.STATUS IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'STATUS', OLD.STATUS, NULL, NULL, NULL);

    IF (OLD.TREATMENT_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'TREATMENT_ID', OLD.TREATMENT_ID, NULL, NULL, NULL);

    IF (OLD.USER_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'USER_ID', OLD.USER_ID, NULL, NULL, NULL);

  END
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER REPLICATE$TR_APPT_CHANGES_U ACTIVE
BEFORE UPDATE POSITION 32767
AS
  DECLARE VARIABLE vOperationLogID BIGINT;
  DECLARE VARIABLE vHASH BIGINT;
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    EXECUTE PROCEDURE REPLICATE$OPERATIONLOG_INSERT ('WS_APPOINTMENTS_CHANGES', 'UPDATE', 'PK_ID', OLD.PK_ID, NULL, NULL, NULL, NULL) RETURNING_VALUES :vOperationLogID;

    IF ((OLD.APPOINTMENT_DATE IS DISTINCT FROM NEW.APPOINTMENT_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_DATE', OLD.APPOINTMENT_DATE, NEW.APPOINTMENT_DATE, NULL, NULL);

    IF ((OLD.APPOINTMENT_TYPE IS DISTINCT FROM NEW.APPOINTMENT_TYPE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_TYPE', OLD.APPOINTMENT_TYPE, NEW.APPOINTMENT_TYPE, NULL, NULL);

    IF ((OLD.CREATE_DATE IS DISTINCT FROM NEW.CREATE_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'CREATE_DATE', OLD.CREATE_DATE, NEW.CREATE_DATE, NULL, NULL);

    IF ((OLD.DURATION IS DISTINCT FROM NEW.DURATION)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'DURATION', OLD.DURATION, NEW.DURATION, NULL, NULL);

    IF ((OLD.EMPLOYEE_ID IS DISTINCT FROM NEW.EMPLOYEE_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'EMPLOYEE_ID', OLD.EMPLOYEE_ID, NEW.EMPLOYEE_ID, NULL, NULL);

    IF ((OLD.ID IS DISTINCT FROM NEW.ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'ID', OLD.ID, NEW.ID, NULL, NULL);

    IF ((OLD.LAST_ALTERED_DATE IS DISTINCT FROM NEW.LAST_ALTERED_DATE)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_DATE', OLD.LAST_ALTERED_DATE, NEW.LAST_ALTERED_DATE, NULL, NULL);

    IF ((OLD.LAST_ALTERED_USER IS DISTINCT FROM NEW.LAST_ALTERED_USER)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_USER', OLD.LAST_ALTERED_USER, NEW.LAST_ALTERED_USER, NULL, NULL);

    IF ((OLD.NOTES IS DISTINCT FROM NEW.NOTES)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'NOTES', OLD.NOTES, NEW.NOTES, NULL, NULL);

    IF ((OLD.PK_ID IS DISTINCT FROM NEW.PK_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'PK_ID', OLD.PK_ID, NEW.PK_ID, NULL, NULL);

    IF ((OLD.START_TIME IS DISTINCT FROM NEW.START_TIME)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'START_TIME', OLD.START_TIME, NEW.START_TIME, NULL, NULL);

    IF ((OLD.STATUS IS DISTINCT FROM NEW.STATUS)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'STATUS', OLD.STATUS, NEW.STATUS, NULL, NULL);

    IF ((OLD.TREATMENT_ID IS DISTINCT FROM NEW.TREATMENT_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'TREATMENT_ID', OLD.TREATMENT_ID, NEW.TREATMENT_ID, NULL, NULL);

    IF ((OLD.USER_ID IS DISTINCT FROM NEW.USER_ID)) THEN
    INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
    VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'USER_ID', OLD.USER_ID, NEW.USER_ID, NULL, NULL);

    IF (NEW.PK_ID IS DISTINCT FROM OLD.PK_ID) THEN
    BEGIN
      EXECUTE PROCEDURE REPLICATE$LOCALPKCHANGES_INSERT('WS_APPOINTMENTS_CHANGES', 'PK_ID', OLD.PK_ID, NEW.PK_ID); 
    END
  END
  NEW.REPLICATE$HASH = HASH(COALESCE(NEW.APPOINTMENT_DATE, '') || COALESCE(NEW.APPOINTMENT_TYPE, '') || COALESCE(NEW.CREATE_DATE, '') || COALESCE(NEW.DURATION, '') || COALESCE(NEW.EMPLOYEE_ID, '') || COALESCE(NEW.ID, '') || COALESCE(NEW.LAST_ALTERED_DATE, '') || COALESCE(NEW.LAST_ALTERED_USER, '') || COALESCE(NEW.NOTES, '') || COALESCE(NEW.PK_ID, '') || COALESCE(NEW.START_TIME, '') || COALESCE(NEW.STATUS, '') || COALESCE(NEW.TREATMENT_ID, '') || COALESCE(NEW.USER_ID, ''));
END^
SET TERM ; ^


SET TERM ^ ;
ALTER TRIGGER REPLICATE$TR_APPT_CHANGES_D ACTIVE
AFTER DELETE POSITION 32767
AS
  DECLARE VARIABLE vOperationLogID BIGINT;
BEGIN
  IF ((RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') IS NULL) OR (RDB$GET_CONTEXT('USER_TRANSACTION', 'REPLICATING') = 'NO')) THEN
  BEGIN
    EXECUTE PROCEDURE REPLICATE$OPERATIONLOG_INSERT ('WS_APPOINTMENTS_CHANGES', 'DELETE', 'PK_ID', OLD.PK_ID, NULL, NULL, NULL, NULL) RETURNING_VALUES :vOperationLogID;

    IF (OLD.APPOINTMENT_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_DATE', OLD.APPOINTMENT_DATE, NULL, NULL, NULL);

    IF (OLD.APPOINTMENT_TYPE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'APPOINTMENT_TYPE', OLD.APPOINTMENT_TYPE, NULL, NULL, NULL);

    IF (OLD.CREATE_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'CREATE_DATE', OLD.CREATE_DATE, NULL, NULL, NULL);

    IF (OLD.DURATION IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'DURATION', OLD.DURATION, NULL, NULL, NULL);

    IF (OLD.EMPLOYEE_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'EMPLOYEE_ID', OLD.EMPLOYEE_ID, NULL, NULL, NULL);

    IF (OLD.ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'ID', OLD.ID, NULL, NULL, NULL);

    IF (OLD.LAST_ALTERED_DATE IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_DATE', OLD.LAST_ALTERED_DATE, NULL, NULL, NULL);

    IF (OLD.LAST_ALTERED_USER IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'LAST_ALTERED_USER', OLD.LAST_ALTERED_USER, NULL, NULL, NULL);

    IF (OLD.NOTES IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'NOTES', OLD.NOTES, NULL, NULL, NULL);

    IF (OLD.PK_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'PK_ID', OLD.PK_ID, NULL, NULL, NULL);

    IF (OLD.START_TIME IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'START_TIME', OLD.START_TIME, NULL, NULL, NULL);

    IF (OLD.STATUS IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'STATUS', OLD.STATUS, NULL, NULL, NULL);

    IF (OLD.TREATMENT_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'TREATMENT_ID', OLD.TREATMENT_ID, NULL, NULL, NULL);

    IF (OLD.USER_ID IS NOT NULL) THEN
      INSERT INTO REPLICATE$COLUMNLOG (ID, OPERATIONLOG_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE, OLD_VALUE_BLOB, NEW_VALUE_BLOB)
      VALUES (GEN_ID(REPLICATE$COLUMNLOG_ID, 1), :vOperationLogID, 'USER_ID', OLD.USER_ID, NULL, NULL, NULL);

  END
END^
SET TERM ; ^

