
SET TERM ^ ;
ALTER PROCEDURE WSP_WS_MEMBERS_ADDRESSES_INS (
    IPMEMBER_ID Bigint,
    IPNAME Varchar(100),
    IPADDRESSLINE1 Varchar(50),
    IPADDRESSLINE2 Varchar(50),
    IPADDRESSLINE3 Varchar(50),
    IPCITY Varchar(50),
    IPCOUNTY Varchar(50),
    IPPOSTCODE Varchar(15),
    IPCOUNTRY Integer )
RETURNS (
    OPNEWID bigint )
AS
DECLARE VARIABLE vNewUserID BIGINT;
BEGIN
  IF (ipMEMBER_ID IS NULL) THEN
    EXCEPTION EXC_155305760;

  IF (ipADDRESSLINE1 IS NULL) THEN
    EXCEPTION EXC_155306079;

  IF (ipCITY IS NULL) THEN
    EXCEPTION EXC_155305197;

  IF (ipPOSTCODE IS NULL) THEN
    EXCEPTION EXC_155305651;

  IF (ipCOUNTRY IS NULL) THEN
    EXCEPTION EXC_155305565;

  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :ipMEMBER_ID)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_MEMBERS'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :ipMEMBER_ID
    INTO :vNewUserID;
    
    IF (vNewUserID IS NOT NULL) THEN
        ipMEMBER_ID = vNewUserID;
  END
  
  
  opNewID = GEN_ID(GEN_WS_MEMBERS_ADDRESSES_ID, 1);

  INSERT INTO WS_MEMBERS_ADDRESSES(
    ID,
    MEMBER_ID, 
    NAME, 
    ADDRESSLINE1, 
    ADDRESSLINE2, 
    ADDRESSLINE3, 
    CITY, 
    COUNTY, 
    POSTCODE, 
    COUNTRY

  ) VALUES (
    :opNewID,
    :ipMEMBER_ID, 
    :ipNAME, 
    :ipADDRESSLINE1, 
    :ipADDRESSLINE2, 
    :ipADDRESSLINE3, 
    :ipCITY, 
    :ipCOUNTY, 
    :ipPOSTCODE, 
    :ipCOUNTRY
  );
  SUSPEND;
END^
SET TERM ; ^



SET TERM ^ ;
ALTER PROCEDURE WSP_APPOINTMENTS_PAGE_MEMBER (
    IPMEMBER bigint,
    IPPAGESIZE Bigint,
    IPPAGENUMBER Bigint )
RETURNS (
    OPID Bigint,
    OPEMPLOYEEID Bigint,
    OPAPPOINTMENT_DATE Date,
    OPSTART_TIME Double precision,
    OPDURATION Integer,
    OPSTATUS Integer,
    OPAPPOINTMENTTYPE Integer,
    OPTREATMENTTYPE Integer,
    OPTREATMENTNAME Varchar(150),
    OPNOTES Varchar(240),
    OPMASTER_APPOINTMENT Bigint,
    OPCREATED Timestamp,
    OPLAST_ALTERED Timestamp,
    OPLOCKEDBY Bigint,
    OPREMINDERSENT Timestamp )
AS
DECLARE VARIABLE vPAGENO BIGINT;
  DECLARE VARIABLE vCOUNTER BIGINT;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_NUM;

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_SIZE;

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR 
  SELECT a.ID, a.EMPLOYEE_ID, a.APPOINTMENT_DATE, a.START_TIME, a.DURATION,
    a.STATUS, a.APPOINTMENT_TYPE, a.TREATMENT_ID, t.NAME, a.NOTES, 
    a.MASTER_APPOINTMENT, a.CREATE_DATE, a.LAST_ALTERED_DATE, a.LOCKED_USER,
    a.REMINDER_SENT
  FROM WS_APPOINTMENTS a

    INNER JOIN WS_MEMBERS m on (m.ID = a.USER_ID) 
    INNER JOIN WS_MEMBERS e on (e.ID = a.EMPLOYEE_ID) 
    INNER JOIN WS_APPOINTMENT_TREATMENTS t on (t.ID = a.TREATMENT_ID)
    INNER JOIN WS_APPOINTMENT_STATUS status on (status.ID = a.STATUS)

  WHERE USER_ID = :ipMEMBER
  ORDER BY APPOINTMENT_DATE DESC, START_TIME DESC
  INTO :opID, :opEMPLOYEEID, :opAPPOINTMENT_DATE, :opSTART_TIME, :opDURATION, :opSTATUS, 
    :opAPPOINTMENTTYPE, :opTREATMENTTYPE, :opTREATMENTNAME, :opNOTES, :opMASTER_APPOINTMENT, :opCREATED, 
    :opLAST_ALTERED, :opLOCKEDBY, :opReminderSent
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
  
END^
SET TERM ; ^




ALTER TABLE WS_APPOINTMENTS ALTER APPOINTMENT_DATE TYPE Timestamp;

ALTER TABLE WS_APPOINTMENTS_CHANGES ALTER APPOINTMENT_DATE TYPE Timestamp;

SET TERM ^ ;
ALTER PROCEDURE WSP_APPOINTMENTS_GET (
    IPID Bigint )
RETURNS (
    OPID Bigint,
    OPAPPOINTMENT_DATE TIMESTAMP,
    OPSTART_TIME Double precision,
    OPDURATION Integer,
    OPSTATUS Integer,
    OPAPPOINTMENT_TYPE Integer,
    OPUSER_ID Bigint,
    OPEMPLOYEE_ID Bigint,
    OPTREATMENT_ID Bigint )
AS
BEGIN
  /* verify record exists */
  IF (NOT EXISTS(SELECT ID FROM WS_APPOINTMENTS WHERE ID = :ipID)) THEN
    EXCEPTION EXC_119503831;

  FOR SELECT ID, APPOINTMENT_DATE, START_TIME, DURATION, STATUS, APPOINTMENT_TYPE, USER_ID, EMPLOYEE_ID, TREATMENT_ID
  FROM WS_APPOINTMENTS
  WHERE (ID = :ipID)
  INTO :opID, :opAPPOINTMENT_DATE, :opSTART_TIME, :opDURATION, :opSTATUS, :opAPPOINTMENT_TYPE, :opUSER_ID, :opEMPLOYEE_ID, :opTREATMENT_ID
  DO
  BEGIN
    SUSPEND;
  END
  
END^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE WSP_APPOINTMENTS_INS (
    IPAPPOINTMENT_DATE TIMESTAMP,
    IPSTART_TIME Double precision,
    IPDURATION Integer,
    IPSTATUS Integer,
    IPAPPOINTMENT_TYPE Integer,
    IPUSER_ID Bigint,
    IPEMPLOYEE_ID Bigint,
    IPTREATMENT_ID Bigint,
    IPNOTES Varchar(240),
    IPMASTER_APPOINTMENT Bigint,
    IPCURRENT_USER Bigint,
    IPDATE_CREATED Timestamp,
    IPLOCKED_BY Bigint )
RETURNS (
    OPNEWID Bigint )
AS
DECLARE VARIABLE vNewUserID BIGINT;
BEGIN
  IF (NOT EXISTS(SELECT ID FROM WS_MEMBERS WHERE ID = :IPUSER_ID)) THEN
  BEGIN
    SELECT a.NEW_PK_VALUE
    FROM REPLICATE$LOCALPKCHANGES a
    WHERE a.TABLE_NAME = 'WS_MEMBERS'
        AND a.PK_COLUMN = 'ID'
        AND a.OLD_PK_VALUE = :IPUSER_ID
    INTO :vNewUserID;
    
    IF (vNewUserID IS NOT NULL) THEN
        IPUSER_ID = vNewUserID;
  END
  
  
  IF (ipAPPOINTMENT_DATE IS NULL) THEN
    EXCEPTION EXC_119505683;

  IF (ipSTART_TIME IS NULL) THEN
    EXCEPTION EXC_119505002;

  IF (ipDURATION IS NULL) THEN
    EXCEPTION EXC_119504745;

  IF (ipSTATUS IS NULL) THEN
    ipSTATUS = 0;

  IF (ipAPPOINTMENT_TYPE IS NULL) THEN
    EXCEPTION EXC_119505719;

  IF (ipUSER_ID IS NULL) THEN
    EXCEPTION EXC_119504650;

  IF (ipEMPLOYEE_ID IS NULL) THEN
    EXCEPTION EXC_119505089;

  IF (ipTREATMENT_ID IS NULL) THEN
    EXCEPTION EXC_119505213;

  IF (ipMASTER_APPOINTMENT = -1) THEN
    ipMASTER_APPOINTMENT = NULL;
    
  
  opNewID = GEN_ID(GEN_APPOINTMENT_ID, 1);

  INSERT INTO WS_APPOINTMENTS(
    ID,
    APPOINTMENT_DATE, 
    START_TIME, 
    DURATION, 
    STATUS, 
    APPOINTMENT_TYPE, 
    USER_ID, 
    EMPLOYEE_ID, 
    TREATMENT_ID,
    NOTES,
    CREATE_DATE,
    MASTER_APPOINTMENT,
    LAST_ALTERED_USER,
    LAST_ALTERED_DATE,
    LOCKED_USER
  ) VALUES (
    :opNewID,
    :ipAPPOINTMENT_DATE, 
    :ipSTART_TIME, 
    :ipDURATION, 
    :ipSTATUS, 
    :ipAPPOINTMENT_TYPE, 
    :ipUSER_ID, 
    :ipEMPLOYEE_ID, 
    :ipTREATMENT_ID,
    :ipNOTES,
    :IPDATE_CREATED,
    :ipMASTER_APPOINTMENT,
    :IPCURRENT_USER,
    :IPDATE_CREATED,
    :IPLOCKED_BY
  );
  SUSPEND;
END^
SET TERM ; ^



SET TERM ^ ;
ALTER PROCEDURE WSP_APPOINTMENTS_PAGE (
    IPPAGESIZE Bigint,
    IPPAGENUMBER Bigint )
RETURNS (
    OPID Bigint,
    OPEMPLOYEEID Bigint,
    OPAPPOINTMENT_DATE TIMESTAMP,
    OPSTART_TIME Double precision,
    OPDURATION Integer,
    OPSTATUS Integer,
    OPAPPOINTMENTTYPE Integer,
    OPTREATMENTTYPE Integer,
    OPTREATMENTNAME Varchar(150),
    OPNOTES Varchar(240),
    OPUSERID Bigint,
    OPUSERNAME Varchar(100),
    OPMASTER_APPOINTMENT Bigint,
    OPLOCKED_BY Bigint,
    OPREMINDERSENT Timestamp )
AS
DECLARE VARIABLE vPAGENO BIGINT;
  DECLARE VARIABLE vCOUNTER BIGINT;
BEGIN
  IF (ipPAGENUMBER < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_NUM;

  IF (ipPAGESIZE < 1) THEN
    EXCEPTION EXC_INVALID_PAGE_SIZE;

  vCOUNTER = 0;

  vPAGENO = (ipPAGESIZE * ipPAGENUMBER) - ipPAGESIZE;

  FOR 

  SELECT a.ID, a.EMPLOYEE_ID, a.APPOINTMENT_DATE, a.START_TIME, a.DURATION,
    a.STATUS, a.APPOINTMENT_TYPE, a.TREATMENT_ID, t.NAME, a.NOTES, m.ID, 
    m.USERNAME, a.MASTER_APPOINTMENT, A.LOCKED_USER, a.REMINDER_SENT
  FROM WS_APPOINTMENTS a

    INNER JOIN WS_MEMBERS m on (m.ID = a.USER_ID) 
    INNER JOIN WS_MEMBERS e on (e.ID = a.EMPLOYEE_ID) 
    INNER JOIN WS_APPOINTMENT_TREATMENTS t on (t.ID = a.TREATMENT_ID)
    INNER JOIN WS_APPOINTMENT_STATUS status on (status.ID = a.STATUS)
  WHERE a.STATUS = 1 AND a.APPOINTMENT_TYPE = 0
 UNION
   SELECT a.ID, a.EMPLOYEE_ID, a.APPOINTMENT_DATE, a.START_TIME, a.DURATION,
    a.STATUS, a.APPOINTMENT_TYPE, a.TREATMENT_ID, 
      CASE a.APPOINTMENT_TYPE 
        WHEN 0 THEN 'Beauty Treatment'
        WHEN 1 THEN 'Lunch Break'
        WHEN 2 THEN 'Annual Leave'
        WHEN 3 THEN 'Training'
        WHEN 4 THEN 'Clean Salon'
        WHEN 5 THEN 'Office'
        WHEN 6 THEN 'Not Working'
        WHEN 7 THEN 'Unpaid Break'
        WHEN 8 THEN 'Sick Day'
        WHEN 9 THEN 'Product Manufacture'
        ELSE
          'Unknown'
      END

    , a.NOTES, m.ID, m.USERNAME, a.MASTER_APPOINTMENT, A.LOCKED_USER, a.REMINDER_SENT
  FROM WS_APPOINTMENTS a
    INNER JOIN WS_MEMBERS m on (m.ID = a.EMPLOYEE_ID) 
  WHERE a.STATUS = 1 AND a.APPOINTMENT_TYPE > 0

  INTO :opID, :opEMPLOYEEID, :opAPPOINTMENT_DATE, :opSTART_TIME, :opDURATION, :opSTATUS, 
    :opAPPOINTMENTTYPE, :opTREATMENTTYPE, :opTREATMENTNAME, :opNOTES, :opUSERID, :opUSERNAME, 
    :OPMASTER_APPOINTMENT, :opLOCKED_BY, :opReminderSent
  DO
  BEGIN
    IF ((vCOUNTER >= vPAGENO) AND (vCOUNTER < (vPAGENO + ipPAGESIZE))) THEN
    BEGIN
      SUSPEND;
    END

    vCOUNTER = vCOUNTER + 1;

    IF (vCOUNTER > (vPAGENO + ipPAGESIZE)) THEN
    BEGIN
      EXIT;
    END
  END
  END^
SET TERM ; ^



